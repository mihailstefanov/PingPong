ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l0xx_hal_adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	__aeabi_uidiv
  16              		.section	.text.ADC_DelayMicroSecond,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	ADC_DelayMicroSecond:
  24              	.LFB67:
  25              		.file 1 "Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c"
   1:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @file    stm32l0xx_hal_adc.c
   4:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @version V1.8.1
   6:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @date    14-April-2017
   7:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   9:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          peripheral:
  10:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + Initialization and de-initialization functions
  11:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  12:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + Operation functions
  13:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  14:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  15:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + Control functions
  16:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  17:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  18:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + State functions
  19:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ ADC state machine management
  20:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Interrupts and flags management
  21:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  22:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          "stm32l0xx_hal_adc_ex.c".
  23:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
  24:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   @verbatim
  25:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ==============================================================================
  26:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                      ##### ADC peripheral features #####
  27:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ==============================================================================
  28:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   [..]
  29:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  30:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  31:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of 
  32:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       analog watchdog or overrun events.
  33:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 2


  34:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  35:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  36:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  37:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  38:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  39:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  40:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Programmable sampling time (common for all channels)
  41:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  42:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  43:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  44:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  45:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  46:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC calibration
  47:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  48:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC conversion of regular group.
  49:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  50:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC supply requirements: 1.62 V to 3.6 V.
  51:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  52:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  53:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       Vdda or to an external voltage reference).
  54:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  55:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  56:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                      ##### How to use this driver #####
  57:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ==============================================================================
  58:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
  59:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  60:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  61:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ============================================================
  62:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
  63:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  64:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Enable the ADC interface
  65:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) As prerequisite, ADC clock must be configured at RCC top level.
  66:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              Caution: On STM32L0, ADC clock frequency max is 16MHz (refer
  67:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       to device datasheet).
  68:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       Therefore, ADC clock prescaler must be configured in 
  69:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       function of ADC clock source frequency to remain below
  70:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       this maximum frequency.
  71:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  72:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) Two clock settings are mandatory: 
  73:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  74:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  75:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  76:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from APB clock
  77:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    or asynchronous clock derived from ADC dedicated HSI RC oscillator
  78:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    16MHz.
  79:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    If asynchronous clock is selected, parameter "HSIState" must be set either:
  80:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    - to "...HSIState = RCC_HSI_ON" to maintain the HSI16 oscillator
  81:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                      always enabled: can be used to supply the main system clock.
  82:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  83:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) Example:
  84:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  85:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    other device clock parameters configuration:
  86:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) __HAL_RCC_ADC1_CLK_ENABLE();                 (mandatory)
  87:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  88:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                HSI enable                                         (optional: if asynchronous clock 
  89:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitTypeDef   RCC_OscInitStructure;
  90:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 3


  91:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI16CalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  92:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_ON;
  93:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL...   (optional if used for system clock)
  94:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
  95:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  96:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
  97:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
  98:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  99:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) ADC pins configuration
 100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
 101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
 102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
 103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_GPIO_Init()
 104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               ADCx_IRQHandler().
 111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_DMA_Init().
 115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ================================================================
 123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADC_Init().
 128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         monitored, thresholds, ...)
 135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) When device is in mode low-power (low-power run, low-power sleep or stop mode), 
 139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         function "HAL_ADCEx_EnableVREFINT()" must be called before function HAL_ADC_Init().
 140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         In case of internal temperature sensor to be measured:
 141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly
 142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Execution of ADC conversions ***
 144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ====================================
 145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 4


 148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         conversion accuracy
 149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         transfer by DMA.
 153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC conversion by polling:
 155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Start()
 157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 (this function must be implemented in user program)
 170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 (these functions must be implemented in user program)
 181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 destination variable address.
 183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 190:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 192:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Deinitialization of ADC ***
 195:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ============================================================
 196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 198:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Disable the ADC interface
 199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 201:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC clock disable
 203:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 204:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) Example:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 5


 205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    other device clock parameters configuration:
 207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 208:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
 209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) ADC pins configuration
 212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 216:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 219:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 220:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Deinitialize the DMA
 221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_DMA_Init().
 222:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 223:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
 226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     @endverbatim
 228:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ******************************************************************************
 229:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @attention
 230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 237:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 242:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      without specific prior written permission.
 243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 248:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 249:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 251:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 253:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 254:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ******************************************************************************  
 256:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 258:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #include "stm32l0xx_hal.h"
 260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 261:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @addtogroup STM32L0xx_HAL_Driver
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 6


 262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 264:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC ADC
 266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief ADC HAL module driver
 267:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 270:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 272:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 273:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 275:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 276:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Delay for ADC stabilization time.                                          */
 280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Maximum delay is 1us (refer to device datasheet, parameter tSTART). */
 281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Unit: us */
 282:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #define ADC_STAB_DELAY_US       ((uint32_t) 1U)
 283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Delay for temperature sensor stabilization time. */
 285:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Maximum delay is 10us (refer to device datasheet, parameter tSTART). */
 286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Unit: us */
 287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #define ADC_TEMPSENSOR_DELAY_US ((uint32_t) 10U) 
 288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
 290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 292:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 297:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc);
 299:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc);
 300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc);
 301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DelayMicroSecond(uint32_t microSecond);
 305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 306:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
 307:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 309:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Exported functions ---------------------------------------------------------*/
 310:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 311:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 312:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 315:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions
 316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 318:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim    
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 7


 319:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 320:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) De-initialize the ADC.
 325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
 326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Initialize the ADC peripheral and regular group according to  
 331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 333:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         depending on possible clock sources: APB clock of HSI clock.
 334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented
 335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         before HAL_ADC_Init().
 343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 345:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 347:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   When device is in mode low-power (low-power run, low-power sleep or stop mode), 
 350:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         function "HAL_ADCEx_EnableVREFINT()" must be called before function HAL_ADC_Init() 
 351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (in case of previous ADC operations: function HAL_ADC_DeInit() must be called first).
 352:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In case of internal temperature sensor to be measured:
 353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
 354:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  
 360:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check ADC handle */
 361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc == NULL)
 362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 366:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 368:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 371:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 8


 376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerFrequencyMode));
 381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTime));
 383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* at RCC top level depending on both possible clock sources:               */
 387:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* APB clock or HSI clock.                                                  */
 388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling procedure*/
 389:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 392:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* - ADC voltage regulator enable                                           */
 393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_RESET)
 394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 395:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Initialize ADC error code */
 396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 397:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 400:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 401:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Init the low level hardware */
 402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 404:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 405:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* correctly completed.                                                     */
 407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* and if there is no conversion on going on regular group (ADC can be      */
 408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* enabled anyway, in case of call of this function to update a parameter   */
 409:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* on the fly).                                                             */
 410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 412:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 413:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update ADC state machine to error */
 414:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 416:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process unlocked */
 417:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 418:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 419:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC state */
 422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_STATE_CLR_SET(hadc->State,
 423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_REG_BUSY,
 424:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_BUSY_INTERNAL);
 425:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 426:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                            */
 427:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters that can be updated only when ADC is disabled:              */
 428:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - ADC clock mode                                                      */
 429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - ADC clock prescaler                                                 */
 430:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - ADC Resolution                                                      */
 431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 9


 433:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Some parameters of this register are not reset, since they are set   */
 434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* by other functions and must be kept in case of usage of this         */
 435:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 436:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* without needing to reconfigure all other ADC groups/channels         */
 437:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* parameters):                                                         */
 438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 439:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*     (set into HAL_ADC_ConfigChannel() )                              */
 440:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of ADC clock: clock source PCLK or asynchronous with 
 442:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     selectable prescaler */
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLOCK_PRESCALER(hadc);
 444:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 445:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of ADC:                                                */
 446:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Resolution                                                        */
 447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 449:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set the Low Frequency mode */
 452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 454:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 455:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Enable voltage regulator (if disabled at this step) */
 456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 457:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 458:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADVREGEN bit */
 459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CR |= ADC_CR_ADVREGEN;
 460:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 462:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Configuration of ADC:                                                    */
 463:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Resolution                                                            */
 464:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Data alignment                                                        */
 465:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Scan direction                                                        */
 466:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - External trigger to start conversion                                  */
 467:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - External trigger polarity                                             */
 468:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Continuous conversion mode                                            */
 469:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - DMA continuous request                                                */
 470:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Overrun                                                               */
 471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - AutoDelay feature                                                     */
 472:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Discontinuous mode                                                    */
 473:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 474:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_SCANDIR |
 475:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_EXTSEL  |
 476:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_EXTEN   |
 477:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_CONT    |
 478:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_DMACFG  |
 479:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_OVRMOD  |
 480:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_AUTDLY  |
 481:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_AUTOFF  |
 482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_DISCEN   );
 483:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 488:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             hadc->Init.Overrun                               |
 489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 10


 490:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 491:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Enable external trigger if trigger selection is different of software  */
 493:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* start.                                                                 */
 494:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Note: This configuration keeps the hardware feature of parameter       */
 495:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 496:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       software start.                                                  */
 497:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 498:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 499:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 500:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              hadc->Init.ExternalTrigConvEdge;
 501:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 502:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 503:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Enable discontinuous mode only if continuous mode is disabled */
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.DiscontinuousConvMode == ENABLE)
 505:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 506:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.ContinuousConvMode == DISABLE)
 507:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 508:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable the selected ADC group regular discontinuous mode */
 509:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 510:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 511:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
 512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 513:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* ADC regular group discontinuous was intended to be enabled,        */
 514:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* but ADC regular group modes continuous and sequencer discontinuous */
 515:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* cannot be enabled simultaneously.                                  */
 516:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 517:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
 518:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 520:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 521:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 522:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 523:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 524:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 525:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
 526:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 527:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversample.Ratio));
 528:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversample.RightBitShift));
 529:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversample.TriggeredMode));
 530:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 531:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of Oversampler:                                          */
 532:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Oversampling Ratio                                                  */
 533:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Right bit shift                                                     */
 534:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Triggered mode                                                      */
 535:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 536:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 537:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_CFGR2_OVSS |
 538:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_CFGR2_TOVS );
 539:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 541:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.RightBitShift             |
 542:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.TriggeredMode );
 543:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 544:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable OverSampling mode */
 545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 546:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 11


 547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
 548:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 549:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 551:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Disable OverSampling mode if needed */
 552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 553:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 554:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }    
 555:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 556:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Clear the old sampling time */
 557:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 558:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 559:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set the new sample time */
 560:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 561:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 562:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Clear ADC error code */
 563:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_CLEAR_ERRORCODE(hadc);
 564:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 565:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set the ADC state */
 566:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_STATE_CLR_SET(hadc->State,
 567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_BUSY_INTERNAL,
 568:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_READY);
 569:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 570:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 571:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 573:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 574:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 575:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 576:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 577:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 578:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done 
 579:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 580:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is  
 581:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behavior in
 582:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same 
 583:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         common group is still running.
 584:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 585:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 586:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 587:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 588:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 589:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 591:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check ADC handle */
 592:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc == NULL)
 593:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 594:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 595:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 596:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 597:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 598:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 599:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 600:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC state */
 601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 602:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 603:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Stop potential conversion on going, on regular group */
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 12


 604:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 605:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 606:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 607:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 608:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {   
 609:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable the ADC peripheral */
 610:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 611:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 612:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status != HAL_ERROR)
 614:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 615:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Change ADC state */
 616:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 617:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 618:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 619:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 620:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 621:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 622:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* correctly completed.                                                     */
 623:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status != HAL_ERROR)
 624:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 625:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 626:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 627:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register IER */
 628:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 629:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
 630:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 631:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 632:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register ISR */
 633:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 634:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_FLAG_EOC | ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 635:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 636:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 637:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CR */
 638:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable voltage regulator */
 639:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: Regulator disable useful for power saving */
 640:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset ADVREGEN bit */
 641:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 642:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 643:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable 
 644:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* No action */
 645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 646:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CFGR1 */
 647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 648:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_DISCEN | ADC_CFGR1_AUTOFF | ADC_CFGR1_AUTDLY | \
 649:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
 650:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
 651:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
 652:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 653:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CFGR2 */
 654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 655:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
 656:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 658:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register SMPR */
 659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 660:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 13


 661:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register TR */
 662:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 663:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 664:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CALFACT */
 665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 666:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 667:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 668:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 669:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 670:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 671:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register DR */
 672:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 673:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CALFACT */
 675:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 676:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 677:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 678:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 679:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 680:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 681:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 682:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*                                                                        */
 683:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                                  */
 684:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                                */
 685:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 686:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* DeInit the low level hardware */
 687:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 688:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC error code to none */
 690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 691:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 692:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
 693:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 694:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 695:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 696:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
 697:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 698:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 699:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 700:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 702:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 703:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 704:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Initialize the ADC MSP.
 705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 706:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
 707:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 708:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 710:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 711:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
 712:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 713:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 714:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 715:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    */ 
 716:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 717:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 14


 718:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 719:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DeInitialize the ADC MSP.
 720:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 721:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
 722:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 723:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 724:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 725:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 726:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
 727:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 728:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 729:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 730:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    */ 
 731:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 732:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 733:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 734:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
 735:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 736:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 737:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
 738:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *  @brief    ADC IO operation functions 
 739:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *
 740:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim   
 741:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 742:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       ##### IO operation functions #####
 743:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 744:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 745:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Start conversion of regular group.
 746:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Stop conversion of regular group.
 747:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 748:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Poll for conversion event.
 749:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 750:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 751:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 752:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Handle ADC interrupt request
 753:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 754:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 755:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
 756:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 757:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 758:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 759:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 760:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group.
 761:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Interruptions enabled in this function: None.
 762:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 763:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 764:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 765:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 766:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 767:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 768:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 769:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 770:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 771:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 772:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
 773:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 15


 775:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process locked */
 776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 777:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 778:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
 779:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
 780:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
 781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 782:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 784:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 785:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 786:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
 787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 788:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 789:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state                                                        */
 790:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
 791:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
 792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 793:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 794:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
 795:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 796:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Reset ADC all error code fields */
 797:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 798:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 799:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
 800:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 801:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 803:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 804:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
 805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
 806:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* operations)                                                          */
 807:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 808:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 809:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
 810:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
 811:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
 812:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* trigger event.                                                       */
 813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 814:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 815:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 816:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
 817:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 819:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 821:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 822:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 823:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 824:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 825:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 826:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 827:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
 828:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 829:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
 830:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 831:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 16


 832:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 833:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 834:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 835:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 836:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 838:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
 839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 840:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 841:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC group regular */
 842:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 843:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 844:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 845:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 846:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 847:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
 848:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 849:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 850:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 851:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 852:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 853:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
 854:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 855:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 856:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 857:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 858:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 859:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 860:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
 861:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 862:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 863:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 864:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 865:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 866:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 867:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 868:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
 869:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 870:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
 871:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are 
 872:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
 873:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
 874:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 875:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 876:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 877:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 878:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 879:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
 880:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
 881:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 882:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
 883:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 884:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 885:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 886:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 887:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0;
 888:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tmp_Flag_EOC   = 0x00;
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 17


 889:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 890:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 891:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 892:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 893:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* If end of conversion selected to end of sequence conversions */
 894:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 895:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 896:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_Flag_EOC = ADC_FLAG_EOS;
 897:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 898:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* If end of conversion selected to end of unitary conversion */
 899:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
 900:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 901:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
 902:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* each conversion:                                                       */
 903:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 904:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
 905:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
 906:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
 907:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 908:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 909:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
 910:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 911:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 912:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
 913:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 914:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 915:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
 916:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 917:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
 918:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 919:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 920:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 921:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 922:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 923:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Get tick count */
 924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tickstart = HAL_GetTick();
 925:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Wait until End of unitary conversion or sequence conversions flag is raised */
 927:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 928:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 929:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 931:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 933:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 934:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 936:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 937:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Process unlocked */
 938:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 939:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 940:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_TIMEOUT;
 941:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 942:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 943:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 944:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 945:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Update ADC state machine */
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 18


 946:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 947:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 948:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 949:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 951:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 952:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 953:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If End of Sequence is reached, disable interrupts */
 954:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 955:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 956:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
 957:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* ADSTART==0 (no conversion on going)                                  */
 958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 959:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 960:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
 961:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
 962:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* HAL_Start_IT(), but is not disabled here because can be used       */
 963:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
 964:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 965:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 966:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC state */
 967:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 968:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 969:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
 970:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 971:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       else
 972:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 973:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Change ADC state to error state */
 974:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 975:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 976:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 977:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 978:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 979:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 980:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 981:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 982:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature       */
 983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
 984:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* until data register is read using function HAL_ADC_GetValue().           */
 985:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 986:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 987:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear regular group conversion flag */
 988:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 989:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 990:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 991:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 992:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 993:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 994:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 995:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 996:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Poll for ADC event.
 997:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 998:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  EventType: the ADC event type.
 999:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          This parameter can be one of the following values:
1000:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event
1001:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event
1002:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 19


1003:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   The relevant flag is cleared if found to be set, except for ADC_FLAG_OVR.
1004:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Indeed, the latter is reset only if hadc->Init.Overrun field is set  
1005:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         to ADC_OVR_DATA_OVERWRITTEN. Otherwise, data register may be potentially overwritten 
1006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         by a new converted data as soon as OVR is cleared.
1007:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         To reset OVR flag once the preserved data is retrieved, the user can resort
1008:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         to macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR); 
1009:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1010:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1011:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1012:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1013:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U; 
1014:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1015:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1016:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1017:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1018:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1019:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Get tick count */
1020:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tickstart = HAL_GetTick();
1021:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1022:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check selected event flag */
1023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
1024:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1025:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1026:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
1027:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1028:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((Timeout == 0U) ||((HAL_GetTick() - tickstart ) > Timeout))
1029:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1030:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1031:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1032:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1033:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Process unlocked */
1034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1035:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1036:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_TIMEOUT;
1037:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1038:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1039:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1040:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1041:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   switch(EventType)
1042:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1043:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1044:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   case ADC_AWD_EVENT:
1045:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
1046:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1048:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1049:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1050:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
1051:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1052:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Overrun event */
1053:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   default: /* Case ADC_OVR_EVENT */
1054:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data, overrun event is not     */
1055:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* considered as an error.                                                */
1056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1057:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* overrun ")                                                             */
1058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1059:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 20


1060:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1061:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
1062:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1063:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1064:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1065:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1067:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear ADC Overrun flag */
1068:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1069:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
1070:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1071:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1072:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
1074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1075:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1076:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1077:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group with interruption.
1078:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Interruptions enabled in this function according to initialization
1079:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         setting : EOC (end of conversion), EOS (end of sequence), 
1080:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         OVR overrun.
1081:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1082:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   To guarantee a proper reset of all interruptions once all the needed
1083:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         conversions are obtained, HAL_ADC_Stop_IT() must be called to ensure 
1084:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         a correct stop of the IT-based conversions.
1085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   By default, HAL_ADC_Start_IT() doesn't enable the End Of Sampling 
1086:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         interruption. If required (e.g. in case of oversampling with trigger
1087:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         mode), the user must:
1088:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          1. first clear the EOSMP flag if set with macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EO
1089:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          2. then enable the EOSMP interrupt with macro __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOSMP) 
1090:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          before calling HAL_ADC_Start_IT().
1091:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1092:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1093:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1094:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1096:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1097:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1098:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1099:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process locked */
1105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
1109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
1110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 21


1117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state                                                        */
1119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
1129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* operations)                                                          */
1136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */  
1140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       switch(hadc->Init.EOCSelection)
1141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV: 
1143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
1145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
1146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         default:
1148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
1150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* trigger event.                                                       */
1156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 22


1174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC group regular */
1186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1190:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1192:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1195:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1198:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1201:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1203:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1204:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1208:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1216:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group and transfer result through DMA.
1217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Interruptions enabled in this function:
1218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         overrun (if applicable), DMA half transfer, DMA transfer complete. 
1219:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1220:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  pData: Destination Buffer address.
1222:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  Length: Length of data to be transferred from ADC peripheral to memory (in bytes)
1223:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1228:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1229:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 23


1231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process locked */
1236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1237:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
1240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* performed automatically by hardware.                                     */
1241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1242:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1248:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1249:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state                                                        */
1250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1251:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1253:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1254:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1256:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1258:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
1260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1261:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1264:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1267:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1270:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set the DMA error callback */
1271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1272:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1273:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1275:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1276:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* operations)                                                          */
1280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1282:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1285:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC DMA mode */
1286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
1287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 24


1288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Start the DMA channel */
1289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1292:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* trigger event.                                                       */
1295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1297:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1299:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1306:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1307:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1309:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1310:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC peripheral.
1311:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1312:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1315:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1318:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1319:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1320:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* 1. Stop potential ADC group regular conversion on going */
1326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
1332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
1333:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
1335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
1336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status != HAL_OK)
1340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
1342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 25


1345:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1347:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
1350:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* in memory a potential failing status.                                  */
1351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1352:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
1354:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
1356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_Disable(hadc);
1358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1360:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1366:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1368:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1371:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            to flag EOC.
1387:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1389:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         To clear this flag, either use function:
1391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1392:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion()
1393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1395:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval ADC group regular conversion data
1396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1397:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1400:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1401:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 26


1402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1404:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1405:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return ADC converted value */ 
1406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->Instance->DR;
1407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1409:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Handle ADC interrupt request.
1411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1412:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1413:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1414:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1416:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1417:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1418:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1419:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
1420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
1423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
1424:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1425:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1426:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1427:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1428:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1430:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
1433:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
1434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1435:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
1436:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1437:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
1438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
1439:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1440:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
1441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
1442:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
1444:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
1445:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
1446:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
1447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
1448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
1449:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
1450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC state */
1451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
1452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
1453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
1454:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
1455:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         else
1456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
1457:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Change ADC state to error state */
1458:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 27


1459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
1460:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
1461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1462:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
1463:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1464:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1465:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1466:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Conversion complete callback */
1467:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: into callback, to determine if conversion has been triggered     */
1468:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       from EOC or EOS, possibility to use:                             */
1469:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
1470:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
1471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1472:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1473:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
1474:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
1475:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
1476:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
1477:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: Management of low power auto-wait enabled: flags must be cleared */
1478:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       by user when fetching ADC conversion data.                       */
1479:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       This case is managed in IRQ handler, but this low-power mode     */
1480:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       should not be used with programming model IT or DMA.             */
1481:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       Refer to comment of parameter "LowPowerAutoWait".                */
1482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoWait != ENABLE)
1483:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
1485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1488:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ========== Check analog watchdog 1 flag ========== */
1489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
1490:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1491:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
1492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1493:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1494:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Level out of window 1 callback */
1495:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
1496:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1497:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear ADC Analog watchdog flag */
1498:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1499:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
1500:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1501:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1502:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1503:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
1504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
1505:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1506:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
1507:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
1508:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1509:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* overrun ")                                                             */
1510:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
1511:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* error.                                                                 */
1512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
1513:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
1514:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1515:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to overrun */
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 28


1516:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1517:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1518:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear ADC overrun flag */
1519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1520:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1521:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Error callback */ 
1522:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1523:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1524:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1525:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear the Overrun flag */
1526:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1527:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1528:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1529:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1530:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1531:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1532:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Conversion complete callback in non-blocking mode.
1533:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1534:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1535:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1536:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1537:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1538:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1539:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1541:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1542:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1543:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    */
1544:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1546:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non-blocking mode.
1548:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1549:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1551:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1553:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1554:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1555:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1556:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1557:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1558:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1559:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1560:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1561:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1562:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Analog watchdog 1 callback in non-blocking mode.
1563:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1564:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1565:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1566:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1568:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1569:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1570:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1571:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 29


1573:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1574:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1575:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1576:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1577:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  ADC error callback in non-blocking mode
1578:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA).
1579:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer 
1580:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
1581:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
1582:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
1583:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
1584:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
1585:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1586:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1587:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1588:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1589:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1591:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1592:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1593:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1594:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1595:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1596:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1597:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1598:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1599:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1600:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1602:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1603:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *  @brief    Peripheral Control functions 
1604:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *
1605:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim   
1606:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
1607:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              ##### Peripheral Control functions #####
1608:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================  
1609:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1610:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Configure channels on regular group
1611:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Configure the analog watchdog
1612:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
1614:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
1615:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1616:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1617:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1618:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Configure a channel to be assigned to ADC group regular.
1619:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1620:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         VrefInt/Vlcd(STM32L0x3xx only)/TempSensor.
1621:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Sampling time constraints must be respected (sampling time can be 
1622:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         adjusted in function of ADC clock frequency and sampling time 
1623:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         setting).
1624:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Refer to device datasheet for timings values, parameters TS_vrefint,
1625:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         TS_vlcd (STM32L0x3xx only), TS_temp (values rough order: 5us to 17us).
1626:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1627:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1628:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1629:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This function initializes channel into ADC group regular,
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 30


1630:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         following calls to this function can be used to reconfigure
1631:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         some parameters of structure "ADC_ChannelConfTypeDef" on the fly,
1632:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         without resetting the ADC.
1633:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state:
1634:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Refer to comments of structure "ADC_ChannelConfTypeDef".
1635:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1636:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
1637:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1638:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1639:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1640:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1641:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1642:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1643:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1644:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RANK(sConfig->Rank));
1645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1646:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1648:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1649:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1650:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1651:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1652:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Channel number                                                        */
1653:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
1654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
1655:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1656:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update ADC state machine to error */
1657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1658:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process unlocked */
1659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1660:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
1661:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1662:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1663:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (sConfig->Rank != ADC_RANK_NONE)
1664:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable selected channels */
1666:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
1667:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1668:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Management of internal measurement channels: Vlcd (STM32L0x3xx only)/VrefInt/TempSensor */
1669:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* internal measurement paths enable: If internal channel selected, enable  */
1670:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* dedicated internal buffers and path.                                     */
1671:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1672:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If Temperature sensor channel is selected, then enable the internal      */
1673:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* buffers and path  */
1674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSO
1675:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1676:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_TSEN;   
1677:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1678:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Delay for temperature sensor stabilization time */
1679:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
1680:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1681:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1682:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If VRefInt channel is selected, then enable the internal buffers and path   */
1683:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC
1684:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1685:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_VREFEN;   
1686:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 31


1687:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1688:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx
1689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If Vlcd channel is selected, then enable the internal buffers and path   */
1690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANN
1691:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1692:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_VLCDEN;   
1693:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1694:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif
1695:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1696:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1697:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1698:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Regular sequence configuration */
1699:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset the channel selection register from the selected channel */
1700:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
1701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1702:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1703:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* internal measurement paths disable: If internal channel selected,    */
1704:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* disable dedicated internal buffers and path.                         */
1705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSO
1706:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1707:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_TSEN;   
1708:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1710:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If VRefInt channel is selected, then enable the internal buffers and path   */
1711:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC
1712:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1713:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_VREFEN;   
1714:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1715:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1716:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx
1717:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If Vlcd channel is selected, then enable the internal buffers and path   */
1718:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANN
1719:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1720:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_VLCDEN;   
1721:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1722:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif
1723:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1724:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1725:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1726:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1727:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1728:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1729:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
1730:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1731:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1732:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1733:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Configure the analog watchdog.
1734:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1735:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, successive  
1736:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1737:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without resetting 
1738:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         the ADC.
1739:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1740:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1741:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
1742:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
1743:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         is on going.
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 32


1744:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
1745:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
1746:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
1747:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
1748:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
1749:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
1750:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1751:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
1752:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1753:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1754:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1755:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1756:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1757:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1758:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
1759:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
1760:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1761:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1762:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1763:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1764:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1765:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1766:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
1767:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1768:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1769:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1770:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1771:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Verify if threshold is within the selected ADC resolution */
1772:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
1773:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
1774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1775:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1777:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1778:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1779:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1780:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
1782:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Analog watchdog thresholds                                            */
1783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1784:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1785:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configure ADC Analog watchdog interrupt */
1786:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(AnalogWDGConfig->ITMode == ENABLE)
1787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1788:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable the ADC Analog watchdog interrupt */
1789:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1790:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1791:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
1792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1793:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Disable the ADC Analog watchdog interrupt */
1794:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1795:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1796:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1797:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of analog watchdog:                                        */
1798:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Set the analog watchdog mode                                          */
1799:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Set the Analog watchdog channel (is not used if watchdog              */
1800:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*    mode "all channels": ADC_CFGR1_AWD1SGL=0)                             */
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 33


1801:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
1802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_AWDEN  |
1803:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_AWDCH);
1804:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode |
1806:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                               (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
1807:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1808:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1809:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Shift the offset in function of the selected ADC resolution: Thresholds  */
1810:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0     */
1811:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
1812:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
1813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1814:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear High & Low high thresholds */
1815:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR &= (uint32_t) ~ (ADC_TR_HT | ADC_TR_LT);
1816:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1817:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set the high threshold */
1818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR = ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted);
1819:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set the low threshold */
1820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR |= tmpAWDLowThresholdShifted;
1821:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1822:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update could be done    */
1823:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* on neither of the AWD configuration structure parameters.                */
1824:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1825:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1826:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update ADC state machine to error */
1827:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1828:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1829:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1830:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1831:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1832:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1833:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1834:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1835:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1836:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1838:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1840:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1841:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1842:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1843:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1844:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1845:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *  @brief    ADC Peripheral State functions
1846:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *
1847:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim
1848:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
1849:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             ##### Peripheral state and errors functions #####
1850:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
1851:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
1852:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1853:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     peripheral.
1854:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Check the ADC state
1855:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Check the ADC error code
1856:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1857:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 34


1858:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
1859:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1860:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1861:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1862:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Return the ADC handle state.
1863:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be 
1864:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         compared with states bits.
1865:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         For example:                                                         
1866:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_REG_BUSY)) "
1867:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
1868:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1869:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval ADC handle state (bitfield on 32 bits)
1870:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1871:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1872:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1873:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1874:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1875:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1876:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return ADC handle state */
1877:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->State;
1878:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1879:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1880:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1881:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Return the ADC error code.
1882:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1883:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval ADC error code (bitfield on 32 bits)
1884:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1885:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1886:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1887:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1888:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1889:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1890:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->ErrorCode;
1891:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1892:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1893:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1894:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1895:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1896:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1897:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1898:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1899:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1900:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1901:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1902:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
1903:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1904:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1905:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1906:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1907:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1908:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1909:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   If low power mode AutoPowerOff is enabled, power-on/off phases are
1910:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         performed automatically by hardware.
1911:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In this mode, this function is useless and must not be called because 
1912:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         flag ADC_FLAG_RDY is not usable.
1913:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Therefore, this function must be called under condition of
1914:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 35


1915:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1916:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1917:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1918:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1919:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1920:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
1921:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1922:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
1923:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1925:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
1927:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1928:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
1929:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
1930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1931:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
1932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1933:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1934:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1936:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1937:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
1938:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1939:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1940:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1941:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1942:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1943:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Delay for ADC stabilization time. */
1944:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
1945:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1946:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Get tick count */
1947:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
1948:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1949:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
1951:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1952:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
1953:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1954:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to error */
1955:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1956:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1957:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1959:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1960:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
1961:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1962:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1963:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1964:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
1965:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return HAL status */
1966:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
1967:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1968:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1969:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1970:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Disable the selected ADC.
1971:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 36


1972:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         stopped.
1973:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1974:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1975:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1976:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
1977:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1978:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
1979:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1980:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
1981:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
1982:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       disabled.                                                          */
1983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
1984:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1985:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
1986:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
1987:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1988:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Disable the ADC peripheral */
1989:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_DISABLE(hadc);
1990:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1991:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
1992:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1993:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
1994:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1995:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1996:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1997:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1998:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1999:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
2000:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2001:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      
2002:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2003:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Get tick count */
2004:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2005:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
2007:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2008:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
2009:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2010:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to error */
2011:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2012:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2013:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2014:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2015:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2016:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
2017:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2018:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2019:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2020:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2021:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return HAL status */
2022:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
2023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2024:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2025:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2026:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2027:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion.
2028:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 37


2029:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         stopped to disable the ADC.
2030:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
2031:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
2032:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2033:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
2034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2035:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
2036:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2037:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
2038:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2039:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2040:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Verification if ADC is not already stopped on regular group to bypass    */
2041:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* this function if not needed.                                             */
2042:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
2043:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2044:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2045:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Stop potential conversion on going on regular group */
2046:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
2047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
2048:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
2049:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2050:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Stop conversions on regular group */
2051:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTP;
2052:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2053:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2054:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
2055:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Get tick count */
2056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2057:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
2058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
2059:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2060:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
2061:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2062:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to error */
2063:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2064:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
2065:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2067:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2068:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
2069:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2070:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2071:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2072:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
2074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return HAL status */
2075:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
2076:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2077:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2078:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2079:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2080:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2081:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2082:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2083:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2084:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 38


2086:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2087:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2088:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2089:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2090:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
2091:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2092:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
2093:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
2094:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2096:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2097:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
2098:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
2099:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
2102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
2104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
2105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
2106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
2107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
2108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
2109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
2110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
2111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
2113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC state */
2114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
2115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
2116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
2117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
2118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         else
2119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
2120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Change ADC state to error state */
2121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
2123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
2126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Conversion complete callback */
2130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
2131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
2133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Call DMA error callback */
2135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
2136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 39


2143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
2145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Half conversion callback */
2150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
2151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DMA error callback.
2155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)
2159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC state */
2164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
2165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
2168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Error callback */
2170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
2171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Delay micro seconds 
2175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  microSecond : delay
2176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DelayMicroSecond(uint32_t microSecond)
2179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
  26              		.loc 1 2179 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 0400     		movs	r4, r0
2180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Compute number of CPU cycles to wait for */
2181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
  40              		.loc 1 2181 0
  41 0006 084B     		ldr	r3, .L4
  42 0008 1868     		ldr	r0, [r3]
  43              	.LVL1:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 40


  44 000a 0849     		ldr	r1, .L4+4
  45 000c FFF7FEFF 		bl	__aeabi_uidiv
  46              	.LVL2:
  47 0010 4443     		muls	r4, r0
  48              	.LVL3:
  49 0012 0194     		str	r4, [sp, #4]
2182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(waitLoopIndex != 0U)
  50              		.loc 1 2183 0
  51 0014 02E0     		b	.L2
  52              	.L3:
2184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     waitLoopIndex--;
  53              		.loc 1 2185 0
  54 0016 019B     		ldr	r3, [sp, #4]
  55 0018 013B     		subs	r3, r3, #1
  56 001a 0193     		str	r3, [sp, #4]
  57              	.L2:
2183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
  58              		.loc 1 2183 0
  59 001c 019B     		ldr	r3, [sp, #4]
  60 001e 002B     		cmp	r3, #0
  61 0020 F9D1     		bne	.L3
2186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   } 
2187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
  62              		.loc 1 2187 0
  63 0022 02B0     		add	sp, sp, #8
  64              		@ sp needed
  65 0024 10BD     		pop	{r4, pc}
  66              	.L5:
  67 0026 C046     		.align	2
  68              	.L4:
  69 0028 00000000 		.word	SystemCoreClock
  70 002c 40420F00 		.word	1000000
  71              		.cfi_endproc
  72              	.LFE67:
  74              		.section	.text.ADC_ConversionStop,"ax",%progbits
  75              		.align	1
  76              		.syntax unified
  77              		.code	16
  78              		.thumb_func
  79              		.fpu softvfp
  81              	ADC_ConversionStop:
  82              	.LFB63:
2034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
  83              		.loc 1 2034 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              	.LVL4:
  88 0000 70B5     		push	{r4, r5, r6, lr}
  89              	.LCFI2:
  90              		.cfi_def_cfa_offset 16
  91              		.cfi_offset 4, -16
  92              		.cfi_offset 5, -12
  93              		.cfi_offset 6, -8
  94              		.cfi_offset 14, -4
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 41


  95 0002 0400     		movs	r4, r0
  96              	.LVL5:
2042:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
  97              		.loc 1 2042 0
  98 0004 0368     		ldr	r3, [r0]
  99 0006 9A68     		ldr	r2, [r3, #8]
 100 0008 5207     		lsls	r2, r2, #29
 101 000a 21D5     		bpl	.L11
2047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 102              		.loc 1 2047 0
 103 000c 9A68     		ldr	r2, [r3, #8]
 104 000e 5207     		lsls	r2, r2, #29
 105 0010 06D5     		bpl	.L8
2048:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 106              		.loc 1 2048 0 discriminator 1
 107 0012 9A68     		ldr	r2, [r3, #8]
2047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 108              		.loc 1 2047 0 discriminator 1
 109 0014 9207     		lsls	r2, r2, #30
 110 0016 03D4     		bmi	.L8
2051:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 111              		.loc 1 2051 0
 112 0018 9A68     		ldr	r2, [r3, #8]
 113 001a 1021     		movs	r1, #16
 114 001c 0A43     		orrs	r2, r1
 115 001e 9A60     		str	r2, [r3, #8]
 116              	.L8:
2056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 117              		.loc 1 2056 0
 118 0020 FFF7FEFF 		bl	HAL_GetTick
 119              	.LVL6:
 120 0024 0500     		movs	r5, r0
 121              	.LVL7:
 122              	.L9:
2058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 123              		.loc 1 2058 0
 124 0026 2368     		ldr	r3, [r4]
 125 0028 9B68     		ldr	r3, [r3, #8]
 126 002a 5B07     		lsls	r3, r3, #29
 127 002c 0ED5     		bpl	.L12
2060:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 128              		.loc 1 2060 0
 129 002e FFF7FEFF 		bl	HAL_GetTick
 130              	.LVL8:
 131 0032 401B     		subs	r0, r0, r5
 132 0034 0A28     		cmp	r0, #10
 133 0036 F6D9     		bls	.L9
2063:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 134              		.loc 1 2063 0
 135 0038 A36D     		ldr	r3, [r4, #88]
 136 003a 1022     		movs	r2, #16
 137 003c 1343     		orrs	r3, r2
 138 003e A365     		str	r3, [r4, #88]
2066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 139              		.loc 1 2066 0
 140 0040 E36D     		ldr	r3, [r4, #92]
 141 0042 0F3A     		subs	r2, r2, #15
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 42


 142 0044 1343     		orrs	r3, r2
 143 0046 E365     		str	r3, [r4, #92]
2068:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 144              		.loc 1 2068 0
 145 0048 0120     		movs	r0, #1
 146 004a 02E0     		b	.L7
 147              	.L12:
2075:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 148              		.loc 1 2075 0
 149 004c 0020     		movs	r0, #0
 150 004e 00E0     		b	.L7
 151              	.LVL9:
 152              	.L11:
 153 0050 0020     		movs	r0, #0
 154              	.LVL10:
 155              	.L7:
2076:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 156              		.loc 1 2076 0
 157              		@ sp needed
 158              	.LVL11:
 159 0052 70BD     		pop	{r4, r5, r6, pc}
 160              		.cfi_endproc
 161              	.LFE63:
 163              		.section	.text.ADC_Disable,"ax",%progbits
 164              		.align	1
 165              		.syntax unified
 166              		.code	16
 167              		.thumb_func
 168              		.fpu softvfp
 170              	ADC_Disable:
 171              	.LFB62:
1977:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 172              		.loc 1 1977 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              	.LVL12:
 177 0000 70B5     		push	{r4, r5, r6, lr}
 178              	.LCFI3:
 179              		.cfi_def_cfa_offset 16
 180              		.cfi_offset 4, -16
 181              		.cfi_offset 5, -12
 182              		.cfi_offset 6, -8
 183              		.cfi_offset 14, -4
 184 0002 0400     		movs	r4, r0
 185              	.LVL13:
1983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 186              		.loc 1 1983 0
 187 0004 0268     		ldr	r2, [r0]
 188 0006 9168     		ldr	r1, [r2, #8]
 189 0008 0323     		movs	r3, #3
 190 000a 0B40     		ands	r3, r1
 191 000c 012B     		cmp	r3, #1
 192 000e 01D0     		beq	.L20
2022:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 193              		.loc 1 2022 0
 194 0010 0020     		movs	r0, #0
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 43


 195              	.LVL14:
 196              	.L14:
2023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 197              		.loc 1 2023 0
 198              		@ sp needed
 199              	.LVL15:
 200 0012 70BD     		pop	{r4, r5, r6, pc}
 201              	.LVL16:
 202              	.L20:
1983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 203              		.loc 1 1983 0 discriminator 1
 204 0014 1368     		ldr	r3, [r2]
 205 0016 DB07     		lsls	r3, r3, #31
 206 0018 2DD5     		bpl	.L19
1986:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 207              		.loc 1 1986 0
 208 001a 9168     		ldr	r1, [r2, #8]
 209 001c 0523     		movs	r3, #5
 210 001e 0B40     		ands	r3, r1
 211 0020 012B     		cmp	r3, #1
 212 0022 09D0     		beq	.L21
1994:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 213              		.loc 1 1994 0
 214 0024 836D     		ldr	r3, [r0, #88]
 215 0026 1022     		movs	r2, #16
 216 0028 1343     		orrs	r3, r2
 217 002a 8365     		str	r3, [r0, #88]
1997:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 218              		.loc 1 1997 0
 219 002c C36D     		ldr	r3, [r0, #92]
 220 002e 0F3A     		subs	r2, r2, #15
 221 0030 1343     		orrs	r3, r2
 222 0032 C365     		str	r3, [r0, #92]
1999:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 223              		.loc 1 1999 0
 224 0034 0120     		movs	r0, #1
 225              	.LVL17:
 226 0036 ECE7     		b	.L14
 227              	.LVL18:
 228              	.L21:
1989:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 229              		.loc 1 1989 0
 230 0038 9368     		ldr	r3, [r2, #8]
 231 003a 0221     		movs	r1, #2
 232 003c 0B43     		orrs	r3, r1
 233 003e 9360     		str	r3, [r2, #8]
 234 0040 0368     		ldr	r3, [r0]
 235 0042 0322     		movs	r2, #3
 236 0044 1A60     		str	r2, [r3]
2004:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 237              		.loc 1 2004 0
 238 0046 FFF7FEFF 		bl	HAL_GetTick
 239              	.LVL19:
 240 004a 0500     		movs	r5, r0
 241              	.LVL20:
 242              	.L16:
2006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 44


 243              		.loc 1 2006 0
 244 004c 2368     		ldr	r3, [r4]
 245 004e 9B68     		ldr	r3, [r3, #8]
 246 0050 DB07     		lsls	r3, r3, #31
 247 0052 0ED5     		bpl	.L22
2008:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 248              		.loc 1 2008 0
 249 0054 FFF7FEFF 		bl	HAL_GetTick
 250              	.LVL21:
 251 0058 401B     		subs	r0, r0, r5
 252 005a 0A28     		cmp	r0, #10
 253 005c F6D9     		bls	.L16
2011:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 254              		.loc 1 2011 0
 255 005e A36D     		ldr	r3, [r4, #88]
 256 0060 1022     		movs	r2, #16
 257 0062 1343     		orrs	r3, r2
 258 0064 A365     		str	r3, [r4, #88]
2014:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 259              		.loc 1 2014 0
 260 0066 E36D     		ldr	r3, [r4, #92]
 261 0068 0F3A     		subs	r2, r2, #15
 262 006a 1343     		orrs	r3, r2
 263 006c E365     		str	r3, [r4, #92]
2016:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 264              		.loc 1 2016 0
 265 006e 0120     		movs	r0, #1
 266 0070 CFE7     		b	.L14
 267              	.L22:
2022:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 268              		.loc 1 2022 0
 269 0072 0020     		movs	r0, #0
 270 0074 CDE7     		b	.L14
 271              	.LVL22:
 272              	.L19:
 273 0076 0020     		movs	r0, #0
 274              	.LVL23:
 275 0078 CBE7     		b	.L14
 276              		.cfi_endproc
 277              	.LFE62:
 279              		.section	.text.ADC_Enable,"ax",%progbits
 280              		.align	1
 281              		.syntax unified
 282              		.code	16
 283              		.thumb_func
 284              		.fpu softvfp
 286              	ADC_Enable:
 287              	.LFB61:
1919:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 288              		.loc 1 1919 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              	.LVL24:
 293 0000 70B5     		push	{r4, r5, r6, lr}
 294              	.LCFI4:
 295              		.cfi_def_cfa_offset 16
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 45


 296              		.cfi_offset 4, -16
 297              		.cfi_offset 5, -12
 298              		.cfi_offset 6, -8
 299              		.cfi_offset 14, -4
 300 0002 0400     		movs	r4, r0
 301              	.LVL25:
1926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 302              		.loc 1 1926 0
 303 0004 0268     		ldr	r2, [r0]
 304 0006 9168     		ldr	r1, [r2, #8]
 305 0008 0323     		movs	r3, #3
 306 000a 0B40     		ands	r3, r1
 307 000c 012B     		cmp	r3, #1
 308 000e 0DD0     		beq	.L30
 309              	.L24:
1929:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 310              		.loc 1 1929 0
 311 0010 9168     		ldr	r1, [r2, #8]
 312 0012 184B     		ldr	r3, .L32
 313 0014 1942     		tst	r1, r3
 314 0016 0ED0     		beq	.L26
1932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 315              		.loc 1 1932 0
 316 0018 A36D     		ldr	r3, [r4, #88]
 317 001a 1022     		movs	r2, #16
 318 001c 1343     		orrs	r3, r2
 319 001e A365     		str	r3, [r4, #88]
1935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 320              		.loc 1 1935 0
 321 0020 E36D     		ldr	r3, [r4, #92]
 322 0022 0F3A     		subs	r2, r2, #15
 323 0024 1343     		orrs	r3, r2
 324 0026 E365     		str	r3, [r4, #92]
1937:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 325              		.loc 1 1937 0
 326 0028 0120     		movs	r0, #1
 327              	.LVL26:
 328              	.L25:
1967:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 329              		.loc 1 1967 0
 330              		@ sp needed
 331              	.LVL27:
 332 002a 70BD     		pop	{r4, r5, r6, pc}
 333              	.LVL28:
 334              	.L30:
1926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 335              		.loc 1 1926 0 discriminator 1
 336 002c 1368     		ldr	r3, [r2]
 337 002e DB07     		lsls	r3, r3, #31
 338 0030 EED5     		bpl	.L24
1966:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 339              		.loc 1 1966 0
 340 0032 0020     		movs	r0, #0
 341              	.LVL29:
 342 0034 F9E7     		b	.L25
 343              	.LVL30:
 344              	.L26:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 46


1941:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 345              		.loc 1 1941 0
 346 0036 9368     		ldr	r3, [r2, #8]
 347 0038 0121     		movs	r1, #1
 348 003a 0B43     		orrs	r3, r1
 349 003c 9360     		str	r3, [r2, #8]
1944:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 350              		.loc 1 1944 0
 351 003e 0120     		movs	r0, #1
 352              	.LVL31:
 353 0040 FFF7FEFF 		bl	ADC_DelayMicroSecond
 354              	.LVL32:
1947:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 355              		.loc 1 1947 0
 356 0044 FFF7FEFF 		bl	HAL_GetTick
 357              	.LVL33:
 358 0048 0500     		movs	r5, r0
 359              	.LVL34:
 360              	.L27:
1950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 361              		.loc 1 1950 0
 362 004a 2368     		ldr	r3, [r4]
 363 004c 1B68     		ldr	r3, [r3]
 364 004e DB07     		lsls	r3, r3, #31
 365 0050 0ED4     		bmi	.L31
1952:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 366              		.loc 1 1952 0
 367 0052 FFF7FEFF 		bl	HAL_GetTick
 368              	.LVL35:
 369 0056 401B     		subs	r0, r0, r5
 370 0058 0A28     		cmp	r0, #10
 371 005a F6D9     		bls	.L27
1955:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 372              		.loc 1 1955 0
 373 005c A36D     		ldr	r3, [r4, #88]
 374 005e 1022     		movs	r2, #16
 375 0060 1343     		orrs	r3, r2
 376 0062 A365     		str	r3, [r4, #88]
1958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 377              		.loc 1 1958 0
 378 0064 E36D     		ldr	r3, [r4, #92]
 379 0066 0F3A     		subs	r2, r2, #15
 380 0068 1343     		orrs	r3, r2
 381 006a E365     		str	r3, [r4, #92]
1960:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 382              		.loc 1 1960 0
 383 006c 0120     		movs	r0, #1
 384 006e DCE7     		b	.L25
 385              	.L31:
1966:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 386              		.loc 1 1966 0
 387 0070 0020     		movs	r0, #0
 388 0072 DAE7     		b	.L25
 389              	.L33:
 390              		.align	2
 391              	.L32:
 392 0074 17000080 		.word	-2147483625
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 47


 393              		.cfi_endproc
 394              	.LFE61:
 396              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 397              		.align	1
 398              		.weak	HAL_ADC_MspInit
 399              		.syntax unified
 400              		.code	16
 401              		.thumb_func
 402              		.fpu softvfp
 404              	HAL_ADC_MspInit:
 405              	.LFB41:
 709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 406              		.loc 1 709 0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 0
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 410              		@ link register save eliminated.
 411              	.LVL36:
 716:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 412              		.loc 1 716 0
 413              		@ sp needed
 414 0000 7047     		bx	lr
 415              		.cfi_endproc
 416              	.LFE41:
 418              		.section	.text.HAL_ADC_Init,"ax",%progbits
 419              		.align	1
 420              		.global	HAL_ADC_Init
 421              		.syntax unified
 422              		.code	16
 423              		.thumb_func
 424              		.fpu softvfp
 426              	HAL_ADC_Init:
 427              	.LFB39:
 358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  
 428              		.loc 1 358 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432              	.LVL37:
 433 0000 70B5     		push	{r4, r5, r6, lr}
 434              	.LCFI5:
 435              		.cfi_def_cfa_offset 16
 436              		.cfi_offset 4, -16
 437              		.cfi_offset 5, -12
 438              		.cfi_offset 6, -8
 439              		.cfi_offset 14, -4
 440 0002 041E     		subs	r4, r0, #0
 361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 441              		.loc 1 361 0
 442 0004 00D1     		bne	.LCB393
 443 0006 DCE0     		b	.L52	@long jump
 444              	.LCB393:
 393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 445              		.loc 1 393 0
 446 0008 836D     		ldr	r3, [r0, #88]
 447 000a 002B     		cmp	r3, #0
 448 000c 2ED0     		beq	.L53
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 48


 449              	.LVL38:
 450              	.L37:
 410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 451              		.loc 1 410 0
 452 000e A36D     		ldr	r3, [r4, #88]
 453 0010 DB06     		lsls	r3, r3, #27
 454 0012 31D4     		bmi	.L38
 411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 455              		.loc 1 411 0 discriminator 1
 456 0014 2168     		ldr	r1, [r4]
 457 0016 8B68     		ldr	r3, [r1, #8]
 458 0018 0422     		movs	r2, #4
 459 001a 1A40     		ands	r2, r3
 410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 460              		.loc 1 410 0 discriminator 1
 461 001c 2CD1     		bne	.L38
 422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_REG_BUSY,
 462              		.loc 1 422 0
 463 001e A36D     		ldr	r3, [r4, #88]
 464 0020 6948     		ldr	r0, .L58
 465 0022 0340     		ands	r3, r0
 466 0024 0630     		adds	r0, r0, #6
 467 0026 FF30     		adds	r0, r0, #255
 468 0028 0343     		orrs	r3, r0
 469 002a A365     		str	r3, [r4, #88]
 431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 470              		.loc 1 431 0
 471 002c 8868     		ldr	r0, [r1, #8]
 472 002e 0323     		movs	r3, #3
 473 0030 0340     		ands	r3, r0
 474 0032 012B     		cmp	r3, #1
 475 0034 29D0     		beq	.L54
 476              	.L40:
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 477              		.loc 1 443 0
 478 0036 6368     		ldr	r3, [r4, #4]
 479 0038 C020     		movs	r0, #192
 480 003a 0006     		lsls	r0, r0, #24
 481 003c 8342     		cmp	r3, r0
 482 003e 28D0     		beq	.L42
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 483              		.loc 1 443 0 is_stmt 0 discriminator 2
 484 0040 8020     		movs	r0, #128
 485 0042 C005     		lsls	r0, r0, #23
 486 0044 8342     		cmp	r3, r0
 487 0046 24D0     		beq	.L42
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 488              		.loc 1 443 0 discriminator 4
 489 0048 8020     		movs	r0, #128
 490 004a 0006     		lsls	r0, r0, #24
 491 004c 8342     		cmp	r3, r0
 492 004e 20D0     		beq	.L42
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 493              		.loc 1 443 0 discriminator 6
 494 0050 0B69     		ldr	r3, [r1, #16]
 495 0052 9B00     		lsls	r3, r3, #2
 496 0054 9B08     		lsrs	r3, r3, #2
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 49


 497 0056 0B61     		str	r3, [r1, #16]
 498 0058 5C4B     		ldr	r3, .L58+4
 499 005a 1968     		ldr	r1, [r3]
 500 005c 5C48     		ldr	r0, .L58+8
 501 005e 0140     		ands	r1, r0
 502 0060 1960     		str	r1, [r3]
 503 0062 1968     		ldr	r1, [r3]
 504 0064 6068     		ldr	r0, [r4, #4]
 505 0066 0143     		orrs	r1, r0
 506 0068 1960     		str	r1, [r3]
 507 006a 1BE0     		b	.L44
 508              	.LVL39:
 509              	.L53:
 396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 510              		.loc 1 396 0 is_stmt 1
 511 006c C365     		str	r3, [r0, #92]
 399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 512              		.loc 1 399 0
 513 006e 5422     		movs	r2, #84
 514 0070 8354     		strb	r3, [r0, r2]
 402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 515              		.loc 1 402 0
 516 0072 FFF7FEFF 		bl	HAL_ADC_MspInit
 517              	.LVL40:
 518 0076 CAE7     		b	.L37
 519              	.L38:
 414:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 520              		.loc 1 414 0
 521 0078 A36D     		ldr	r3, [r4, #88]
 522 007a 1022     		movs	r2, #16
 523 007c 1343     		orrs	r3, r2
 524 007e A365     		str	r3, [r4, #88]
 417:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 525              		.loc 1 417 0
 526 0080 5423     		movs	r3, #84
 527 0082 0022     		movs	r2, #0
 528 0084 E254     		strb	r2, [r4, r3]
 418:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 529              		.loc 1 418 0
 530 0086 0120     		movs	r0, #1
 531              	.L36:
 573:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 532              		.loc 1 573 0
 533              		@ sp needed
 534              	.LVL41:
 535 0088 70BD     		pop	{r4, r5, r6, pc}
 536              	.LVL42:
 537              	.L54:
 431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 538              		.loc 1 431 0 discriminator 1
 539 008a 0B68     		ldr	r3, [r1]
 540 008c DB07     		lsls	r3, r3, #31
 541 008e 13D4     		bmi	.L41
 542 0090 D1E7     		b	.L40
 543              	.L42:
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 544              		.loc 1 443 0 discriminator 5
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 50


 545 0092 0B69     		ldr	r3, [r1, #16]
 546 0094 9B00     		lsls	r3, r3, #2
 547 0096 9B08     		lsrs	r3, r3, #2
 548 0098 0B61     		str	r3, [r1, #16]
 549 009a 2168     		ldr	r1, [r4]
 550 009c 0B69     		ldr	r3, [r1, #16]
 551 009e 6068     		ldr	r0, [r4, #4]
 552 00a0 0343     		orrs	r3, r0
 553 00a2 0B61     		str	r3, [r1, #16]
 554              	.L44:
 447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 555              		.loc 1 447 0
 556 00a4 2168     		ldr	r1, [r4]
 557 00a6 CB68     		ldr	r3, [r1, #12]
 558 00a8 1820     		movs	r0, #24
 559 00aa 8343     		bics	r3, r0
 560 00ac CB60     		str	r3, [r1, #12]
 448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 561              		.loc 1 448 0
 562 00ae 2168     		ldr	r1, [r4]
 563 00b0 CB68     		ldr	r3, [r1, #12]
 564 00b2 A068     		ldr	r0, [r4, #8]
 565 00b4 0343     		orrs	r3, r0
 566 00b6 CB60     		str	r3, [r1, #12]
 567              	.L41:
 452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 568              		.loc 1 452 0
 569 00b8 444B     		ldr	r3, .L58+4
 570 00ba 1968     		ldr	r1, [r3]
 571 00bc 4548     		ldr	r0, .L58+12
 572 00be 0140     		ands	r1, r0
 573 00c0 1960     		str	r1, [r3]
 453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 574              		.loc 1 453 0
 575 00c2 1968     		ldr	r1, [r3]
 576 00c4 A06B     		ldr	r0, [r4, #56]
 577 00c6 4006     		lsls	r0, r0, #25
 578 00c8 0143     		orrs	r1, r0
 579 00ca 1960     		str	r1, [r3]
 456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 580              		.loc 1 456 0
 581 00cc 2368     		ldr	r3, [r4]
 582 00ce 9968     		ldr	r1, [r3, #8]
 583 00d0 C900     		lsls	r1, r1, #3
 584 00d2 04D4     		bmi	.L45
 459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 585              		.loc 1 459 0
 586 00d4 9868     		ldr	r0, [r3, #8]
 587 00d6 8021     		movs	r1, #128
 588 00d8 4905     		lsls	r1, r1, #21
 589 00da 0143     		orrs	r1, r0
 590 00dc 9960     		str	r1, [r3, #8]
 591              	.L45:
 473:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_SCANDIR |
 592              		.loc 1 473 0
 593 00de 2168     		ldr	r1, [r4]
 594 00e0 CB68     		ldr	r3, [r1, #12]
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 51


 595 00e2 3D48     		ldr	r0, .L58+16
 596 00e4 0340     		ands	r3, r0
 597 00e6 CB60     		str	r3, [r1, #12]
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 598              		.loc 1 484 0
 599 00e8 2068     		ldr	r0, [r4]
 600 00ea C168     		ldr	r1, [r0, #12]
 601 00ec E368     		ldr	r3, [r4, #12]
 485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 602              		.loc 1 485 0
 603 00ee 2569     		ldr	r5, [r4, #16]
 604 00f0 022D     		cmp	r5, #2
 605 00f2 2AD0     		beq	.L55
 606              	.L46:
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 607              		.loc 1 484 0
 608 00f4 1343     		orrs	r3, r2
 486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 609              		.loc 1 486 0
 610 00f6 226A     		ldr	r2, [r4, #32]
 611 00f8 5203     		lsls	r2, r2, #13
 485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 612              		.loc 1 485 0
 613 00fa 1343     		orrs	r3, r2
 487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             hadc->Init.Overrun                               |
 614              		.loc 1 487 0
 615 00fc 226B     		ldr	r2, [r4, #48]
 616 00fe 5200     		lsls	r2, r2, #1
 486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 617              		.loc 1 486 0
 618 0100 1343     		orrs	r3, r2
 487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             hadc->Init.Overrun                               |
 619              		.loc 1 487 0
 620 0102 626B     		ldr	r2, [r4, #52]
 621 0104 1343     		orrs	r3, r2
 489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 622              		.loc 1 489 0
 623 0106 A269     		ldr	r2, [r4, #24]
 624 0108 9203     		lsls	r2, r2, #14
 488:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 625              		.loc 1 488 0
 626 010a 1343     		orrs	r3, r2
 490:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 627              		.loc 1 490 0
 628 010c E269     		ldr	r2, [r4, #28]
 629 010e D203     		lsls	r2, r2, #15
 489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 630              		.loc 1 489 0
 631 0110 1343     		orrs	r3, r2
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 632              		.loc 1 484 0
 633 0112 0B43     		orrs	r3, r1
 634 0114 C360     		str	r3, [r0, #12]
 497:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 635              		.loc 1 497 0
 636 0116 A36A     		ldr	r3, [r4, #40]
 637 0118 C222     		movs	r2, #194
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 52


 638 011a FF32     		adds	r2, r2, #255
 639 011c 9342     		cmp	r3, r2
 640 011e 05D0     		beq	.L47
 499:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              hadc->Init.ExternalTrigConvEdge;
 641              		.loc 1 499 0
 642 0120 2168     		ldr	r1, [r4]
 643 0122 CA68     		ldr	r2, [r1, #12]
 644 0124 E06A     		ldr	r0, [r4, #44]
 645 0126 0343     		orrs	r3, r0
 646 0128 1343     		orrs	r3, r2
 647 012a CB60     		str	r3, [r1, #12]
 648              	.L47:
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 649              		.loc 1 504 0
 650 012c 636A     		ldr	r3, [r4, #36]
 651 012e 012B     		cmp	r3, #1
 652 0130 0DD0     		beq	.L56
 653              	.L48:
 525:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 654              		.loc 1 525 0
 655 0132 236C     		ldr	r3, [r4, #64]
 656 0134 012B     		cmp	r3, #1
 657 0136 1DD0     		beq	.L57
 549:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 658              		.loc 1 549 0
 659 0138 2368     		ldr	r3, [r4]
 660 013a 1A69     		ldr	r2, [r3, #16]
 661 013c D207     		lsls	r2, r2, #31
 662 013e 2CD5     		bpl	.L51
 552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 663              		.loc 1 552 0
 664 0140 1A69     		ldr	r2, [r3, #16]
 665 0142 0121     		movs	r1, #1
 666 0144 8A43     		bics	r2, r1
 667 0146 1A61     		str	r2, [r3, #16]
 668 0148 27E0     		b	.L51
 669              	.L55:
 485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 670              		.loc 1 485 0
 671 014a 0422     		movs	r2, #4
 672 014c D2E7     		b	.L46
 673              	.L56:
 506:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 674              		.loc 1 506 0
 675 014e 236A     		ldr	r3, [r4, #32]
 676 0150 002B     		cmp	r3, #0
 677 0152 06D1     		bne	.L49
 509:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 678              		.loc 1 509 0
 679 0154 2268     		ldr	r2, [r4]
 680 0156 D168     		ldr	r1, [r2, #12]
 681 0158 8023     		movs	r3, #128
 682 015a 5B02     		lsls	r3, r3, #9
 683 015c 0B43     		orrs	r3, r1
 684 015e D360     		str	r3, [r2, #12]
 685 0160 E7E7     		b	.L48
 686              	.L49:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 53


 518:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 687              		.loc 1 518 0
 688 0162 A36D     		ldr	r3, [r4, #88]
 689 0164 2022     		movs	r2, #32
 690 0166 1343     		orrs	r3, r2
 691 0168 A365     		str	r3, [r4, #88]
 521:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 692              		.loc 1 521 0
 693 016a E36D     		ldr	r3, [r4, #92]
 694 016c 1F3A     		subs	r2, r2, #31
 695 016e 1343     		orrs	r3, r2
 696 0170 E365     		str	r3, [r4, #92]
 697 0172 DEE7     		b	.L48
 698              	.L57:
 536:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_CFGR2_OVSS |
 699              		.loc 1 536 0
 700 0174 2268     		ldr	r2, [r4]
 701 0176 1369     		ldr	r3, [r2, #16]
 702 0178 1849     		ldr	r1, .L58+20
 703 017a 0B40     		ands	r3, r1
 704 017c 1361     		str	r3, [r2, #16]
 540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.RightBitShift             |
 705              		.loc 1 540 0
 706 017e 2168     		ldr	r1, [r4]
 707 0180 0A69     		ldr	r2, [r1, #16]
 708 0182 636C     		ldr	r3, [r4, #68]
 709 0184 A06C     		ldr	r0, [r4, #72]
 710 0186 0343     		orrs	r3, r0
 541:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.TriggeredMode );
 711              		.loc 1 541 0
 712 0188 E06C     		ldr	r0, [r4, #76]
 713 018a 0343     		orrs	r3, r0
 540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.RightBitShift             |
 714              		.loc 1 540 0
 715 018c 1343     		orrs	r3, r2
 716 018e 0B61     		str	r3, [r1, #16]
 545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 717              		.loc 1 545 0
 718 0190 2268     		ldr	r2, [r4]
 719 0192 1369     		ldr	r3, [r2, #16]
 720 0194 0121     		movs	r1, #1
 721 0196 0B43     		orrs	r3, r1
 722 0198 1361     		str	r3, [r2, #16]
 723              	.L51:
 557:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 724              		.loc 1 557 0
 725 019a 2268     		ldr	r2, [r4]
 726 019c 5369     		ldr	r3, [r2, #20]
 727 019e 0721     		movs	r1, #7
 728 01a0 8B43     		bics	r3, r1
 729 01a2 5361     		str	r3, [r2, #20]
 560:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 730              		.loc 1 560 0
 731 01a4 2268     		ldr	r2, [r4]
 732 01a6 5369     		ldr	r3, [r2, #20]
 733 01a8 E16B     		ldr	r1, [r4, #60]
 734 01aa 0B43     		orrs	r3, r1
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 54


 735 01ac 5361     		str	r3, [r2, #20]
 563:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 736              		.loc 1 563 0
 737 01ae 0023     		movs	r3, #0
 738 01b0 E365     		str	r3, [r4, #92]
 566:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_BUSY_INTERNAL,
 739              		.loc 1 566 0
 740 01b2 A36D     		ldr	r3, [r4, #88]
 741 01b4 0322     		movs	r2, #3
 742 01b6 9343     		bics	r3, r2
 743 01b8 023A     		subs	r2, r2, #2
 744 01ba 1343     		orrs	r3, r2
 745 01bc A365     		str	r3, [r4, #88]
 572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 746              		.loc 1 572 0
 747 01be 0020     		movs	r0, #0
 748 01c0 62E7     		b	.L36
 749              	.LVL43:
 750              	.L52:
 363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 751              		.loc 1 363 0
 752 01c2 0120     		movs	r0, #1
 753              	.LVL44:
 754 01c4 60E7     		b	.L36
 755              	.L59:
 756 01c6 C046     		.align	2
 757              	.L58:
 758 01c8 FDFEFFFF 		.word	-259
 759 01cc 08270140 		.word	1073817352
 760 01d0 FFFFC3FF 		.word	-3932161
 761 01d4 FFFFFFFD 		.word	-33554433
 762 01d8 1902FEFF 		.word	-130535
 763 01dc 03FCFFFF 		.word	-1021
 764              		.cfi_endproc
 765              	.LFE39:
 767              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 768              		.align	1
 769              		.weak	HAL_ADC_MspDeInit
 770              		.syntax unified
 771              		.code	16
 772              		.thumb_func
 773              		.fpu softvfp
 775              	HAL_ADC_MspDeInit:
 776              	.LFB42:
 724:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 777              		.loc 1 724 0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 0
 780              		@ frame_needed = 0, uses_anonymous_args = 0
 781              		@ link register save eliminated.
 782              	.LVL45:
 731:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 783              		.loc 1 731 0
 784              		@ sp needed
 785 0000 7047     		bx	lr
 786              		.cfi_endproc
 787              	.LFE42:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 55


 789              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 790              		.align	1
 791              		.global	HAL_ADC_DeInit
 792              		.syntax unified
 793              		.code	16
 794              		.thumb_func
 795              		.fpu softvfp
 797              	HAL_ADC_DeInit:
 798              	.LFB40:
 588:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 799              		.loc 1 588 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              	.LVL46:
 804 0000 70B5     		push	{r4, r5, r6, lr}
 805              	.LCFI6:
 806              		.cfi_def_cfa_offset 16
 807              		.cfi_offset 4, -16
 808              		.cfi_offset 5, -12
 809              		.cfi_offset 6, -8
 810              		.cfi_offset 14, -4
 811 0002 041E     		subs	r4, r0, #0
 812              	.LVL47:
 592:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 813              		.loc 1 592 0
 814 0004 49D0     		beq	.L65
 601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 815              		.loc 1 601 0
 816 0006 836D     		ldr	r3, [r0, #88]
 817 0008 0222     		movs	r2, #2
 818 000a 1343     		orrs	r3, r2
 819 000c 8365     		str	r3, [r0, #88]
 604:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 820              		.loc 1 604 0
 821 000e FFF7FEFF 		bl	ADC_ConversionStop
 822              	.LVL48:
 823 0012 051E     		subs	r5, r0, #0
 824              	.LVL49:
 607:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {   
 825              		.loc 1 607 0
 826 0014 06D0     		beq	.L66
 827              	.LVL50:
 828              	.L63:
 623:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 829              		.loc 1 623 0
 830 0016 012D     		cmp	r5, #1
 831 0018 0DD1     		bne	.L67
 832              	.L64:
 697:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 833              		.loc 1 697 0
 834 001a 5423     		movs	r3, #84
 835 001c 0022     		movs	r2, #0
 836 001e E254     		strb	r2, [r4, r3]
 837              	.LVL51:
 838              	.L62:
 701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 56


 839              		.loc 1 701 0
 840 0020 2800     		movs	r0, r5
 841              		@ sp needed
 842              	.LVL52:
 843 0022 70BD     		pop	{r4, r5, r6, pc}
 844              	.LVL53:
 845              	.L66:
 610:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 846              		.loc 1 610 0
 847 0024 2000     		movs	r0, r4
 848              	.LVL54:
 849 0026 FFF7FEFF 		bl	ADC_Disable
 850              	.LVL55:
 851 002a 0500     		movs	r5, r0
 852              	.LVL56:
 613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 853              		.loc 1 613 0
 854 002c 0128     		cmp	r0, #1
 855 002e F2D0     		beq	.L63
 616:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 856              		.loc 1 616 0
 857 0030 0123     		movs	r3, #1
 858 0032 A365     		str	r3, [r4, #88]
 859 0034 EFE7     		b	.L63
 860              	.LVL57:
 861              	.L67:
 628:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
 862              		.loc 1 628 0
 863 0036 2268     		ldr	r2, [r4]
 864 0038 5368     		ldr	r3, [r2, #4]
 865 003a 1949     		ldr	r1, .L68
 866 003c 0B40     		ands	r3, r1
 867 003e 5360     		str	r3, [r2, #4]
 633:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_FLAG_EOC | ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 868              		.loc 1 633 0
 869 0040 2368     		ldr	r3, [r4]
 870 0042 184A     		ldr	r2, .L68+4
 871 0044 1A60     		str	r2, [r3]
 641:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 872              		.loc 1 641 0
 873 0046 2268     		ldr	r2, [r4]
 874 0048 9368     		ldr	r3, [r2, #8]
 875 004a 1749     		ldr	r1, .L68+8
 876 004c 0B40     		ands	r3, r1
 877 004e 9360     		str	r3, [r2, #8]
 647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_DISCEN | ADC_CFGR1_AUTOFF | ADC_CFGR1_AUTDLY | \
 878              		.loc 1 647 0
 879 0050 2268     		ldr	r2, [r4]
 880 0052 D368     		ldr	r3, [r2, #12]
 881 0054 1549     		ldr	r1, .L68+12
 882 0056 0B40     		ands	r3, r1
 883 0058 D360     		str	r3, [r2, #12]
 654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
 884              		.loc 1 654 0
 885 005a 2268     		ldr	r2, [r4]
 886 005c 1369     		ldr	r3, [r2, #16]
 887 005e 1449     		ldr	r1, .L68+16
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 57


 888 0060 0B40     		ands	r3, r1
 889 0062 1361     		str	r3, [r2, #16]
 659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 890              		.loc 1 659 0
 891 0064 2268     		ldr	r2, [r4]
 892 0066 5369     		ldr	r3, [r2, #20]
 893 0068 0721     		movs	r1, #7
 894 006a 8B43     		bics	r3, r1
 895 006c 5361     		str	r3, [r2, #20]
 662:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 896              		.loc 1 662 0
 897 006e 2268     		ldr	r2, [r4]
 898 0070 136A     		ldr	r3, [r2, #32]
 899 0072 1049     		ldr	r1, .L68+20
 900 0074 0B40     		ands	r3, r1
 901 0076 1362     		str	r3, [r2, #32]
 665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 902              		.loc 1 665 0
 903 0078 2168     		ldr	r1, [r4]
 904 007a B423     		movs	r3, #180
 905 007c CA58     		ldr	r2, [r1, r3]
 906 007e 7F20     		movs	r0, #127
 907 0080 8243     		bics	r2, r0
 908 0082 CA50     		str	r2, [r1, r3]
 675:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 909              		.loc 1 675 0
 910 0084 2168     		ldr	r1, [r4]
 911 0086 CA58     		ldr	r2, [r1, r3]
 912 0088 8243     		bics	r2, r0
 913 008a CA50     		str	r2, [r1, r3]
 687:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 914              		.loc 1 687 0
 915 008c 2000     		movs	r0, r4
 916 008e FFF7FEFF 		bl	HAL_ADC_MspDeInit
 917              	.LVL58:
 690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 918              		.loc 1 690 0
 919 0092 0023     		movs	r3, #0
 920 0094 E365     		str	r3, [r4, #92]
 693:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 921              		.loc 1 693 0
 922 0096 A365     		str	r3, [r4, #88]
 923 0098 BFE7     		b	.L64
 924              	.LVL59:
 925              	.L65:
 594:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 926              		.loc 1 594 0
 927 009a 0125     		movs	r5, #1
 928 009c C0E7     		b	.L62
 929              	.L69:
 930 009e C046     		.align	2
 931              	.L68:
 932 00a0 60F7FFFF 		.word	-2208
 933 00a4 9F080000 		.word	2207
 934 00a8 FFFFFFEF 		.word	-268435457
 935 00ac 00023E83 		.word	-2093088256
 936 00b0 02FCFF3F 		.word	1073740802
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 58


 937 00b4 00F000F0 		.word	-268374016
 938              		.cfi_endproc
 939              	.LFE40:
 941              		.section	.text.HAL_ADC_Start,"ax",%progbits
 942              		.align	1
 943              		.global	HAL_ADC_Start
 944              		.syntax unified
 945              		.code	16
 946              		.thumb_func
 947              		.fpu softvfp
 949              	HAL_ADC_Start:
 950              	.LFB43:
 766:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 951              		.loc 1 766 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 0
 954              		@ frame_needed = 0, uses_anonymous_args = 0
 955              	.LVL60:
 956 0000 10B5     		push	{r4, lr}
 957              	.LCFI7:
 958              		.cfi_def_cfa_offset 8
 959              		.cfi_offset 4, -8
 960              		.cfi_offset 14, -4
 961 0002 0400     		movs	r4, r0
 962              	.LVL61:
 773:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 963              		.loc 1 773 0
 964 0004 0368     		ldr	r3, [r0]
 965 0006 9B68     		ldr	r3, [r3, #8]
 966 0008 5B07     		lsls	r3, r3, #29
 967 000a 23D4     		bmi	.L73
 776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 968              		.loc 1 776 0
 969 000c 5423     		movs	r3, #84
 970 000e C35C     		ldrb	r3, [r0, r3]
 971 0010 012B     		cmp	r3, #1
 972 0012 21D0     		beq	.L74
 776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 973              		.loc 1 776 0 is_stmt 0 discriminator 2
 974 0014 5423     		movs	r3, #84
 975 0016 0122     		movs	r2, #1
 976 0018 C254     		strb	r2, [r0, r3]
 781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 977              		.loc 1 781 0 is_stmt 1 discriminator 2
 978 001a C369     		ldr	r3, [r0, #28]
 979 001c 012B     		cmp	r3, #1
 980 001e 14D1     		bne	.L76
 767:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 981              		.loc 1 767 0
 982 0020 0020     		movs	r0, #0
 983              	.LVL62:
 984              	.L72:
 792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 985              		.loc 1 792 0
 986 0022 A36D     		ldr	r3, [r4, #88]
 987 0024 0D4A     		ldr	r2, .L77
 988 0026 1A40     		ands	r2, r3
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 59


 989 0028 8023     		movs	r3, #128
 990 002a 5B00     		lsls	r3, r3, #1
 991 002c 1343     		orrs	r3, r2
 992 002e A365     		str	r3, [r4, #88]
 797:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 993              		.loc 1 797 0
 994 0030 0023     		movs	r3, #0
 995 0032 E365     		str	r3, [r4, #92]
 802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 996              		.loc 1 802 0
 997 0034 5422     		movs	r2, #84
 998 0036 A354     		strb	r3, [r4, r2]
 807:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 999              		.loc 1 807 0
 1000 0038 2368     		ldr	r3, [r4]
 1001 003a 383A     		subs	r2, r2, #56
 1002 003c 1A60     		str	r2, [r3]
 813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1003              		.loc 1 813 0
 1004 003e 2268     		ldr	r2, [r4]
 1005 0040 9368     		ldr	r3, [r2, #8]
 1006 0042 0421     		movs	r1, #4
 1007 0044 0B43     		orrs	r3, r1
 1008 0046 9360     		str	r3, [r2, #8]
 1009              	.L71:
 823:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1010              		.loc 1 823 0
 1011              		@ sp needed
 1012              	.LVL63:
 1013 0048 10BD     		pop	{r4, pc}
 1014              	.LVL64:
 1015              	.L76:
 783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1016              		.loc 1 783 0
 1017 004a FFF7FEFF 		bl	ADC_Enable
 1018              	.LVL65:
 787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1019              		.loc 1 787 0
 1020 004e 0028     		cmp	r0, #0
 1021 0050 E7D0     		beq	.L72
 1022 0052 F9E7     		b	.L71
 1023              	.LVL66:
 1024              	.L73:
 818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1025              		.loc 1 818 0
 1026 0054 0220     		movs	r0, #2
 1027              	.LVL67:
 1028 0056 F7E7     		b	.L71
 1029              	.LVL68:
 1030              	.L74:
 776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1031              		.loc 1 776 0
 1032 0058 0220     		movs	r0, #2
 1033              	.LVL69:
 1034 005a F5E7     		b	.L71
 1035              	.L78:
 1036              		.align	2
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 60


 1037              	.L77:
 1038 005c FEF0FFFF 		.word	-3842
 1039              		.cfi_endproc
 1040              	.LFE43:
 1042              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 1043              		.align	1
 1044              		.global	HAL_ADC_Stop
 1045              		.syntax unified
 1046              		.code	16
 1047              		.thumb_func
 1048              		.fpu softvfp
 1050              	HAL_ADC_Stop:
 1051              	.LFB44:
 832:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1052              		.loc 1 832 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 0
 1055              		@ frame_needed = 0, uses_anonymous_args = 0
 1056              	.LVL70:
 1057 0000 10B5     		push	{r4, lr}
 1058              	.LCFI8:
 1059              		.cfi_def_cfa_offset 8
 1060              		.cfi_offset 4, -8
 1061              		.cfi_offset 14, -4
 1062 0002 0400     		movs	r4, r0
 1063              	.LVL71:
 839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1064              		.loc 1 839 0
 1065 0004 5423     		movs	r3, #84
 1066 0006 C35C     		ldrb	r3, [r0, r3]
 1067 0008 012B     		cmp	r3, #1
 1068 000a 17D0     		beq	.L82
 839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1069              		.loc 1 839 0 is_stmt 0 discriminator 2
 1070 000c 5423     		movs	r3, #84
 1071 000e 0122     		movs	r2, #1
 1072 0010 C254     		strb	r2, [r0, r3]
 842:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1073              		.loc 1 842 0 is_stmt 1 discriminator 2
 1074 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1075              	.LVL72:
 845:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1076              		.loc 1 845 0 discriminator 2
 1077 0016 0028     		cmp	r0, #0
 1078 0018 03D0     		beq	.L83
 1079              	.LVL73:
 1080              	.L81:
 861:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1081              		.loc 1 861 0
 1082 001a 5423     		movs	r3, #84
 1083 001c 0022     		movs	r2, #0
 1084 001e E254     		strb	r2, [r4, r3]
 1085              	.LVL74:
 1086              	.L80:
 865:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1087              		.loc 1 865 0
 1088              		@ sp needed
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 61


 1089              	.LVL75:
 1090 0020 10BD     		pop	{r4, pc}
 1091              	.LVL76:
 1092              	.L83:
 848:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1093              		.loc 1 848 0
 1094 0022 2000     		movs	r0, r4
 1095              	.LVL77:
 1096 0024 FFF7FEFF 		bl	ADC_Disable
 1097              	.LVL78:
 851:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1098              		.loc 1 851 0
 1099 0028 0028     		cmp	r0, #0
 1100 002a F6D1     		bne	.L81
 854:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1101              		.loc 1 854 0
 1102 002c A36D     		ldr	r3, [r4, #88]
 1103 002e 044A     		ldr	r2, .L84
 1104 0030 1340     		ands	r3, r2
 1105 0032 0432     		adds	r2, r2, #4
 1106 0034 FF32     		adds	r2, r2, #255
 1107 0036 1343     		orrs	r3, r2
 1108 0038 A365     		str	r3, [r4, #88]
 1109 003a EEE7     		b	.L81
 1110              	.LVL79:
 1111              	.L82:
 839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1112              		.loc 1 839 0
 1113 003c 0220     		movs	r0, #2
 1114              	.LVL80:
 1115 003e EFE7     		b	.L80
 1116              	.L85:
 1117              		.align	2
 1118              	.L84:
 1119 0040 FEFEFFFF 		.word	-258
 1120              		.cfi_endproc
 1121              	.LFE44:
 1123              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 1124              		.align	1
 1125              		.global	HAL_ADC_PollForConversion
 1126              		.syntax unified
 1127              		.code	16
 1128              		.thumb_func
 1129              		.fpu softvfp
 1131              	HAL_ADC_PollForConversion:
 1132              	.LFB45:
 886:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0;
 1133              		.loc 1 886 0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 0
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
 1137              	.LVL81:
 1138 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1139              	.LCFI9:
 1140              		.cfi_def_cfa_offset 24
 1141              		.cfi_offset 3, -24
 1142              		.cfi_offset 4, -20
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 62


 1143              		.cfi_offset 5, -16
 1144              		.cfi_offset 6, -12
 1145              		.cfi_offset 7, -8
 1146              		.cfi_offset 14, -4
 1147 0002 0400     		movs	r4, r0
 1148 0004 0E00     		movs	r6, r1
 1149              	.LVL82:
 894:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1150              		.loc 1 894 0
 1151 0006 4569     		ldr	r5, [r0, #20]
 1152 0008 082D     		cmp	r5, #8
 1153 000a 04D0     		beq	.L87
 907:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1154              		.loc 1 907 0
 1155 000c 0368     		ldr	r3, [r0]
 1156 000e DB68     		ldr	r3, [r3, #12]
 1157 0010 DB07     		lsls	r3, r3, #31
 1158 0012 19D4     		bmi	.L97
 919:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1159              		.loc 1 919 0
 1160 0014 0C25     		movs	r5, #12
 1161              	.L87:
 1162              	.LVL83:
 924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1163              		.loc 1 924 0
 1164 0016 FFF7FEFF 		bl	HAL_GetTick
 1165              	.LVL84:
 1166 001a 0700     		movs	r7, r0
 1167              	.LVL85:
 1168              	.L90:
 927:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1169              		.loc 1 927 0
 1170 001c 2368     		ldr	r3, [r4]
 1171 001e 1A68     		ldr	r2, [r3]
 1172 0020 1542     		tst	r5, r2
 1173 0022 1AD1     		bne	.L98
 930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1174              		.loc 1 930 0
 1175 0024 731C     		adds	r3, r6, #1
 1176 0026 F9D0     		beq	.L90
 932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1177              		.loc 1 932 0
 1178 0028 002E     		cmp	r6, #0
 1179 002a 04D0     		beq	.L91
 932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1180              		.loc 1 932 0 is_stmt 0 discriminator 1
 1181 002c FFF7FEFF 		bl	HAL_GetTick
 1182              	.LVL86:
 1183 0030 C01B     		subs	r0, r0, r7
 1184 0032 B042     		cmp	r0, r6
 1185 0034 F2D9     		bls	.L90
 1186              	.L91:
 935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1187              		.loc 1 935 0 is_stmt 1
 1188 0036 A36D     		ldr	r3, [r4, #88]
 1189 0038 0422     		movs	r2, #4
 1190 003a 1343     		orrs	r3, r2
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 63


 1191 003c A365     		str	r3, [r4, #88]
 938:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1192              		.loc 1 938 0
 1193 003e 5423     		movs	r3, #84
 1194 0040 0022     		movs	r2, #0
 1195 0042 E254     		strb	r2, [r4, r3]
 940:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 1196              		.loc 1 940 0
 1197 0044 0320     		movs	r0, #3
 1198 0046 07E0     		b	.L88
 1199              	.LVL87:
 1200              	.L97:
 910:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1201              		.loc 1 910 0
 1202 0048 836D     		ldr	r3, [r0, #88]
 1203 004a 2022     		movs	r2, #32
 1204 004c 1343     		orrs	r3, r2
 1205 004e 8365     		str	r3, [r0, #88]
 913:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1206              		.loc 1 913 0
 1207 0050 5423     		movs	r3, #84
 1208 0052 0022     		movs	r2, #0
 1209 0054 C254     		strb	r2, [r0, r3]
 915:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1210              		.loc 1 915 0
 1211 0056 0120     		movs	r0, #1
 1212              	.LVL88:
 1213              	.L88:
 993:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1214              		.loc 1 993 0
 1215              		@ sp needed
 1216              	.LVL89:
 1217              	.LVL90:
 1218 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1219              	.LVL91:
 1220              	.L98:
 946:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1221              		.loc 1 946 0
 1222 005a A16D     		ldr	r1, [r4, #88]
 1223 005c 8022     		movs	r2, #128
 1224 005e 9200     		lsls	r2, r2, #2
 1225 0060 0A43     		orrs	r2, r1
 1226 0062 A265     		str	r2, [r4, #88]
 950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1227              		.loc 1 950 0
 1228 0064 D968     		ldr	r1, [r3, #12]
 1229 0066 C022     		movs	r2, #192
 1230 0068 1201     		lsls	r2, r2, #4
 1231 006a 1142     		tst	r1, r2
 1232 006c 13D1     		bne	.L93
 950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1233              		.loc 1 950 0 is_stmt 0 discriminator 1
 1234 006e 226A     		ldr	r2, [r4, #32]
 1235 0070 002A     		cmp	r2, #0
 1236 0072 10D1     		bne	.L93
 954:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1237              		.loc 1 954 0 is_stmt 1
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 64


 1238 0074 1A68     		ldr	r2, [r3]
 1239 0076 1207     		lsls	r2, r2, #28
 1240 0078 0DD5     		bpl	.L93
 958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1241              		.loc 1 958 0
 1242 007a 9A68     		ldr	r2, [r3, #8]
 1243 007c 5207     		lsls	r2, r2, #29
 1244 007e 12D4     		bmi	.L94
 964:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1245              		.loc 1 964 0
 1246 0080 5A68     		ldr	r2, [r3, #4]
 1247 0082 0C21     		movs	r1, #12
 1248 0084 8A43     		bics	r2, r1
 1249 0086 5A60     		str	r2, [r3, #4]
 967:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 1250              		.loc 1 967 0
 1251 0088 A36D     		ldr	r3, [r4, #88]
 1252 008a 0C4A     		ldr	r2, .L99
 1253 008c 1340     		ands	r3, r2
 1254 008e 0432     		adds	r2, r2, #4
 1255 0090 FF32     		adds	r2, r2, #255
 1256 0092 1343     		orrs	r3, r2
 1257 0094 A365     		str	r3, [r4, #88]
 1258              	.L93:
 985:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1259              		.loc 1 985 0
 1260 0096 A369     		ldr	r3, [r4, #24]
 1261 0098 002B     		cmp	r3, #0
 1262 009a 0DD1     		bne	.L96
 988:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1263              		.loc 1 988 0
 1264 009c 2368     		ldr	r3, [r4]
 1265 009e 0C22     		movs	r2, #12
 1266 00a0 1A60     		str	r2, [r3]
 992:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1267              		.loc 1 992 0
 1268 00a2 0020     		movs	r0, #0
 1269 00a4 D8E7     		b	.L88
 1270              	.L94:
 974:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1271              		.loc 1 974 0
 1272 00a6 A36D     		ldr	r3, [r4, #88]
 1273 00a8 2022     		movs	r2, #32
 1274 00aa 1343     		orrs	r3, r2
 1275 00ac A365     		str	r3, [r4, #88]
 977:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 1276              		.loc 1 977 0
 1277 00ae E36D     		ldr	r3, [r4, #92]
 1278 00b0 1F3A     		subs	r2, r2, #31
 1279 00b2 1343     		orrs	r3, r2
 1280 00b4 E365     		str	r3, [r4, #92]
 1281 00b6 EEE7     		b	.L93
 1282              	.L96:
 992:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1283              		.loc 1 992 0
 1284 00b8 0020     		movs	r0, #0
 1285 00ba CDE7     		b	.L88
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 65


 1286              	.L100:
 1287              		.align	2
 1288              	.L99:
 1289 00bc FEFEFFFF 		.word	-258
 1290              		.cfi_endproc
 1291              	.LFE45:
 1293              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1294              		.align	1
 1295              		.global	HAL_ADC_PollForEvent
 1296              		.syntax unified
 1297              		.code	16
 1298              		.thumb_func
 1299              		.fpu softvfp
 1301              	HAL_ADC_PollForEvent:
 1302              	.LFB46:
1012:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U; 
 1303              		.loc 1 1012 0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 0
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 1307              	.LVL92:
 1308 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1309              	.LCFI10:
 1310              		.cfi_def_cfa_offset 24
 1311              		.cfi_offset 3, -24
 1312              		.cfi_offset 4, -20
 1313              		.cfi_offset 5, -16
 1314              		.cfi_offset 6, -12
 1315              		.cfi_offset 7, -8
 1316              		.cfi_offset 14, -4
 1317 0002 0500     		movs	r5, r0
 1318 0004 0C00     		movs	r4, r1
 1319 0006 1600     		movs	r6, r2
 1320              	.LVL93:
1020:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1321              		.loc 1 1020 0
 1322 0008 FFF7FEFF 		bl	HAL_GetTick
 1323              	.LVL94:
 1324 000c 0700     		movs	r7, r0
 1325              	.LVL95:
 1326              	.L103:
1023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1327              		.loc 1 1023 0
 1328 000e 2A68     		ldr	r2, [r5]
 1329 0010 1368     		ldr	r3, [r2]
 1330 0012 2340     		ands	r3, r4
 1331 0014 A342     		cmp	r3, r4
 1332 0016 11D0     		beq	.L111
1026:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1333              		.loc 1 1026 0
 1334 0018 731C     		adds	r3, r6, #1
 1335 001a F8D0     		beq	.L103
1028:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1336              		.loc 1 1028 0
 1337 001c 002E     		cmp	r6, #0
 1338 001e 04D0     		beq	.L104
1028:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 66


 1339              		.loc 1 1028 0 is_stmt 0 discriminator 1
 1340 0020 FFF7FEFF 		bl	HAL_GetTick
 1341              	.LVL96:
 1342 0024 C01B     		subs	r0, r0, r7
 1343 0026 B042     		cmp	r0, r6
 1344 0028 F1D9     		bls	.L103
 1345              	.L104:
1031:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1346              		.loc 1 1031 0 is_stmt 1
 1347 002a AB6D     		ldr	r3, [r5, #88]
 1348 002c 0422     		movs	r2, #4
 1349 002e 1343     		orrs	r3, r2
 1350 0030 AB65     		str	r3, [r5, #88]
1034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1351              		.loc 1 1034 0
 1352 0032 5423     		movs	r3, #84
 1353 0034 0022     		movs	r2, #0
 1354 0036 EA54     		strb	r2, [r5, r3]
1036:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 1355              		.loc 1 1036 0
 1356 0038 0320     		movs	r0, #3
 1357 003a 10E0     		b	.L105
 1358              	.L111:
1041:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1359              		.loc 1 1041 0
 1360 003c 802C     		cmp	r4, #128
 1361 003e 0FD0     		beq	.L112
1058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1362              		.loc 1 1058 0
 1363 0040 6B6B     		ldr	r3, [r5, #52]
 1364 0042 002B     		cmp	r3, #0
 1365 0044 08D1     		bne	.L109
1061:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1366              		.loc 1 1061 0
 1367 0046 A96D     		ldr	r1, [r5, #88]
 1368 0048 8023     		movs	r3, #128
 1369 004a DB00     		lsls	r3, r3, #3
 1370 004c 0B43     		orrs	r3, r1
 1371 004e AB65     		str	r3, [r5, #88]
1064:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1372              		.loc 1 1064 0
 1373 0050 EB6D     		ldr	r3, [r5, #92]
 1374 0052 0221     		movs	r1, #2
 1375 0054 0B43     		orrs	r3, r1
 1376 0056 EB65     		str	r3, [r5, #92]
 1377              	.L109:
1068:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
 1378              		.loc 1 1068 0
 1379 0058 1023     		movs	r3, #16
 1380 005a 1360     		str	r3, [r2]
1073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1381              		.loc 1 1073 0
 1382 005c 0020     		movs	r0, #0
 1383              	.L105:
1074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1384              		.loc 1 1074 0
 1385              		@ sp needed
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 67


 1386              	.LVL97:
 1387              	.LVL98:
 1388              	.LVL99:
 1389              	.LVL100:
 1390 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1391              	.LVL101:
 1392              	.L112:
1046:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1393              		.loc 1 1046 0
 1394 0060 A96D     		ldr	r1, [r5, #88]
 1395 0062 8023     		movs	r3, #128
 1396 0064 5B02     		lsls	r3, r3, #9
 1397 0066 0B43     		orrs	r3, r1
 1398 0068 AB65     		str	r3, [r5, #88]
1049:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
 1399              		.loc 1 1049 0
 1400 006a 8023     		movs	r3, #128
 1401 006c 1360     		str	r3, [r2]
1073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1402              		.loc 1 1073 0
 1403 006e 0020     		movs	r0, #0
1050:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1404              		.loc 1 1050 0
 1405 0070 F5E7     		b	.L105
 1406              		.cfi_endproc
 1407              	.LFE46:
 1409              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1410              		.align	1
 1411              		.global	HAL_ADC_Start_IT
 1412              		.syntax unified
 1413              		.code	16
 1414              		.thumb_func
 1415              		.fpu softvfp
 1417              	HAL_ADC_Start_IT:
 1418              	.LFB47:
1095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1419              		.loc 1 1095 0
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 0
 1422              		@ frame_needed = 0, uses_anonymous_args = 0
 1423              	.LVL102:
 1424 0000 10B5     		push	{r4, lr}
 1425              	.LCFI11:
 1426              		.cfi_def_cfa_offset 8
 1427              		.cfi_offset 4, -8
 1428              		.cfi_offset 14, -4
 1429 0002 0400     		movs	r4, r0
 1430              	.LVL103:
1102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1431              		.loc 1 1102 0
 1432 0004 0368     		ldr	r3, [r0]
 1433 0006 9B68     		ldr	r3, [r3, #8]
 1434 0008 5B07     		lsls	r3, r3, #29
 1435 000a 36D4     		bmi	.L119
1105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1436              		.loc 1 1105 0
 1437 000c 5423     		movs	r3, #84
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 68


 1438 000e C35C     		ldrb	r3, [r0, r3]
 1439 0010 012B     		cmp	r3, #1
 1440 0012 34D0     		beq	.L120
1105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1441              		.loc 1 1105 0 is_stmt 0 discriminator 2
 1442 0014 5423     		movs	r3, #84
 1443 0016 0122     		movs	r2, #1
 1444 0018 C254     		strb	r2, [r0, r3]
1110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1445              		.loc 1 1110 0 is_stmt 1 discriminator 2
 1446 001a C369     		ldr	r3, [r0, #28]
 1447 001c 012B     		cmp	r3, #1
 1448 001e 21D1     		bne	.L123
1096:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1449              		.loc 1 1096 0
 1450 0020 0020     		movs	r0, #0
 1451              	.LVL104:
 1452              	.L115:
1121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1453              		.loc 1 1121 0
 1454 0022 A36D     		ldr	r3, [r4, #88]
 1455 0024 174A     		ldr	r2, .L124
 1456 0026 1A40     		ands	r2, r3
 1457 0028 8023     		movs	r3, #128
 1458 002a 5B00     		lsls	r3, r3, #1
 1459 002c 1343     		orrs	r3, r2
 1460 002e A365     		str	r3, [r4, #88]
1126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1461              		.loc 1 1126 0
 1462 0030 0023     		movs	r3, #0
 1463 0032 E365     		str	r3, [r4, #92]
1131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1464              		.loc 1 1131 0
 1465 0034 5422     		movs	r2, #84
 1466 0036 A354     		strb	r3, [r4, r2]
1136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1467              		.loc 1 1136 0
 1468 0038 2368     		ldr	r3, [r4]
 1469 003a 383A     		subs	r2, r2, #56
 1470 003c 1A60     		str	r2, [r3]
1140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1471              		.loc 1 1140 0
 1472 003e 6369     		ldr	r3, [r4, #20]
 1473 0040 082B     		cmp	r3, #8
 1474 0042 14D1     		bne	.L122
1143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 1475              		.loc 1 1143 0
 1476 0044 2268     		ldr	r2, [r4]
 1477 0046 5368     		ldr	r3, [r2, #4]
 1478 0048 0421     		movs	r1, #4
 1479 004a 8B43     		bics	r3, r1
 1480 004c 5360     		str	r3, [r2, #4]
1144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
 1481              		.loc 1 1144 0
 1482 004e 2268     		ldr	r2, [r4]
 1483 0050 5368     		ldr	r3, [r2, #4]
 1484 0052 1431     		adds	r1, r1, #20
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 69


 1485 0054 0B43     		orrs	r3, r1
 1486 0056 5360     		str	r3, [r2, #4]
 1487              	.L118:
1156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1488              		.loc 1 1156 0
 1489 0058 2268     		ldr	r2, [r4]
 1490 005a 9368     		ldr	r3, [r2, #8]
 1491 005c 0421     		movs	r1, #4
 1492 005e 0B43     		orrs	r3, r1
 1493 0060 9360     		str	r3, [r2, #8]
 1494              	.L114:
1166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1495              		.loc 1 1166 0
 1496              		@ sp needed
 1497              	.LVL105:
 1498 0062 10BD     		pop	{r4, pc}
 1499              	.LVL106:
 1500              	.L123:
1112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1501              		.loc 1 1112 0
 1502 0064 FFF7FEFF 		bl	ADC_Enable
 1503              	.LVL107:
1116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1504              		.loc 1 1116 0
 1505 0068 0028     		cmp	r0, #0
 1506 006a DAD0     		beq	.L115
 1507 006c F9E7     		b	.L114
 1508              	.LVL108:
 1509              	.L122:
1148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
 1510              		.loc 1 1148 0
 1511 006e 2268     		ldr	r2, [r4]
 1512 0070 5368     		ldr	r3, [r2, #4]
 1513 0072 1C21     		movs	r1, #28
 1514 0074 0B43     		orrs	r3, r1
 1515 0076 5360     		str	r3, [r2, #4]
1149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 1516              		.loc 1 1149 0
 1517 0078 EEE7     		b	.L118
 1518              	.LVL109:
 1519              	.L119:
1161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1520              		.loc 1 1161 0
 1521 007a 0220     		movs	r0, #2
 1522              	.LVL110:
 1523 007c F1E7     		b	.L114
 1524              	.LVL111:
 1525              	.L120:
1105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1526              		.loc 1 1105 0
 1527 007e 0220     		movs	r0, #2
 1528              	.LVL112:
 1529 0080 EFE7     		b	.L114
 1530              	.L125:
 1531 0082 C046     		.align	2
 1532              	.L124:
 1533 0084 FEF0FFFF 		.word	-3842
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 70


 1534              		.cfi_endproc
 1535              	.LFE47:
 1537              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1538              		.align	1
 1539              		.global	HAL_ADC_Stop_IT
 1540              		.syntax unified
 1541              		.code	16
 1542              		.thumb_func
 1543              		.fpu softvfp
 1545              	HAL_ADC_Stop_IT:
 1546              	.LFB48:
1176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1547              		.loc 1 1176 0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 0
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 1551              	.LVL113:
 1552 0000 10B5     		push	{r4, lr}
 1553              	.LCFI12:
 1554              		.cfi_def_cfa_offset 8
 1555              		.cfi_offset 4, -8
 1556              		.cfi_offset 14, -4
 1557 0002 0400     		movs	r4, r0
 1558              	.LVL114:
1183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1559              		.loc 1 1183 0
 1560 0004 5423     		movs	r3, #84
 1561 0006 C35C     		ldrb	r3, [r0, r3]
 1562 0008 012B     		cmp	r3, #1
 1563 000a 1CD0     		beq	.L129
1183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1564              		.loc 1 1183 0 is_stmt 0 discriminator 2
 1565 000c 5423     		movs	r3, #84
 1566 000e 0122     		movs	r2, #1
 1567 0010 C254     		strb	r2, [r0, r3]
1186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1568              		.loc 1 1186 0 is_stmt 1 discriminator 2
 1569 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1570              	.LVL115:
1189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1571              		.loc 1 1189 0 discriminator 2
 1572 0016 0028     		cmp	r0, #0
 1573 0018 03D0     		beq	.L130
 1574              	.LVL116:
 1575              	.L128:
1209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1576              		.loc 1 1209 0
 1577 001a 5423     		movs	r3, #84
 1578 001c 0022     		movs	r2, #0
 1579 001e E254     		strb	r2, [r4, r3]
 1580              	.LVL117:
 1581              	.L127:
1213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1582              		.loc 1 1213 0
 1583              		@ sp needed
 1584              	.LVL118:
 1585 0020 10BD     		pop	{r4, pc}
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 71


 1586              	.LVL119:
 1587              	.L130:
1193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1588              		.loc 1 1193 0
 1589 0022 2268     		ldr	r2, [r4]
 1590 0024 5368     		ldr	r3, [r2, #4]
 1591 0026 1C21     		movs	r1, #28
 1592 0028 8B43     		bics	r3, r1
 1593 002a 5360     		str	r3, [r2, #4]
1196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1594              		.loc 1 1196 0
 1595 002c 2000     		movs	r0, r4
 1596              	.LVL120:
 1597 002e FFF7FEFF 		bl	ADC_Disable
 1598              	.LVL121:
1199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1599              		.loc 1 1199 0
 1600 0032 0028     		cmp	r0, #0
 1601 0034 F1D1     		bne	.L128
1202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1602              		.loc 1 1202 0
 1603 0036 A36D     		ldr	r3, [r4, #88]
 1604 0038 044A     		ldr	r2, .L131
 1605 003a 1340     		ands	r3, r2
 1606 003c 0432     		adds	r2, r2, #4
 1607 003e FF32     		adds	r2, r2, #255
 1608 0040 1343     		orrs	r3, r2
 1609 0042 A365     		str	r3, [r4, #88]
 1610 0044 E9E7     		b	.L128
 1611              	.LVL122:
 1612              	.L129:
1183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1613              		.loc 1 1183 0
 1614 0046 0220     		movs	r0, #2
 1615              	.LVL123:
 1616 0048 EAE7     		b	.L127
 1617              	.L132:
 1618 004a C046     		.align	2
 1619              	.L131:
 1620 004c FEFEFFFF 		.word	-258
 1621              		.cfi_endproc
 1622              	.LFE48:
 1624              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1625              		.align	1
 1626              		.global	HAL_ADC_Start_DMA
 1627              		.syntax unified
 1628              		.code	16
 1629              		.thumb_func
 1630              		.fpu softvfp
 1632              	HAL_ADC_Start_DMA:
 1633              	.LFB49:
1226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1634              		.loc 1 1226 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 0
 1637              		@ frame_needed = 0, uses_anonymous_args = 0
 1638              	.LVL124:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 72


 1639 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1640              	.LCFI13:
 1641              		.cfi_def_cfa_offset 24
 1642              		.cfi_offset 3, -24
 1643              		.cfi_offset 4, -20
 1644              		.cfi_offset 5, -16
 1645              		.cfi_offset 6, -12
 1646              		.cfi_offset 7, -8
 1647              		.cfi_offset 14, -4
 1648 0002 0400     		movs	r4, r0
 1649 0004 0E00     		movs	r6, r1
 1650 0006 1700     		movs	r7, r2
 1651              	.LVL125:
1233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1652              		.loc 1 1233 0
 1653 0008 0368     		ldr	r3, [r0]
 1654 000a 9B68     		ldr	r3, [r3, #8]
 1655 000c 5B07     		lsls	r3, r3, #29
 1656 000e 3ED4     		bmi	.L136
1236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1657              		.loc 1 1236 0
 1658 0010 5423     		movs	r3, #84
 1659 0012 C35C     		ldrb	r3, [r0, r3]
 1660 0014 012B     		cmp	r3, #1
 1661 0016 3CD0     		beq	.L137
1236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1662              		.loc 1 1236 0 is_stmt 0 discriminator 2
 1663 0018 5423     		movs	r3, #84
 1664 001a 0122     		movs	r2, #1
 1665              	.LVL126:
 1666 001c C254     		strb	r2, [r0, r3]
1241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1667              		.loc 1 1241 0 is_stmt 1 discriminator 2
 1668 001e C369     		ldr	r3, [r0, #28]
 1669 0020 012B     		cmp	r3, #1
 1670 0022 32D0     		beq	.L138
1243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1671              		.loc 1 1243 0
 1672 0024 FFF7FEFF 		bl	ADC_Enable
 1673              	.LVL127:
 1674 0028 051E     		subs	r5, r0, #0
 1675              	.LVL128:
1247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1676              		.loc 1 1247 0
 1677 002a 2CD1     		bne	.L134
 1678              	.LVL129:
 1679              	.L135:
1252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1680              		.loc 1 1252 0
 1681 002c A36D     		ldr	r3, [r4, #88]
 1682 002e 1A4A     		ldr	r2, .L139
 1683 0030 1A40     		ands	r2, r3
 1684 0032 8023     		movs	r3, #128
 1685 0034 5B00     		lsls	r3, r3, #1
 1686 0036 1343     		orrs	r3, r2
 1687 0038 A365     		str	r3, [r4, #88]
1257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 73


 1688              		.loc 1 1257 0
 1689 003a 0023     		movs	r3, #0
 1690 003c E365     		str	r3, [r4, #92]
1262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1691              		.loc 1 1262 0
 1692 003e 5422     		movs	r2, #84
 1693 0040 A354     		strb	r3, [r4, r2]
1265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1694              		.loc 1 1265 0
 1695 0042 236D     		ldr	r3, [r4, #80]
 1696 0044 154A     		ldr	r2, .L139+4
 1697 0046 DA62     		str	r2, [r3, #44]
1268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1698              		.loc 1 1268 0
 1699 0048 236D     		ldr	r3, [r4, #80]
 1700 004a 154A     		ldr	r2, .L139+8
 1701 004c 1A63     		str	r2, [r3, #48]
1271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1702              		.loc 1 1271 0
 1703 004e 236D     		ldr	r3, [r4, #80]
 1704 0050 144A     		ldr	r2, .L139+12
 1705 0052 5A63     		str	r2, [r3, #52]
1280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1706              		.loc 1 1280 0
 1707 0054 2368     		ldr	r3, [r4]
 1708 0056 1C22     		movs	r2, #28
 1709 0058 1A60     		str	r2, [r3]
1283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1710              		.loc 1 1283 0
 1711 005a 2268     		ldr	r2, [r4]
 1712 005c 5368     		ldr	r3, [r2, #4]
 1713 005e 1021     		movs	r1, #16
 1714 0060 0B43     		orrs	r3, r1
 1715 0062 5360     		str	r3, [r2, #4]
1286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1716              		.loc 1 1286 0
 1717 0064 2268     		ldr	r2, [r4]
 1718 0066 D368     		ldr	r3, [r2, #12]
 1719 0068 0F39     		subs	r1, r1, #15
 1720 006a 0B43     		orrs	r3, r1
 1721 006c D360     		str	r3, [r2, #12]
1289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1722              		.loc 1 1289 0
 1723 006e 2168     		ldr	r1, [r4]
 1724 0070 4031     		adds	r1, r1, #64
 1725 0072 3B00     		movs	r3, r7
 1726 0074 3200     		movs	r2, r6
 1727 0076 206D     		ldr	r0, [r4, #80]
 1728 0078 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1729              	.LVL130:
1295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1730              		.loc 1 1295 0
 1731 007c 2268     		ldr	r2, [r4]
 1732 007e 9368     		ldr	r3, [r2, #8]
 1733 0080 0421     		movs	r1, #4
 1734 0082 0B43     		orrs	r3, r1
 1735 0084 9360     		str	r3, [r2, #8]
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 74


 1736              	.L134:
1305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1737              		.loc 1 1305 0
 1738 0086 2800     		movs	r0, r5
 1739              		@ sp needed
 1740              	.LVL131:
 1741              	.LVL132:
 1742              	.LVL133:
 1743 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1744              	.LVL134:
 1745              	.L138:
1227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1746              		.loc 1 1227 0
 1747 008a 0025     		movs	r5, #0
 1748 008c CEE7     		b	.L135
 1749              	.LVL135:
 1750              	.L136:
1300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1751              		.loc 1 1300 0
 1752 008e 0225     		movs	r5, #2
 1753 0090 F9E7     		b	.L134
 1754              	.L137:
1236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1755              		.loc 1 1236 0
 1756 0092 0225     		movs	r5, #2
 1757 0094 F7E7     		b	.L134
 1758              	.L140:
 1759 0096 C046     		.align	2
 1760              	.L139:
 1761 0098 FEF0FFFF 		.word	-3842
 1762 009c 00000000 		.word	ADC_DMAConvCplt
 1763 00a0 00000000 		.word	ADC_DMAHalfConvCplt
 1764 00a4 00000000 		.word	ADC_DMAError
 1765              		.cfi_endproc
 1766              	.LFE49:
 1768              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1769              		.align	1
 1770              		.global	HAL_ADC_Stop_DMA
 1771              		.syntax unified
 1772              		.code	16
 1773              		.thumb_func
 1774              		.fpu softvfp
 1776              	HAL_ADC_Stop_DMA:
 1777              	.LFB50:
1316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1778              		.loc 1 1316 0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 0
 1781              		@ frame_needed = 0, uses_anonymous_args = 0
 1782              	.LVL136:
 1783 0000 70B5     		push	{r4, r5, r6, lr}
 1784              	.LCFI14:
 1785              		.cfi_def_cfa_offset 16
 1786              		.cfi_offset 4, -16
 1787              		.cfi_offset 5, -12
 1788              		.cfi_offset 6, -8
 1789              		.cfi_offset 14, -4
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 75


 1790 0002 0500     		movs	r5, r0
 1791              	.LVL137:
1323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1792              		.loc 1 1323 0
 1793 0004 5423     		movs	r3, #84
 1794 0006 C35C     		ldrb	r3, [r0, r3]
 1795 0008 012B     		cmp	r3, #1
 1796 000a 32D0     		beq	.L147
1323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1797              		.loc 1 1323 0 is_stmt 0 discriminator 2
 1798 000c 5423     		movs	r3, #84
 1799 000e 0122     		movs	r2, #1
 1800 0010 C254     		strb	r2, [r0, r3]
1326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1801              		.loc 1 1326 0 is_stmt 1 discriminator 2
 1802 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1803              	.LVL138:
 1804 0016 041E     		subs	r4, r0, #0
 1805              	.LVL139:
1329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1806              		.loc 1 1329 0 discriminator 2
 1807 0018 04D0     		beq	.L148
 1808              	.LVL140:
 1809              	.L143:
1372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1810              		.loc 1 1372 0
 1811 001a 5423     		movs	r3, #84
 1812 001c 0022     		movs	r2, #0
 1813 001e EA54     		strb	r2, [r5, r3]
 1814              	.LVL141:
 1815              	.L142:
1376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1816              		.loc 1 1376 0
 1817 0020 2000     		movs	r0, r4
 1818              		@ sp needed
 1819              	.LVL142:
 1820 0022 70BD     		pop	{r4, r5, r6, pc}
 1821              	.LVL143:
 1822              	.L148:
1332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1823              		.loc 1 1332 0
 1824 0024 2A68     		ldr	r2, [r5]
 1825 0026 D368     		ldr	r3, [r2, #12]
 1826 0028 0121     		movs	r1, #1
 1827 002a 8B43     		bics	r3, r1
 1828 002c D360     		str	r3, [r2, #12]
1336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1829              		.loc 1 1336 0
 1830 002e 286D     		ldr	r0, [r5, #80]
 1831              	.LVL144:
 1832 0030 FFF7FEFF 		bl	HAL_DMA_Abort
 1833              	.LVL145:
 1834 0034 041E     		subs	r4, r0, #0
 1835              	.LVL146:
1339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1836              		.loc 1 1339 0
 1837 0036 03D0     		beq	.L144
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 76


1342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1838              		.loc 1 1342 0
 1839 0038 AB6D     		ldr	r3, [r5, #88]
 1840 003a 4022     		movs	r2, #64
 1841 003c 1343     		orrs	r3, r2
 1842 003e AB65     		str	r3, [r5, #88]
 1843              	.L144:
1346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1844              		.loc 1 1346 0
 1845 0040 2A68     		ldr	r2, [r5]
 1846 0042 5368     		ldr	r3, [r2, #4]
 1847 0044 1021     		movs	r1, #16
 1848 0046 8B43     		bics	r3, r1
 1849 0048 5360     		str	r3, [r2, #4]
1351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1850              		.loc 1 1351 0
 1851 004a 002C     		cmp	r4, #0
 1852 004c 0DD1     		bne	.L145
1353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1853              		.loc 1 1353 0
 1854 004e 2800     		movs	r0, r5
 1855              	.LVL147:
 1856 0050 FFF7FEFF 		bl	ADC_Disable
 1857              	.LVL148:
 1858 0054 0400     		movs	r4, r0
 1859              	.LVL149:
 1860              	.L146:
1361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1861              		.loc 1 1361 0
 1862 0056 002C     		cmp	r4, #0
 1863 0058 DFD1     		bne	.L143
1364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1864              		.loc 1 1364 0
 1865 005a AB6D     		ldr	r3, [r5, #88]
 1866 005c 064A     		ldr	r2, .L149
 1867 005e 1340     		ands	r3, r2
 1868 0060 0432     		adds	r2, r2, #4
 1869 0062 FF32     		adds	r2, r2, #255
 1870 0064 1343     		orrs	r3, r2
 1871 0066 AB65     		str	r3, [r5, #88]
 1872 0068 D7E7     		b	.L143
 1873              	.LVL150:
 1874              	.L145:
1357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1875              		.loc 1 1357 0
 1876 006a 2800     		movs	r0, r5
 1877              	.LVL151:
 1878 006c FFF7FEFF 		bl	ADC_Disable
 1879              	.LVL152:
 1880 0070 F1E7     		b	.L146
 1881              	.LVL153:
 1882              	.L147:
1323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1883              		.loc 1 1323 0
 1884 0072 0224     		movs	r4, #2
 1885 0074 D4E7     		b	.L142
 1886              	.L150:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 77


 1887 0076 C046     		.align	2
 1888              	.L149:
 1889 0078 FEFEFFFF 		.word	-258
 1890              		.cfi_endproc
 1891              	.LFE50:
 1893              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1894              		.align	1
 1895              		.global	HAL_ADC_GetValue
 1896              		.syntax unified
 1897              		.code	16
 1898              		.thumb_func
 1899              		.fpu softvfp
 1901              	HAL_ADC_GetValue:
 1902              	.LFB51:
1398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 1903              		.loc 1 1398 0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 0
 1906              		@ frame_needed = 0, uses_anonymous_args = 0
 1907              		@ link register save eliminated.
 1908              	.LVL154:
1406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1909              		.loc 1 1406 0
 1910 0000 0368     		ldr	r3, [r0]
 1911 0002 186C     		ldr	r0, [r3, #64]
 1912              	.LVL155:
1407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1913              		.loc 1 1407 0
 1914              		@ sp needed
 1915 0004 7047     		bx	lr
 1916              		.cfi_endproc
 1917              	.LFE51:
 1919              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1920              		.align	1
 1921              		.weak	HAL_ADC_ConvCpltCallback
 1922              		.syntax unified
 1923              		.code	16
 1924              		.thumb_func
 1925              		.fpu softvfp
 1927              	HAL_ADC_ConvCpltCallback:
 1928              	.LFB53:
1537:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1929              		.loc 1 1537 0
 1930              		.cfi_startproc
 1931              		@ args = 0, pretend = 0, frame = 0
 1932              		@ frame_needed = 0, uses_anonymous_args = 0
 1933              		@ link register save eliminated.
 1934              	.LVL156:
1544:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1935              		.loc 1 1544 0
 1936              		@ sp needed
 1937 0000 7047     		bx	lr
 1938              		.cfi_endproc
 1939              	.LFE53:
 1941              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1942              		.align	1
 1943              		.syntax unified
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 78


 1944              		.code	16
 1945              		.thumb_func
 1946              		.fpu softvfp
 1948              	ADC_DMAConvCplt:
 1949              	.LFB64:
2085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1950              		.loc 1 2085 0
 1951              		.cfi_startproc
 1952              		@ args = 0, pretend = 0, frame = 0
 1953              		@ frame_needed = 0, uses_anonymous_args = 0
 1954              	.LVL157:
 1955 0000 10B5     		push	{r4, lr}
 1956              	.LCFI15:
 1957              		.cfi_def_cfa_offset 8
 1958              		.cfi_offset 4, -8
 1959              		.cfi_offset 14, -4
2087:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1960              		.loc 1 2087 0
 1961 0002 836A     		ldr	r3, [r0, #40]
 1962              	.LVL158:
2090:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1963              		.loc 1 2090 0
 1964 0004 9A6D     		ldr	r2, [r3, #88]
 1965 0006 5021     		movs	r1, #80
 1966 0008 1142     		tst	r1, r2
 1967 000a 03D0     		beq	.L158
2135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1968              		.loc 1 2135 0
 1969 000c 1B6D     		ldr	r3, [r3, #80]
 1970              	.LVL159:
 1971 000e 5B6B     		ldr	r3, [r3, #52]
 1972 0010 9847     		blx	r3
 1973              	.LVL160:
 1974              	.L153:
2137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1975              		.loc 1 2137 0
 1976              		@ sp needed
 1977 0012 10BD     		pop	{r4, pc}
 1978              	.LVL161:
 1979              	.L158:
2093:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1980              		.loc 1 2093 0
 1981 0014 996D     		ldr	r1, [r3, #88]
 1982 0016 8022     		movs	r2, #128
 1983 0018 9200     		lsls	r2, r2, #2
 1984 001a 0A43     		orrs	r2, r1
 1985 001c 9A65     		str	r2, [r3, #88]
2097:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 1986              		.loc 1 2097 0
 1987 001e 1A68     		ldr	r2, [r3]
 1988 0020 D068     		ldr	r0, [r2, #12]
 1989              	.LVL162:
 1990 0022 C021     		movs	r1, #192
 1991 0024 0901     		lsls	r1, r1, #4
 1992 0026 0842     		tst	r0, r1
 1993 0028 13D1     		bne	.L155
2097:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 79


 1994              		.loc 1 2097 0 is_stmt 0 discriminator 1
 1995 002a 196A     		ldr	r1, [r3, #32]
 1996 002c 0029     		cmp	r1, #0
 1997 002e 10D1     		bne	.L155
2101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1998              		.loc 1 2101 0 is_stmt 1
 1999 0030 1168     		ldr	r1, [r2]
 2000 0032 0907     		lsls	r1, r1, #28
 2001 0034 0DD5     		bpl	.L155
2105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
 2002              		.loc 1 2105 0
 2003 0036 9168     		ldr	r1, [r2, #8]
 2004 0038 4907     		lsls	r1, r1, #29
 2005 003a 0ED4     		bmi	.L156
2111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
 2006              		.loc 1 2111 0
 2007 003c 5168     		ldr	r1, [r2, #4]
 2008 003e 0C20     		movs	r0, #12
 2009 0040 8143     		bics	r1, r0
 2010 0042 5160     		str	r1, [r2, #4]
2114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 2011              		.loc 1 2114 0
 2012 0044 9A6D     		ldr	r2, [r3, #88]
 2013 0046 0949     		ldr	r1, .L159
 2014 0048 0A40     		ands	r2, r1
 2015 004a 0431     		adds	r1, r1, #4
 2016 004c FF31     		adds	r1, r1, #255
 2017 004e 0A43     		orrs	r2, r1
 2018 0050 9A65     		str	r2, [r3, #88]
 2019              	.L155:
2130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 2020              		.loc 1 2130 0
 2021 0052 1800     		movs	r0, r3
 2022 0054 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 2023              	.LVL163:
 2024 0058 DBE7     		b	.L153
 2025              	.LVL164:
 2026              	.L156:
2121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
 2027              		.loc 1 2121 0
 2028 005a 9A6D     		ldr	r2, [r3, #88]
 2029 005c 2021     		movs	r1, #32
 2030 005e 0A43     		orrs	r2, r1
 2031 0060 9A65     		str	r2, [r3, #88]
2124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
 2032              		.loc 1 2124 0
 2033 0062 DA6D     		ldr	r2, [r3, #92]
 2034 0064 1F39     		subs	r1, r1, #31
 2035 0066 0A43     		orrs	r2, r1
 2036 0068 DA65     		str	r2, [r3, #92]
 2037 006a F2E7     		b	.L155
 2038              	.L160:
 2039              		.align	2
 2040              	.L159:
 2041 006c FEFEFFFF 		.word	-258
 2042              		.cfi_endproc
 2043              	.LFE64:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 80


 2045              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 2046              		.align	1
 2047              		.weak	HAL_ADC_ConvHalfCpltCallback
 2048              		.syntax unified
 2049              		.code	16
 2050              		.thumb_func
 2051              		.fpu softvfp
 2053              	HAL_ADC_ConvHalfCpltCallback:
 2054              	.LFB54:
1552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2055              		.loc 1 1552 0
 2056              		.cfi_startproc
 2057              		@ args = 0, pretend = 0, frame = 0
 2058              		@ frame_needed = 0, uses_anonymous_args = 0
 2059              		@ link register save eliminated.
 2060              	.LVL165:
1559:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2061              		.loc 1 1559 0
 2062              		@ sp needed
 2063 0000 7047     		bx	lr
 2064              		.cfi_endproc
 2065              	.LFE54:
 2067              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 2068              		.align	1
 2069              		.syntax unified
 2070              		.code	16
 2071              		.thumb_func
 2072              		.fpu softvfp
 2074              	ADC_DMAHalfConvCplt:
 2075              	.LFB65:
2145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 2076              		.loc 1 2145 0
 2077              		.cfi_startproc
 2078              		@ args = 0, pretend = 0, frame = 0
 2079              		@ frame_needed = 0, uses_anonymous_args = 0
 2080              	.LVL166:
 2081 0000 10B5     		push	{r4, lr}
 2082              	.LCFI16:
 2083              		.cfi_def_cfa_offset 8
 2084              		.cfi_offset 4, -8
 2085              		.cfi_offset 14, -4
2147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2086              		.loc 1 2147 0
 2087 0002 806A     		ldr	r0, [r0, #40]
 2088              	.LVL167:
2150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2089              		.loc 1 2150 0
 2090 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 2091              	.LVL168:
2151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2092              		.loc 1 2151 0
 2093              		@ sp needed
 2094 0008 10BD     		pop	{r4, pc}
 2095              		.cfi_endproc
 2096              	.LFE65:
 2098              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2099              		.align	1
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 81


 2100              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2101              		.syntax unified
 2102              		.code	16
 2103              		.thumb_func
 2104              		.fpu softvfp
 2106              	HAL_ADC_LevelOutOfWindowCallback:
 2107              	.LFB55:
1567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2108              		.loc 1 1567 0
 2109              		.cfi_startproc
 2110              		@ args = 0, pretend = 0, frame = 0
 2111              		@ frame_needed = 0, uses_anonymous_args = 0
 2112              		@ link register save eliminated.
 2113              	.LVL169:
1574:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2114              		.loc 1 1574 0
 2115              		@ sp needed
 2116 0000 7047     		bx	lr
 2117              		.cfi_endproc
 2118              	.LFE55:
 2120              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2121              		.align	1
 2122              		.weak	HAL_ADC_ErrorCallback
 2123              		.syntax unified
 2124              		.code	16
 2125              		.thumb_func
 2126              		.fpu softvfp
 2128              	HAL_ADC_ErrorCallback:
 2129              	.LFB56:
1589:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2130              		.loc 1 1589 0
 2131              		.cfi_startproc
 2132              		@ args = 0, pretend = 0, frame = 0
 2133              		@ frame_needed = 0, uses_anonymous_args = 0
 2134              		@ link register save eliminated.
 2135              	.LVL170:
1596:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2136              		.loc 1 1596 0
 2137              		@ sp needed
 2138 0000 7047     		bx	lr
 2139              		.cfi_endproc
 2140              	.LFE56:
 2142              		.section	.text.ADC_DMAError,"ax",%progbits
 2143              		.align	1
 2144              		.syntax unified
 2145              		.code	16
 2146              		.thumb_func
 2147              		.fpu softvfp
 2149              	ADC_DMAError:
 2150              	.LFB66:
2159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 2151              		.loc 1 2159 0
 2152              		.cfi_startproc
 2153              		@ args = 0, pretend = 0, frame = 0
 2154              		@ frame_needed = 0, uses_anonymous_args = 0
 2155              	.LVL171:
 2156 0000 10B5     		push	{r4, lr}
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 82


 2157              	.LCFI17:
 2158              		.cfi_def_cfa_offset 8
 2159              		.cfi_offset 4, -8
 2160              		.cfi_offset 14, -4
2161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2161              		.loc 1 2161 0
 2162 0002 806A     		ldr	r0, [r0, #40]
 2163              	.LVL172:
2164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2164              		.loc 1 2164 0
 2165 0004 836D     		ldr	r3, [r0, #88]
 2166 0006 4022     		movs	r2, #64
 2167 0008 1343     		orrs	r3, r2
 2168 000a 8365     		str	r3, [r0, #88]
2167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2169              		.loc 1 2167 0
 2170 000c C36D     		ldr	r3, [r0, #92]
 2171 000e 3C3A     		subs	r2, r2, #60
 2172 0010 1343     		orrs	r3, r2
 2173 0012 C365     		str	r3, [r0, #92]
2170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2174              		.loc 1 2170 0
 2175 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2176              	.LVL173:
2171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2177              		.loc 1 2171 0
 2178              		@ sp needed
 2179 0018 10BD     		pop	{r4, pc}
 2180              		.cfi_endproc
 2181              	.LFE66:
 2183              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2184              		.align	1
 2185              		.global	HAL_ADC_IRQHandler
 2186              		.syntax unified
 2187              		.code	16
 2188              		.thumb_func
 2189              		.fpu softvfp
 2191              	HAL_ADC_IRQHandler:
 2192              	.LFB52:
1415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 2193              		.loc 1 1415 0
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 0
 2196              		@ frame_needed = 0, uses_anonymous_args = 0
 2197              	.LVL174:
 2198 0000 10B5     		push	{r4, lr}
 2199              	.LCFI18:
 2200              		.cfi_def_cfa_offset 8
 2201              		.cfi_offset 4, -8
 2202              		.cfi_offset 14, -4
 2203 0002 0400     		movs	r4, r0
1422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2204              		.loc 1 1422 0
 2205 0004 0368     		ldr	r3, [r0]
 2206 0006 1A68     		ldr	r2, [r3]
 2207 0008 5207     		lsls	r2, r2, #29
 2208 000a 02D5     		bpl	.L167
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 83


1422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2209              		.loc 1 1422 0 is_stmt 0 discriminator 1
 2210 000c 5A68     		ldr	r2, [r3, #4]
 2211 000e 5207     		lsls	r2, r2, #29
 2212 0010 05D4     		bmi	.L168
 2213              	.L167:
1423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2214              		.loc 1 1423 0 is_stmt 1 discriminator 3
 2215 0012 1A68     		ldr	r2, [r3]
1422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2216              		.loc 1 1422 0 discriminator 3
 2217 0014 1207     		lsls	r2, r2, #28
 2218 0016 2CD5     		bpl	.L169
1423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2219              		.loc 1 1423 0
 2220 0018 5A68     		ldr	r2, [r3, #4]
 2221 001a 1207     		lsls	r2, r2, #28
 2222 001c 29D5     		bpl	.L169
 2223              	.L168:
1426:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2224              		.loc 1 1426 0
 2225 001e A26D     		ldr	r2, [r4, #88]
 2226 0020 D206     		lsls	r2, r2, #27
 2227 0022 04D4     		bmi	.L170
1429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2228              		.loc 1 1429 0
 2229 0024 A16D     		ldr	r1, [r4, #88]
 2230 0026 8022     		movs	r2, #128
 2231 0028 9200     		lsls	r2, r2, #2
 2232 002a 0A43     		orrs	r2, r1
 2233 002c A265     		str	r2, [r4, #88]
 2234              	.L170:
1434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2235              		.loc 1 1434 0
 2236 002e D968     		ldr	r1, [r3, #12]
 2237 0030 C022     		movs	r2, #192
 2238 0032 1201     		lsls	r2, r2, #4
 2239 0034 1142     		tst	r1, r2
 2240 0036 13D1     		bne	.L171
1434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2241              		.loc 1 1434 0 is_stmt 0 discriminator 1
 2242 0038 226A     		ldr	r2, [r4, #32]
 2243 003a 002A     		cmp	r2, #0
 2244 003c 10D1     		bne	.L171
1438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 2245              		.loc 1 1438 0 is_stmt 1
 2246 003e 1A68     		ldr	r2, [r3]
 2247 0040 1207     		lsls	r2, r2, #28
 2248 0042 0DD5     		bpl	.L171
1442:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
 2249              		.loc 1 1442 0
 2250 0044 9A68     		ldr	r2, [r3, #8]
 2251 0046 5207     		lsls	r2, r2, #29
 2252 0048 34D4     		bmi	.L172
1448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
 2253              		.loc 1 1448 0
 2254 004a 5A68     		ldr	r2, [r3, #4]
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 84


 2255 004c 0C21     		movs	r1, #12
 2256 004e 8A43     		bics	r2, r1
 2257 0050 5A60     		str	r2, [r3, #4]
1451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 2258              		.loc 1 1451 0
 2259 0052 A36D     		ldr	r3, [r4, #88]
 2260 0054 224A     		ldr	r2, .L178
 2261 0056 1340     		ands	r3, r2
 2262 0058 0432     		adds	r2, r2, #4
 2263 005a FF32     		adds	r2, r2, #255
 2264 005c 1343     		orrs	r3, r2
 2265 005e A365     		str	r3, [r4, #88]
 2266              	.L171:
1470:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2267              		.loc 1 1470 0
 2268 0060 2000     		movs	r0, r4
 2269              	.LVL175:
 2270 0062 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 2271              	.LVL176:
1482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2272              		.loc 1 1482 0
 2273 0066 A369     		ldr	r3, [r4, #24]
 2274 0068 012B     		cmp	r3, #1
 2275 006a 02D0     		beq	.L169
1484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2276              		.loc 1 1484 0
 2277 006c 2368     		ldr	r3, [r4]
 2278 006e 0C22     		movs	r2, #12
 2279 0070 1A60     		str	r2, [r3]
 2280              	.L169:
1489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2281              		.loc 1 1489 0
 2282 0072 2368     		ldr	r3, [r4]
 2283 0074 1A68     		ldr	r2, [r3]
 2284 0076 1206     		lsls	r2, r2, #24
 2285 0078 02D5     		bpl	.L173
1489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2286              		.loc 1 1489 0 is_stmt 0 discriminator 1
 2287 007a 5B68     		ldr	r3, [r3, #4]
 2288 007c 1B06     		lsls	r3, r3, #24
 2289 007e 22D4     		bmi	.L177
 2290              	.L173:
1504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2291              		.loc 1 1504 0 is_stmt 1
 2292 0080 2368     		ldr	r3, [r4]
 2293 0082 1A68     		ldr	r2, [r3]
 2294 0084 D206     		lsls	r2, r2, #27
 2295 0086 14D5     		bpl	.L166
1504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2296              		.loc 1 1504 0 is_stmt 0 discriminator 1
 2297 0088 5A68     		ldr	r2, [r3, #4]
 2298 008a D206     		lsls	r2, r2, #27
 2299 008c 11D5     		bpl	.L166
1512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2300              		.loc 1 1512 0 is_stmt 1
 2301 008e 626B     		ldr	r2, [r4, #52]
 2302 0090 002A     		cmp	r2, #0
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 85


 2303 0092 02D0     		beq	.L175
1513:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2304              		.loc 1 1513 0 discriminator 1
 2305 0094 DA68     		ldr	r2, [r3, #12]
1512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2306              		.loc 1 1512 0 discriminator 1
 2307 0096 D207     		lsls	r2, r2, #31
 2308 0098 08D5     		bpl	.L176
 2309              	.L175:
1516:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 2310              		.loc 1 1516 0
 2311 009a E26D     		ldr	r2, [r4, #92]
 2312 009c 0221     		movs	r1, #2
 2313 009e 0A43     		orrs	r2, r1
 2314 00a0 E265     		str	r2, [r4, #92]
1519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 2315              		.loc 1 1519 0
 2316 00a2 1022     		movs	r2, #16
 2317 00a4 1A60     		str	r2, [r3]
1522:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2318              		.loc 1 1522 0
 2319 00a6 2000     		movs	r0, r4
 2320 00a8 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2321              	.LVL177:
 2322              	.L176:
1526:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 2323              		.loc 1 1526 0
 2324 00ac 2368     		ldr	r3, [r4]
 2325 00ae 1022     		movs	r2, #16
 2326 00b0 1A60     		str	r2, [r3]
 2327              	.L166:
1529:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2328              		.loc 1 1529 0
 2329              		@ sp needed
 2330              	.LVL178:
 2331 00b2 10BD     		pop	{r4, pc}
 2332              	.LVL179:
 2333              	.L172:
1458:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
 2334              		.loc 1 1458 0
 2335 00b4 A36D     		ldr	r3, [r4, #88]
 2336 00b6 2022     		movs	r2, #32
 2337 00b8 1343     		orrs	r3, r2
 2338 00ba A365     		str	r3, [r4, #88]
1461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
 2339              		.loc 1 1461 0
 2340 00bc E36D     		ldr	r3, [r4, #92]
 2341 00be 1F3A     		subs	r2, r2, #31
 2342 00c0 1343     		orrs	r3, r2
 2343 00c2 E365     		str	r3, [r4, #92]
 2344 00c4 CCE7     		b	.L171
 2345              	.LVL180:
 2346              	.L177:
1492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2347              		.loc 1 1492 0
 2348 00c6 A26D     		ldr	r2, [r4, #88]
 2349 00c8 8023     		movs	r3, #128
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 86


 2350 00ca 5B02     		lsls	r3, r3, #9
 2351 00cc 1343     		orrs	r3, r2
 2352 00ce A365     		str	r3, [r4, #88]
1495:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2353              		.loc 1 1495 0
 2354 00d0 2000     		movs	r0, r4
 2355 00d2 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 2356              	.LVL181:
1498:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 2357              		.loc 1 1498 0
 2358 00d6 2368     		ldr	r3, [r4]
 2359 00d8 8022     		movs	r2, #128
 2360 00da 1A60     		str	r2, [r3]
 2361 00dc D0E7     		b	.L173
 2362              	.L179:
 2363 00de C046     		.align	2
 2364              	.L178:
 2365 00e0 FEFEFFFF 		.word	-258
 2366              		.cfi_endproc
 2367              	.LFE52:
 2369              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2370              		.align	1
 2371              		.global	HAL_ADC_ConfigChannel
 2372              		.syntax unified
 2373              		.code	16
 2374              		.thumb_func
 2375              		.fpu softvfp
 2377              	HAL_ADC_ConfigChannel:
 2378              	.LFB57:
1640:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 2379              		.loc 1 1640 0
 2380              		.cfi_startproc
 2381              		@ args = 0, pretend = 0, frame = 0
 2382              		@ frame_needed = 0, uses_anonymous_args = 0
 2383              	.LVL182:
 2384 0000 70B5     		push	{r4, r5, r6, lr}
 2385              	.LCFI19:
 2386              		.cfi_def_cfa_offset 16
 2387              		.cfi_offset 4, -16
 2388              		.cfi_offset 5, -12
 2389              		.cfi_offset 6, -8
 2390              		.cfi_offset 14, -4
 2391 0002 0400     		movs	r4, r0
 2392 0004 0D00     		movs	r5, r1
1647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2393              		.loc 1 1647 0
 2394 0006 5423     		movs	r3, #84
 2395 0008 C35C     		ldrb	r3, [r0, r3]
 2396 000a 012B     		cmp	r3, #1
 2397 000c 4BD0     		beq	.L187
1647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2398              		.loc 1 1647 0 is_stmt 0 discriminator 2
 2399 000e 5423     		movs	r3, #84
 2400 0010 0122     		movs	r2, #1
 2401 0012 C254     		strb	r2, [r0, r3]
1654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2402              		.loc 1 1654 0 is_stmt 1 discriminator 2
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 87


 2403 0014 0368     		ldr	r3, [r0]
 2404 0016 9A68     		ldr	r2, [r3, #8]
 2405 0018 5207     		lsls	r2, r2, #29
 2406 001a 1AD4     		bmi	.L188
1663:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2407              		.loc 1 1663 0
 2408 001c 234A     		ldr	r2, .L190
 2409 001e 4968     		ldr	r1, [r1, #4]
 2410              	.LVL183:
 2411 0020 9142     		cmp	r1, r2
 2412 0022 29D0     		beq	.L183
1666:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2413              		.loc 1 1666 0
 2414 0024 996A     		ldr	r1, [r3, #40]
 2415 0026 2A68     		ldr	r2, [r5]
 2416 0028 5203     		lsls	r2, r2, #13
 2417 002a 520B     		lsrs	r2, r2, #13
 2418 002c 0A43     		orrs	r2, r1
 2419 002e 9A62     		str	r2, [r3, #40]
1674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2420              		.loc 1 1674 0
 2421 0030 2B68     		ldr	r3, [r5]
 2422 0032 5B03     		lsls	r3, r3, #13
 2423 0034 16D4     		bmi	.L189
 2424              	.LVL184:
 2425              	.L184:
1683:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2426              		.loc 1 1683 0
 2427 0036 2B68     		ldr	r3, [r5]
 2428 0038 9B03     		lsls	r3, r3, #14
 2429 003a 05D5     		bpl	.L185
1685:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2430              		.loc 1 1685 0
 2431 003c 1C4A     		ldr	r2, .L190+4
 2432 003e 1168     		ldr	r1, [r2]
 2433 0040 8023     		movs	r3, #128
 2434 0042 DB03     		lsls	r3, r3, #15
 2435 0044 0B43     		orrs	r3, r1
 2436 0046 1360     		str	r3, [r2]
 2437              	.L185:
1726:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2438              		.loc 1 1726 0
 2439 0048 5423     		movs	r3, #84
 2440 004a 0022     		movs	r2, #0
 2441 004c E254     		strb	r2, [r4, r3]
1729:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2442              		.loc 1 1729 0
 2443 004e 0020     		movs	r0, #0
 2444              	.L181:
1730:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2445              		.loc 1 1730 0
 2446              		@ sp needed
 2447              	.LVL185:
 2448              	.LVL186:
 2449 0050 70BD     		pop	{r4, r5, r6, pc}
 2450              	.LVL187:
 2451              	.L188:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 88


1657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process unlocked */
 2452              		.loc 1 1657 0
 2453 0052 836D     		ldr	r3, [r0, #88]
 2454 0054 2022     		movs	r2, #32
 2455 0056 1343     		orrs	r3, r2
 2456 0058 8365     		str	r3, [r0, #88]
1659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 2457              		.loc 1 1659 0
 2458 005a 5423     		movs	r3, #84
 2459 005c 0022     		movs	r2, #0
 2460 005e C254     		strb	r2, [r0, r3]
1660:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 2461              		.loc 1 1660 0
 2462 0060 0120     		movs	r0, #1
 2463              	.LVL188:
 2464 0062 F5E7     		b	.L181
 2465              	.LVL189:
 2466              	.L189:
1676:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 2467              		.loc 1 1676 0
 2468 0064 124A     		ldr	r2, .L190+4
 2469 0066 1168     		ldr	r1, [r2]
 2470 0068 8023     		movs	r3, #128
 2471 006a 1B04     		lsls	r3, r3, #16
 2472 006c 0B43     		orrs	r3, r1
 2473 006e 1360     		str	r3, [r2]
1679:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2474              		.loc 1 1679 0
 2475 0070 0A20     		movs	r0, #10
 2476              	.LVL190:
 2477 0072 FFF7FEFF 		bl	ADC_DelayMicroSecond
 2478              	.LVL191:
 2479 0076 DEE7     		b	.L184
 2480              	.LVL192:
 2481              	.L183:
1700:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2482              		.loc 1 1700 0
 2483 0078 996A     		ldr	r1, [r3, #40]
 2484 007a 2A68     		ldr	r2, [r5]
 2485 007c 5203     		lsls	r2, r2, #13
 2486 007e 520B     		lsrs	r2, r2, #13
 2487 0080 9143     		bics	r1, r2
 2488 0082 9962     		str	r1, [r3, #40]
1705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2489              		.loc 1 1705 0
 2490 0084 2B68     		ldr	r3, [r5]
 2491 0086 5B03     		lsls	r3, r3, #13
 2492 0088 04D5     		bpl	.L186
1707:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2493              		.loc 1 1707 0
 2494 008a 094A     		ldr	r2, .L190+4
 2495 008c 1368     		ldr	r3, [r2]
 2496 008e 0949     		ldr	r1, .L190+8
 2497 0090 0B40     		ands	r3, r1
 2498 0092 1360     		str	r3, [r2]
 2499              	.L186:
1711:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 89


 2500              		.loc 1 1711 0
 2501 0094 2B68     		ldr	r3, [r5]
 2502 0096 9B03     		lsls	r3, r3, #14
 2503 0098 D6D5     		bpl	.L185
1713:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2504              		.loc 1 1713 0
 2505 009a 054A     		ldr	r2, .L190+4
 2506 009c 1368     		ldr	r3, [r2]
 2507 009e 0649     		ldr	r1, .L190+12
 2508 00a0 0B40     		ands	r3, r1
 2509 00a2 1360     		str	r3, [r2]
 2510 00a4 D0E7     		b	.L185
 2511              	.LVL193:
 2512              	.L187:
1647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2513              		.loc 1 1647 0
 2514 00a6 0220     		movs	r0, #2
 2515              	.LVL194:
 2516 00a8 D2E7     		b	.L181
 2517              	.L191:
 2518 00aa C046     		.align	2
 2519              	.L190:
 2520 00ac 01100000 		.word	4097
 2521 00b0 08270140 		.word	1073817352
 2522 00b4 FFFF7FFF 		.word	-8388609
 2523 00b8 FFFFBFFF 		.word	-4194305
 2524              		.cfi_endproc
 2525              	.LFE57:
 2527              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2528              		.align	1
 2529              		.global	HAL_ADC_AnalogWDGConfig
 2530              		.syntax unified
 2531              		.code	16
 2532              		.thumb_func
 2533              		.fpu softvfp
 2535              	HAL_ADC_AnalogWDGConfig:
 2536              	.LFB58:
1755:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2537              		.loc 1 1755 0
 2538              		.cfi_startproc
 2539              		@ args = 0, pretend = 0, frame = 0
 2540              		@ frame_needed = 0, uses_anonymous_args = 0
 2541              	.LVL195:
 2542 0000 30B5     		push	{r4, r5, lr}
 2543              	.LCFI20:
 2544              		.cfi_def_cfa_offset 12
 2545              		.cfi_offset 4, -12
 2546              		.cfi_offset 5, -8
 2547              		.cfi_offset 14, -4
 2548              	.LVL196:
1776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2549              		.loc 1 1776 0
 2550 0002 5423     		movs	r3, #84
 2551 0004 C35C     		ldrb	r3, [r0, r3]
 2552 0006 012B     		cmp	r3, #1
 2553 0008 47D0     		beq	.L198
1776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 90


 2554              		.loc 1 1776 0 is_stmt 0 discriminator 2
 2555 000a 5423     		movs	r3, #84
 2556 000c 0122     		movs	r2, #1
 2557 000e C254     		strb	r2, [r0, r3]
1783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2558              		.loc 1 1783 0 is_stmt 1 discriminator 2
 2559 0010 0368     		ldr	r3, [r0]
 2560 0012 9A68     		ldr	r2, [r3, #8]
 2561 0014 5207     		lsls	r2, r2, #29
 2562 0016 3AD4     		bmi	.L194
1786:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2563              		.loc 1 1786 0
 2564 0018 8A68     		ldr	r2, [r1, #8]
 2565 001a 012A     		cmp	r2, #1
 2566 001c 32D0     		beq	.L199
1794:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2567              		.loc 1 1794 0
 2568 001e 5A68     		ldr	r2, [r3, #4]
 2569 0020 8024     		movs	r4, #128
 2570 0022 A243     		bics	r2, r4
 2571 0024 5A60     		str	r2, [r3, #4]
 2572              	.L196:
1801:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_AWDEN  |
 2573              		.loc 1 1801 0
 2574 0026 0268     		ldr	r2, [r0]
 2575 0028 D368     		ldr	r3, [r2, #12]
 2576 002a 1D4C     		ldr	r4, .L200
 2577 002c 2340     		ands	r3, r4
 2578 002e D360     		str	r3, [r2, #12]
1805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                               (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 2579              		.loc 1 1805 0
 2580 0030 0468     		ldr	r4, [r0]
 2581 0032 E368     		ldr	r3, [r4, #12]
1806:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2582              		.loc 1 1806 0
 2583 0034 F822     		movs	r2, #248
 2584 0036 D205     		lsls	r2, r2, #23
 2585 0038 4D68     		ldr	r5, [r1, #4]
 2586 003a 2A40     		ands	r2, r5
1805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                               (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 2587              		.loc 1 1805 0
 2588 003c 0D68     		ldr	r5, [r1]
 2589 003e 2A43     		orrs	r2, r5
 2590 0040 1343     		orrs	r3, r2
 2591 0042 E360     		str	r3, [r4, #12]
1811:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 2592              		.loc 1 1811 0
 2593 0044 0568     		ldr	r5, [r0]
 2594 0046 EB68     		ldr	r3, [r5, #12]
 2595 0048 DB08     		lsrs	r3, r3, #3
 2596 004a 0322     		movs	r2, #3
 2597 004c 1340     		ands	r3, r2
 2598 004e 5B00     		lsls	r3, r3, #1
 2599 0050 CC68     		ldr	r4, [r1, #12]
 2600 0052 9C40     		lsls	r4, r4, r3
 2601              	.LVL197:
1812:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 91


 2602              		.loc 1 1812 0
 2603 0054 0B69     		ldr	r3, [r1, #16]
 2604 0056 E968     		ldr	r1, [r5, #12]
 2605              	.LVL198:
 2606 0058 C908     		lsrs	r1, r1, #3
 2607 005a 0A40     		ands	r2, r1
 2608 005c 5200     		lsls	r2, r2, #1
 2609 005e 9340     		lsls	r3, r3, r2
 2610 0060 1A00     		movs	r2, r3
 2611              	.LVL199:
1815:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2612              		.loc 1 1815 0
 2613 0062 2B6A     		ldr	r3, [r5, #32]
 2614 0064 0F49     		ldr	r1, .L200+4
 2615 0066 0B40     		ands	r3, r1
 2616 0068 2B62     		str	r3, [r5, #32]
1818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set the low threshold */
 2617              		.loc 1 1818 0
 2618 006a 0168     		ldr	r1, [r0]
 2619 006c 2404     		lsls	r4, r4, #16
 2620              	.LVL200:
 2621 006e 0C62     		str	r4, [r1, #32]
1820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 2622              		.loc 1 1820 0
 2623 0070 0168     		ldr	r1, [r0]
 2624 0072 0B6A     		ldr	r3, [r1, #32]
 2625 0074 1343     		orrs	r3, r2
 2626 0076 0B62     		str	r3, [r1, #32]
1756:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2627              		.loc 1 1756 0
 2628 0078 0023     		movs	r3, #0
 2629              	.LVL201:
 2630              	.L197:
1833:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2631              		.loc 1 1833 0
 2632 007a 5422     		movs	r2, #84
 2633 007c 0021     		movs	r1, #0
 2634 007e 8154     		strb	r1, [r0, r2]
 2635              	.LVL202:
 2636              	.L193:
1837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2637              		.loc 1 1837 0
 2638 0080 1800     		movs	r0, r3
 2639              	.LVL203:
 2640              		@ sp needed
 2641 0082 30BD     		pop	{r4, r5, pc}
 2642              	.LVL204:
 2643              	.L199:
1789:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2644              		.loc 1 1789 0
 2645 0084 5A68     		ldr	r2, [r3, #4]
 2646 0086 8024     		movs	r4, #128
 2647 0088 2243     		orrs	r2, r4
 2648 008a 5A60     		str	r2, [r3, #4]
 2649 008c CBE7     		b	.L196
 2650              	.L194:
1827:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 92


 2651              		.loc 1 1827 0
 2652 008e 836D     		ldr	r3, [r0, #88]
 2653 0090 2022     		movs	r2, #32
 2654 0092 1343     		orrs	r3, r2
 2655 0094 8365     		str	r3, [r0, #88]
 2656              	.LVL205:
1829:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 2657              		.loc 1 1829 0
 2658 0096 0123     		movs	r3, #1
 2659 0098 EFE7     		b	.L197
 2660              	.LVL206:
 2661              	.L198:
1776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2662              		.loc 1 1776 0
 2663 009a 0223     		movs	r3, #2
 2664 009c F0E7     		b	.L193
 2665              	.L201:
 2666 009e C046     		.align	2
 2667              	.L200:
 2668 00a0 FFFF3F83 		.word	-2092957697
 2669 00a4 00F000F0 		.word	-268374016
 2670              		.cfi_endproc
 2671              	.LFE58:
 2673              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2674              		.align	1
 2675              		.global	HAL_ADC_GetState
 2676              		.syntax unified
 2677              		.code	16
 2678              		.thumb_func
 2679              		.fpu softvfp
 2681              	HAL_ADC_GetState:
 2682              	.LFB59:
1872:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 2683              		.loc 1 1872 0
 2684              		.cfi_startproc
 2685              		@ args = 0, pretend = 0, frame = 0
 2686              		@ frame_needed = 0, uses_anonymous_args = 0
 2687              		@ link register save eliminated.
 2688              	.LVL207:
1877:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2689              		.loc 1 1877 0
 2690 0000 806D     		ldr	r0, [r0, #88]
 2691              	.LVL208:
1878:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2692              		.loc 1 1878 0
 2693              		@ sp needed
 2694 0002 7047     		bx	lr
 2695              		.cfi_endproc
 2696              	.LFE59:
 2698              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2699              		.align	1
 2700              		.global	HAL_ADC_GetError
 2701              		.syntax unified
 2702              		.code	16
 2703              		.thumb_func
 2704              		.fpu softvfp
 2706              	HAL_ADC_GetError:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 93


 2707              	.LFB60:
1886:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 2708              		.loc 1 1886 0
 2709              		.cfi_startproc
 2710              		@ args = 0, pretend = 0, frame = 0
 2711              		@ frame_needed = 0, uses_anonymous_args = 0
 2712              		@ link register save eliminated.
 2713              	.LVL209:
1890:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2714              		.loc 1 1890 0
 2715 0000 C06D     		ldr	r0, [r0, #92]
 2716              	.LVL210:
1891:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2717              		.loc 1 1891 0
 2718              		@ sp needed
 2719 0002 7047     		bx	lr
 2720              		.cfi_endproc
 2721              	.LFE60:
 2723              		.text
 2724              	.Letext0:
 2725              		.file 2 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 2726              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2727              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 2728              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l072xx.h"
 2729              		.file 6 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l0xx.h"
 2730              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 2731              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 2732              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 2733              		.file 10 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 2734              		.file 11 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 2735              		.file 12 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 2736              		.file 13 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_adc.h"
 2737              		.file 14 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 94


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l0xx_hal_adc.c
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:17     .text.ADC_DelayMicroSecond:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:23     .text.ADC_DelayMicroSecond:0000000000000000 ADC_DelayMicroSecond
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:69     .text.ADC_DelayMicroSecond:0000000000000028 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:75     .text.ADC_ConversionStop:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:81     .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:164    .text.ADC_Disable:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:170    .text.ADC_Disable:0000000000000000 ADC_Disable
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:280    .text.ADC_Enable:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:286    .text.ADC_Enable:0000000000000000 ADC_Enable
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:392    .text.ADC_Enable:0000000000000074 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:397    .text.HAL_ADC_MspInit:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:404    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:419    .text.HAL_ADC_Init:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:426    .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:758    .text.HAL_ADC_Init:00000000000001c8 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:768    .text.HAL_ADC_MspDeInit:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:775    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:790    .text.HAL_ADC_DeInit:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:797    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:932    .text.HAL_ADC_DeInit:00000000000000a0 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:942    .text.HAL_ADC_Start:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:949    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1038   .text.HAL_ADC_Start:000000000000005c $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1043   .text.HAL_ADC_Stop:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1050   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1119   .text.HAL_ADC_Stop:0000000000000040 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1124   .text.HAL_ADC_PollForConversion:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1131   .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1289   .text.HAL_ADC_PollForConversion:00000000000000bc $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1294   .text.HAL_ADC_PollForEvent:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1301   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1410   .text.HAL_ADC_Start_IT:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1417   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1533   .text.HAL_ADC_Start_IT:0000000000000084 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1538   .text.HAL_ADC_Stop_IT:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1545   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1620   .text.HAL_ADC_Stop_IT:000000000000004c $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1625   .text.HAL_ADC_Start_DMA:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1632   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1761   .text.HAL_ADC_Start_DMA:0000000000000098 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1948   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2074   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2149   .text.ADC_DMAError:0000000000000000 ADC_DMAError
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1769   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1776   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1889   .text.HAL_ADC_Stop_DMA:0000000000000078 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1894   .text.HAL_ADC_GetValue:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1901   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1920   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1927   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:1942   .text.ADC_DMAConvCplt:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2041   .text.ADC_DMAConvCplt:000000000000006c $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2046   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2053   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2068   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s 			page 95


/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2099   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2106   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2121   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2128   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2143   .text.ADC_DMAError:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2184   .text.HAL_ADC_IRQHandler:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2191   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2365   .text.HAL_ADC_IRQHandler:00000000000000e0 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2370   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2377   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2520   .text.HAL_ADC_ConfigChannel:00000000000000ac $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2528   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2535   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2668   .text.HAL_ADC_AnalogWDGConfig:00000000000000a0 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2674   .text.HAL_ADC_GetState:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2681   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2699   .text.HAL_ADC_GetError:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccdrxUaa.s:2706   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError

UNDEFINED SYMBOLS
__aeabi_uidiv
SystemCoreClock
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
