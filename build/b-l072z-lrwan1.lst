ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"b-l072z-lrwan1.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.BSP_GetVersion,"ax",%progbits
  16              		.align	1
  17              		.global	BSP_GetVersion
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	BSP_GetVersion:
  24              	.LFB39:
  25              		.file 1 "Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c"
   1:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /**
   2:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   ******************************************************************************
   3:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @file    b-l072z-lrwan1.c
   4:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @author  MCD Application Team
   5:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @version V1.0.0
   6:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @date    15-November-2016
   7:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @brief   This file contains definitions for:
   8:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *          - LEDs and push-button available on B-L072Z-LRWAN1 Discovery Kit 
   9:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *            from STMicroelectronics
  10:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   ******************************************************************************
  11:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @attention
  12:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *
  13:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
  14:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *
  15:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * are permitted provided that the following conditions are met:
  17:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *      this list of conditions and the following disclaimer.
  19:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *      this list of conditions and the following disclaimer in the documentation
  21:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *      and/or other materials provided with the distribution.
  22:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *      may be used to endorse or promote products derived from this software
  24:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *      without specific prior written permission.
  25:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *
  26:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 2


  34:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *
  37:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   ******************************************************************************
  38:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */ 
  39:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   
  40:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /* Includes ------------------------------------------------------------------*/
  41:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** #include "b-l072z-lrwan1.h"
  42:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** #include <stdlib.h>
  43:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
  44:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /** @addtogroup BSP
  45:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @{
  46:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */ 
  47:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
  48:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /** @addtogroup B-L072Z-LRWAN1
  49:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @{
  50:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */   
  51:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     
  52:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /** @addtogroup B-L072Z-LRWAN1_LOW_LEVEL 
  53:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @brief This file provides set of firmware functions to manage Leds and push-button
  54:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *        available on B-L072Z-LRWAN1 Discovery Kit from STMicroelectronics.
  55:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @{
  56:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */ 
  57:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
  58:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /** @defgroup B-L072Z-LRWAN1_LOW_LEVEL_Private_TypesDefinitions 
  59:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @{
  60:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */ 
  61:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /**
  62:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @}
  63:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */ 
  64:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
  65:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
  66:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /** @defgroup B-L072Z-LRWAN1_LOW_LEVEL_Private_Defines 
  67:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @{
  68:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */ 
  69:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
  70:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /**
  71:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @brief 32L082MLM DISCO BSP Driver version number V1.0.0
  72:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */
  73:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** #define __B_L072Z_LRWAN1_BSP_VERSION_MAIN   (0x01) /*!< [31:24] main version */
  74:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** #define __B_L072Z_LRWAN1_BSP_VERSION_SUB1   (0x00) /*!< [23:16] sub1 version */
  75:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** #define __B_L072Z_LRWAN1_BSP_VERSION_SUB2   (0x00) /*!< [15:8]  sub2 version */
  76:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** #define __B_L072Z_LRWAN1_BSP_VERSION_RC     (0x00) /*!< [7:0]  release candidate */
  77:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** #define __B_L072Z_LRWAN1_BSP_VERSION         ((__B_L072Z_LRWAN1_BSP_VERSION_MAIN << 24)\
  78:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****                                              |(__B_L072Z_LRWAN1_BSP_VERSION_SUB1 << 16)\
  79:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****                                              |(__B_L072Z_LRWAN1_BSP_VERSION_SUB2 << 8 )\
  80:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****                                              |(__B_L072Z_LRWAN1_BSP_VERSION_RC))
  81:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
  82:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
  83:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
  84:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /** @defgroup B-L072Z-LRWAN1_LOW_LEVEL_Private_Variables
  85:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @{
  86:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */ 
  87:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** GPIO_TypeDef* LED_PORT[LEDn] = {LED1_GPIO_PORT, LED2_GPIO_PORT, LED3_GPIO_PORT, LED4_GPIO_PORT};
  88:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** const uint16_t LED_PIN[LEDn] = {LED1_PIN, LED2_PIN,LED3_PIN, LED4_PIN};
  89:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****                                 
  90:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** GPIO_TypeDef* BUTTON_PORT[BUTTONn] = {KEY_BUTTON_GPIO_PORT }; 
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 3


  91:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** const uint16_t BUTTON_PIN[BUTTONn] = {KEY_BUTTON_PIN }; 
  92:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** const uint8_t BUTTON_IRQn[BUTTONn] = {KEY_BUTTON_EXTI_IRQn };
  93:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
  94:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /**
  95:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @}
  96:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */ 
  97:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   
  98:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
  99:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /** @defgroup B-L072Z-LRWAN1_LOW_LEVEL_Private_Functions
 100:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @{
 101:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */ 
 102:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   /**
 103:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @}
 104:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */
 105:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /**
 106:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @brief  This method returns the B-L072Z-LRWAN1 BSP Driver revision
 107:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @param  None
 108:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @retval version : 0xXYZR (8bits for each decimal, R for RC)
 109:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */
 110:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** uint32_t BSP_GetVersion(void)
 111:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** {
  26              		.loc 1 111 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 112:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   return __B_L072Z_LRWAN1_BSP_VERSION;
  31              		.loc 1 112 0
  32 0000 8020     		movs	r0, #128
 113:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** }
  33              		.loc 1 113 0
  34 0002 4004     		lsls	r0, r0, #17
  35              		@ sp needed
  36 0004 7047     		bx	lr
  37              		.cfi_endproc
  38              	.LFE39:
  40              		.section	.text.BSP_LED_Init,"ax",%progbits
  41              		.align	1
  42              		.global	BSP_LED_Init
  43              		.syntax unified
  44              		.code	16
  45              		.thumb_func
  46              		.fpu softvfp
  48              	BSP_LED_Init:
  49              	.LFB40:
 114:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
 115:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /**
 116:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @brief  Configures LED GPIO.
 117:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @param  Led: Specifies the Led to be configured. 
 118:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *   This parameter can be one of following parameters:
 119:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *            @arg  LED2
 120:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @retval None
 121:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */
 122:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** void BSP_LED_Init(Led_TypeDef Led)
 123:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** {
  50              		.loc 1 123 0
  51              		.cfi_startproc
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 4


  52              		@ args = 0, pretend = 0, frame = 40
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              	.LVL0:
  55 0000 00B5     		push	{lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 4
  58              		.cfi_offset 14, -4
  59 0002 8BB0     		sub	sp, sp, #44
  60              	.LCFI1:
  61              		.cfi_def_cfa_offset 48
 124:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   GPIO_InitTypeDef  GPIO_InitStruct;
 125:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   
 126:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   /* Enable the GPIO_LED Clock */
 127:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   LEDx_GPIO_CLK_ENABLE( Led );
  62              		.loc 1 127 0
  63 0004 0128     		cmp	r0, #1
  64 0006 21D0     		beq	.L4
  65 0008 0028     		cmp	r0, #0
  66 000a 15D0     		beq	.L5
  67 000c 0228     		cmp	r0, #2
  68 000e 27D0     		beq	.L6
  69 0010 0328     		cmp	r0, #3
  70 0012 2FD0     		beq	.L7
  71              	.L3:
 128:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
 129:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   /* Configure the GPIO_LED pin */
 130:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   GPIO_InitStruct.Pin = LED_PIN[Led];
  72              		.loc 1 130 0
  73 0014 4200     		lsls	r2, r0, #1
  74 0016 1C4B     		ldr	r3, .L8
  75 0018 D35A     		ldrh	r3, [r2, r3]
  76 001a 0593     		str	r3, [sp, #20]
 131:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  77              		.loc 1 131 0
  78 001c 0123     		movs	r3, #1
  79 001e 0693     		str	r3, [sp, #24]
 132:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  80              		.loc 1 132 0
  81 0020 0023     		movs	r3, #0
  82 0022 0793     		str	r3, [sp, #28]
 133:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  83              		.loc 1 133 0
  84 0024 0333     		adds	r3, r3, #3
  85 0026 0893     		str	r3, [sp, #32]
 134:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   
 135:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
  86              		.loc 1 135 0
  87 0028 8000     		lsls	r0, r0, #2
  88              	.LVL1:
  89 002a 184B     		ldr	r3, .L8+4
  90 002c C058     		ldr	r0, [r0, r3]
  91 002e 05A9     		add	r1, sp, #20
  92 0030 FFF7FEFF 		bl	HAL_GPIO_Init
  93              	.LVL2:
 136:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** }
  94              		.loc 1 136 0
  95 0034 0BB0     		add	sp, sp, #44
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 5


  96              		@ sp needed
  97 0036 00BD     		pop	{pc}
  98              	.LVL3:
  99              	.L5:
 100              	.LBB2:
 127:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
 101              		.loc 1 127 0 discriminator 2
 102 0038 154A     		ldr	r2, .L8+8
 103 003a D16A     		ldr	r1, [r2, #44]
 104 003c 0223     		movs	r3, #2
 105 003e 1943     		orrs	r1, r3
 106 0040 D162     		str	r1, [r2, #44]
 107 0042 D26A     		ldr	r2, [r2, #44]
 108 0044 1340     		ands	r3, r2
 109 0046 0193     		str	r3, [sp, #4]
 110 0048 019B     		ldr	r3, [sp, #4]
 111              	.LBE2:
 112 004a E3E7     		b	.L3
 113              	.L4:
 114              	.LBB3:
 127:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
 115              		.loc 1 127 0 is_stmt 0 discriminator 3
 116 004c 104A     		ldr	r2, .L8+8
 117 004e D16A     		ldr	r1, [r2, #44]
 118 0050 0123     		movs	r3, #1
 119 0052 1943     		orrs	r1, r3
 120 0054 D162     		str	r1, [r2, #44]
 121 0056 D26A     		ldr	r2, [r2, #44]
 122 0058 1340     		ands	r3, r2
 123 005a 0293     		str	r3, [sp, #8]
 124 005c 029B     		ldr	r3, [sp, #8]
 125              	.LBE3:
 126 005e D9E7     		b	.L3
 127              	.L6:
 128              	.LBB4:
 127:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
 129              		.loc 1 127 0 discriminator 4
 130 0060 0B4A     		ldr	r2, .L8+8
 131 0062 D16A     		ldr	r1, [r2, #44]
 132 0064 0223     		movs	r3, #2
 133 0066 1943     		orrs	r1, r3
 134 0068 D162     		str	r1, [r2, #44]
 135 006a D26A     		ldr	r2, [r2, #44]
 136 006c 1340     		ands	r3, r2
 137 006e 0393     		str	r3, [sp, #12]
 138 0070 039B     		ldr	r3, [sp, #12]
 139              	.LBE4:
 140 0072 CFE7     		b	.L3
 141              	.L7:
 142              	.LBB5:
 127:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
 143              		.loc 1 127 0 discriminator 5
 144 0074 064A     		ldr	r2, .L8+8
 145 0076 D16A     		ldr	r1, [r2, #44]
 146 0078 0223     		movs	r3, #2
 147 007a 1943     		orrs	r1, r3
 148 007c D162     		str	r1, [r2, #44]
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 6


 149 007e D26A     		ldr	r2, [r2, #44]
 150 0080 1340     		ands	r3, r2
 151 0082 0493     		str	r3, [sp, #16]
 152 0084 049B     		ldr	r3, [sp, #16]
 153              	.LBE5:
 154 0086 C5E7     		b	.L3
 155              	.L9:
 156              		.align	2
 157              	.L8:
 158 0088 00000000 		.word	.LANCHOR0
 159 008c 00000000 		.word	.LANCHOR1
 160 0090 00100240 		.word	1073876992
 161              		.cfi_endproc
 162              	.LFE40:
 164              		.section	.text.BSP_LED_On,"ax",%progbits
 165              		.align	1
 166              		.global	BSP_LED_On
 167              		.syntax unified
 168              		.code	16
 169              		.thumb_func
 170              		.fpu softvfp
 172              	BSP_LED_On:
 173              	.LFB41:
 137:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
 138:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /**
 139:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @brief  Turns selected LED On.
 140:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @param  Led: Specifies the Led to be set on. 
 141:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *   This parameter can be one of following parameters:
 142:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *            @arg  LED2
 143:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @retval None
 144:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */
 145:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** void BSP_LED_On(Led_TypeDef Led)
 146:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** {
 174              		.loc 1 146 0 is_stmt 1
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              	.LVL4:
 179 0000 10B5     		push	{r4, lr}
 180              	.LCFI2:
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 4, -8
 183              		.cfi_offset 14, -4
 147:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 184              		.loc 1 147 0
 185 0002 4200     		lsls	r2, r0, #1
 186 0004 044B     		ldr	r3, .L11
 187 0006 D15A     		ldrh	r1, [r2, r3]
 188 0008 8000     		lsls	r0, r0, #2
 189              	.LVL5:
 190 000a 044B     		ldr	r3, .L11+4
 191 000c C058     		ldr	r0, [r0, r3]
 192 000e 0122     		movs	r2, #1
 193 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 194              	.LVL6:
 148:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** }
 195              		.loc 1 148 0
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 7


 196              		@ sp needed
 197 0014 10BD     		pop	{r4, pc}
 198              	.L12:
 199 0016 C046     		.align	2
 200              	.L11:
 201 0018 00000000 		.word	.LANCHOR0
 202 001c 00000000 		.word	.LANCHOR1
 203              		.cfi_endproc
 204              	.LFE41:
 206              		.section	.text.BSP_LED_Off,"ax",%progbits
 207              		.align	1
 208              		.global	BSP_LED_Off
 209              		.syntax unified
 210              		.code	16
 211              		.thumb_func
 212              		.fpu softvfp
 214              	BSP_LED_Off:
 215              	.LFB42:
 149:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
 150:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /**
 151:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @brief  Turns selected LED Off. 
 152:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @param  Led: Specifies the Led to be set off. 
 153:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *   This parameter can be one of following parameters:
 154:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *            @arg  LED2
 155:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @retval None
 156:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */
 157:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** void BSP_LED_Off(Led_TypeDef Led)
 158:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** {
 216              		.loc 1 158 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              	.LVL7:
 221 0000 10B5     		push	{r4, lr}
 222              	.LCFI3:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 4, -8
 225              		.cfi_offset 14, -4
 159:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 226              		.loc 1 159 0
 227 0002 4200     		lsls	r2, r0, #1
 228 0004 044B     		ldr	r3, .L14
 229 0006 D15A     		ldrh	r1, [r2, r3]
 230 0008 8000     		lsls	r0, r0, #2
 231              	.LVL8:
 232 000a 044B     		ldr	r3, .L14+4
 233 000c C058     		ldr	r0, [r0, r3]
 234 000e 0022     		movs	r2, #0
 235 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 236              	.LVL9:
 160:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** }
 237              		.loc 1 160 0
 238              		@ sp needed
 239 0014 10BD     		pop	{r4, pc}
 240              	.L15:
 241 0016 C046     		.align	2
 242              	.L14:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 8


 243 0018 00000000 		.word	.LANCHOR0
 244 001c 00000000 		.word	.LANCHOR1
 245              		.cfi_endproc
 246              	.LFE42:
 248              		.section	.text.BSP_LED_Toggle,"ax",%progbits
 249              		.align	1
 250              		.global	BSP_LED_Toggle
 251              		.syntax unified
 252              		.code	16
 253              		.thumb_func
 254              		.fpu softvfp
 256              	BSP_LED_Toggle:
 257              	.LFB43:
 161:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
 162:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /**
 163:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @brief  Toggles the selected LED.
 164:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @param  Led: Specifies the Led to be toggled. 
 165:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *   This parameter can be one of following parameters:
 166:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *            @arg  LED2
 167:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @retval None
 168:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */
 169:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** void BSP_LED_Toggle(Led_TypeDef Led)
 170:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** {
 258              		.loc 1 170 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              	.LVL10:
 263 0000 10B5     		push	{r4, lr}
 264              	.LCFI4:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 4, -8
 267              		.cfi_offset 14, -4
 171:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 268              		.loc 1 171 0
 269 0002 4200     		lsls	r2, r0, #1
 270 0004 034B     		ldr	r3, .L17
 271 0006 D15A     		ldrh	r1, [r2, r3]
 272 0008 8000     		lsls	r0, r0, #2
 273              	.LVL11:
 274 000a 034B     		ldr	r3, .L17+4
 275 000c C058     		ldr	r0, [r0, r3]
 276 000e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 277              	.LVL12:
 172:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** }
 278              		.loc 1 172 0
 279              		@ sp needed
 280 0012 10BD     		pop	{r4, pc}
 281              	.L18:
 282              		.align	2
 283              	.L17:
 284 0014 00000000 		.word	.LANCHOR0
 285 0018 00000000 		.word	.LANCHOR1
 286              		.cfi_endproc
 287              	.LFE43:
 289              		.section	.text.BSP_PB_Init,"ax",%progbits
 290              		.align	1
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 9


 291              		.global	BSP_PB_Init
 292              		.syntax unified
 293              		.code	16
 294              		.thumb_func
 295              		.fpu softvfp
 297              	BSP_PB_Init:
 298              	.LFB44:
 173:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
 174:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /**
 175:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @brief  Configures Button GPIO and EXTI Line.
 176:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @param  Button: Specifies the Button to be configured.
 177:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *   This parameter should be: BUTTON_KEY
 178:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @param  ButtonMode: Specifies Button mode.
 179:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *   This parameter can be one of following parameters:   
 180:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *     @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
 181:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
 182:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *                            generation capability  
 183:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @retval None
 184:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */
 185:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
 186:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** {
 299              		.loc 1 186 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 24
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              	.LVL13:
 304 0000 30B5     		push	{r4, r5, lr}
 305              	.LCFI5:
 306              		.cfi_def_cfa_offset 12
 307              		.cfi_offset 4, -12
 308              		.cfi_offset 5, -8
 309              		.cfi_offset 14, -4
 310 0002 87B0     		sub	sp, sp, #28
 311              	.LCFI6:
 312              		.cfi_def_cfa_offset 40
 313 0004 0400     		movs	r4, r0
 314 0006 0D00     		movs	r5, r1
 315              	.LBB9:
 187:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 188:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   
 189:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   /* Enable the BUTTON Clock */
 190:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   BUTTONx_GPIO_CLK_ENABLE(Button);
 316              		.loc 1 190 0
 317 0008 1E4B     		ldr	r3, .L24
 318 000a D96A     		ldr	r1, [r3, #44]
 319              	.LVL14:
 320 000c 0222     		movs	r2, #2
 321 000e 1143     		orrs	r1, r2
 322 0010 D962     		str	r1, [r3, #44]
 323 0012 D96A     		ldr	r1, [r3, #44]
 324 0014 0A40     		ands	r2, r1
 325 0016 0092     		str	r2, [sp]
 326 0018 009A     		ldr	r2, [sp]
 327              	.LBE9:
 191:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   __HAL_RCC_SYSCFG_CLK_ENABLE();
 328              		.loc 1 191 0
 329 001a 5A6B     		ldr	r2, [r3, #52]
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 10


 330 001c 0121     		movs	r1, #1
 331 001e 0A43     		orrs	r2, r1
 332 0020 5A63     		str	r2, [r3, #52]
 192:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   
 193:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   if(ButtonMode == BUTTON_MODE_GPIO)
 333              		.loc 1 193 0
 334 0022 002D     		cmp	r5, #0
 335 0024 03D0     		beq	.L22
 336              	.LVL15:
 337              	.L20:
 194:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   {
 195:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     /* Configure Button pin as input */
 196:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 197:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 198:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 199:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 200:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 201:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   }
 202:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   
 203:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   if(ButtonMode == BUTTON_MODE_EXTI)
 338              		.loc 1 203 0
 339 0026 012D     		cmp	r5, #1
 340 0028 11D0     		beq	.L23
 341              	.L19:
 204:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   {
 205:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     /* Configure Button pin as input with External interrupt */
 206:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 207:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 208:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 209:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 210:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     
 211:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     /* Enable and set Button EXTI Interrupt to the lowest priority */
 212:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03);
 213:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 214:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   }
 215:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** }
 342              		.loc 1 215 0
 343 002a 07B0     		add	sp, sp, #28
 344              		@ sp needed
 345 002c 30BD     		pop	{r4, r5, pc}
 346              	.LVL16:
 347              	.L22:
 196:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 348              		.loc 1 196 0
 349 002e 0423     		movs	r3, #4
 350 0030 0193     		str	r3, [sp, #4]
 197:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 351              		.loc 1 197 0
 352 0032 0023     		movs	r3, #0
 353 0034 0293     		str	r3, [sp, #8]
 198:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 354              		.loc 1 198 0
 355 0036 0233     		adds	r3, r3, #2
 356 0038 0393     		str	r3, [sp, #12]
 199:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 357              		.loc 1 199 0
 358 003a 0133     		adds	r3, r3, #1
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 11


 359 003c 0493     		str	r3, [sp, #16]
 200:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   }
 360              		.loc 1 200 0
 361 003e 8200     		lsls	r2, r0, #2
 362 0040 114B     		ldr	r3, .L24+4
 363 0042 9B18     		adds	r3, r3, r2
 364 0044 1869     		ldr	r0, [r3, #16]
 365              	.LVL17:
 366 0046 01A9     		add	r1, sp, #4
 367 0048 FFF7FEFF 		bl	HAL_GPIO_Init
 368              	.LVL18:
 369 004c EBE7     		b	.L20
 370              	.L23:
 206:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 371              		.loc 1 206 0
 372 004e 0423     		movs	r3, #4
 373 0050 0193     		str	r3, [sp, #4]
 207:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 374              		.loc 1 207 0
 375 0052 0023     		movs	r3, #0
 376 0054 0393     		str	r3, [sp, #12]
 208:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 377              		.loc 1 208 0
 378 0056 0D4B     		ldr	r3, .L24+8
 379 0058 0293     		str	r3, [sp, #8]
 209:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****     
 380              		.loc 1 209 0
 381 005a A400     		lsls	r4, r4, #2
 382 005c 0A4B     		ldr	r3, .L24+4
 383 005e 1C19     		adds	r4, r3, r4
 384 0060 2069     		ldr	r0, [r4, #16]
 385 0062 01A9     		add	r1, sp, #4
 386 0064 FFF7FEFF 		bl	HAL_GPIO_Init
 387              	.LVL19:
 388              	.LBB10:
 389              	.LBB11:
 390              		.file 2 "Drivers/CMSIS/Include/core_cm0plus.h"
   1:Drivers/CMSIS/Include/core_cm0plus.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:Drivers/CMSIS/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0plus.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0plus.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0plus.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0plus.h **** 
   9:Drivers/CMSIS/Include/core_cm0plus.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0plus.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0plus.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0plus.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0plus.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0plus.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0plus.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0plus.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0plus.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0plus.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0plus.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0plus.h ****    *
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 12


  21:Drivers/CMSIS/Include/core_cm0plus.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0plus.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0plus.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0plus.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0plus.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0plus.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0plus.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0plus.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0plus.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0plus.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0plus.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0plus.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0plus.h **** 
  34:Drivers/CMSIS/Include/core_cm0plus.h **** 
  35:Drivers/CMSIS/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0plus.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0plus.h **** 
  41:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0plus.h **** 
  44:Drivers/CMSIS/Include/core_cm0plus.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0plus.h **** 
  46:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0plus.h **** 
  50:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  51:Drivers/CMSIS/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0plus.h **** 
  54:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0plus.h **** 
  57:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0plus.h **** 
  60:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  63:Drivers/CMSIS/Include/core_cm0plus.h **** 
  64:Drivers/CMSIS/Include/core_cm0plus.h **** 
  65:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  69:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
  70:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  72:Drivers/CMSIS/Include/core_cm0plus.h **** 
  73:Drivers/CMSIS/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  74:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (0x04U)                                   /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (0x1EU)                                   /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           ) /*!< CMSIS HAL versi
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 13


  78:Drivers/CMSIS/Include/core_cm0plus.h **** 
  79:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0plus.h **** 
  81:Drivers/CMSIS/Include/core_cm0plus.h **** 
  82:Drivers/CMSIS/Include/core_cm0plus.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0plus.h **** 
  87:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0plus.h **** 
  92:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0plus.h **** 
  97:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0plus.h **** 
 102:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0plus.h **** 
 106:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0plus.h **** 
 111:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0plus.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0plus.h **** 
 117:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 118:Drivers/CMSIS/Include/core_cm0plus.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0plus.h **** 
 121:Drivers/CMSIS/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0plus.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0plus.h **** */
 124:Drivers/CMSIS/Include/core_cm0plus.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0plus.h **** 
 126:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0plus.h **** 
 131:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 14


 135:Drivers/CMSIS/Include/core_cm0plus.h **** 
 136:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0plus.h **** 
 141:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0plus.h **** 
 146:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0plus.h **** 
 151:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0plus.h **** 
 156:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0plus.h **** 
 161:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0plus.h **** 
 163:Drivers/CMSIS/Include/core_cm0plus.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0plus.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0plus.h **** 
 166:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0plus.h **** }
 168:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0plus.h **** 
 170:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0plus.h **** 
 172:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0plus.h **** 
 174:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0plus.h **** 
 177:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0plus.h **** 
 181:Drivers/CMSIS/Include/core_cm0plus.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 184:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 185:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0plus.h **** 
 188:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 189:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 190:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 15


 192:Drivers/CMSIS/Include/core_cm0plus.h **** 
 193:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 194:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 195:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0plus.h **** 
 198:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 199:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 200:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 201:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 202:Drivers/CMSIS/Include/core_cm0plus.h **** 
 203:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 204:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 205:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 206:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 207:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 208:Drivers/CMSIS/Include/core_cm0plus.h **** 
 209:Drivers/CMSIS/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 210:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 211:Drivers/CMSIS/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 212:Drivers/CMSIS/Include/core_cm0plus.h **** 
 213:Drivers/CMSIS/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 214:Drivers/CMSIS/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 215:Drivers/CMSIS/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 216:Drivers/CMSIS/Include/core_cm0plus.h **** */
 217:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 218:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 219:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 220:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 221:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 222:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 223:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 224:Drivers/CMSIS/Include/core_cm0plus.h **** 
 225:Drivers/CMSIS/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 226:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 227:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 228:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 229:Drivers/CMSIS/Include/core_cm0plus.h **** 
 230:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 231:Drivers/CMSIS/Include/core_cm0plus.h **** 
 232:Drivers/CMSIS/Include/core_cm0plus.h **** 
 233:Drivers/CMSIS/Include/core_cm0plus.h **** 
 234:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 235:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 Register Abstraction
 236:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Register contain:
 237:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register
 238:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Register
 239:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SCB Register
 240:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Register
 241:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core MPU Register
 242:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 243:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 244:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 245:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 246:Drivers/CMSIS/Include/core_cm0plus.h **** */
 247:Drivers/CMSIS/Include/core_cm0plus.h **** 
 248:Drivers/CMSIS/Include/core_cm0plus.h **** /**
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 16


 249:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 250:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 251:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
 252:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 253:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 254:Drivers/CMSIS/Include/core_cm0plus.h **** 
 255:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 256:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 257:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 258:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 259:Drivers/CMSIS/Include/core_cm0plus.h **** {
 260:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 261:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 262:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 263:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 264:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 265:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 266:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 267:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 268:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 269:Drivers/CMSIS/Include/core_cm0plus.h **** } APSR_Type;
 270:Drivers/CMSIS/Include/core_cm0plus.h **** 
 271:Drivers/CMSIS/Include/core_cm0plus.h **** /* APSR Register Definitions */
 272:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 273:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 274:Drivers/CMSIS/Include/core_cm0plus.h **** 
 275:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 276:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 277:Drivers/CMSIS/Include/core_cm0plus.h **** 
 278:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 279:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 280:Drivers/CMSIS/Include/core_cm0plus.h **** 
 281:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 282:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 283:Drivers/CMSIS/Include/core_cm0plus.h **** 
 284:Drivers/CMSIS/Include/core_cm0plus.h **** 
 285:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 286:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 287:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 288:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 289:Drivers/CMSIS/Include/core_cm0plus.h **** {
 290:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 291:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 292:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 293:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 294:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 295:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 296:Drivers/CMSIS/Include/core_cm0plus.h **** } IPSR_Type;
 297:Drivers/CMSIS/Include/core_cm0plus.h **** 
 298:Drivers/CMSIS/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 299:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 300:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 301:Drivers/CMSIS/Include/core_cm0plus.h **** 
 302:Drivers/CMSIS/Include/core_cm0plus.h **** 
 303:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 304:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 305:Drivers/CMSIS/Include/core_cm0plus.h ****  */
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 17


 306:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 307:Drivers/CMSIS/Include/core_cm0plus.h **** {
 308:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 309:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 310:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 311:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 312:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 313:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 314:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 315:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 316:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 317:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 318:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 319:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 320:Drivers/CMSIS/Include/core_cm0plus.h **** } xPSR_Type;
 321:Drivers/CMSIS/Include/core_cm0plus.h **** 
 322:Drivers/CMSIS/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 323:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 324:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0plus.h **** 
 326:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 327:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0plus.h **** 
 329:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 330:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 331:Drivers/CMSIS/Include/core_cm0plus.h **** 
 332:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 333:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 334:Drivers/CMSIS/Include/core_cm0plus.h **** 
 335:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 336:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 337:Drivers/CMSIS/Include/core_cm0plus.h **** 
 338:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 339:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 340:Drivers/CMSIS/Include/core_cm0plus.h **** 
 341:Drivers/CMSIS/Include/core_cm0plus.h **** 
 342:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 343:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 344:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 345:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 346:Drivers/CMSIS/Include/core_cm0plus.h **** {
 347:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 348:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 349:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 350:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 351:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 352:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 353:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 354:Drivers/CMSIS/Include/core_cm0plus.h **** } CONTROL_Type;
 355:Drivers/CMSIS/Include/core_cm0plus.h **** 
 356:Drivers/CMSIS/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 357:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 358:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 359:Drivers/CMSIS/Include/core_cm0plus.h **** 
 360:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 361:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 362:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 18


 363:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 364:Drivers/CMSIS/Include/core_cm0plus.h **** 
 365:Drivers/CMSIS/Include/core_cm0plus.h **** 
 366:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 367:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 368:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 369:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 370:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 371:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 372:Drivers/CMSIS/Include/core_cm0plus.h **** 
 373:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 374:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 375:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 376:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 377:Drivers/CMSIS/Include/core_cm0plus.h **** {
 378:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 379:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 380:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 381:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RSERVED1[31U];
 382:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 383:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 384:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 385:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 386:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 387:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 388:Drivers/CMSIS/Include/core_cm0plus.h **** }  NVIC_Type;
 389:Drivers/CMSIS/Include/core_cm0plus.h **** 
 390:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 391:Drivers/CMSIS/Include/core_cm0plus.h **** 
 392:Drivers/CMSIS/Include/core_cm0plus.h **** 
 393:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 394:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 395:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 396:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 397:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 398:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 399:Drivers/CMSIS/Include/core_cm0plus.h **** 
 400:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 401:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 402:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 403:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 404:Drivers/CMSIS/Include/core_cm0plus.h **** {
 405:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 406:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 407:Drivers/CMSIS/Include/core_cm0plus.h **** #if (__VTOR_PRESENT == 1U)
 408:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 409:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 410:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 411:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 412:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 413:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 414:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 415:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 416:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 417:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 418:Drivers/CMSIS/Include/core_cm0plus.h **** } SCB_Type;
 419:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 19


 420:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 421:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0plus.h **** 
 424:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 425:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0plus.h **** 
 427:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 428:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0plus.h **** 
 430:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 431:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0plus.h **** 
 433:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0plus.h **** 
 436:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 437:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0plus.h **** 
 440:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0plus.h **** 
 443:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0plus.h **** 
 446:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 447:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0plus.h **** 
 449:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0plus.h **** 
 452:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0plus.h **** 
 455:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 456:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0plus.h **** 
 458:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 459:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0plus.h **** 
 461:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 462:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 463:Drivers/CMSIS/Include/core_cm0plus.h **** 
 464:Drivers/CMSIS/Include/core_cm0plus.h **** #if (__VTOR_PRESENT == 1U)
 465:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 466:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 469:Drivers/CMSIS/Include/core_cm0plus.h **** 
 470:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 471:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 472:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 473:Drivers/CMSIS/Include/core_cm0plus.h **** 
 474:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 476:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 20


 477:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 479:Drivers/CMSIS/Include/core_cm0plus.h **** 
 480:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0plus.h **** 
 483:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 484:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 485:Drivers/CMSIS/Include/core_cm0plus.h **** 
 486:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 487:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 488:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 489:Drivers/CMSIS/Include/core_cm0plus.h **** 
 490:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 491:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 492:Drivers/CMSIS/Include/core_cm0plus.h **** 
 493:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 494:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 495:Drivers/CMSIS/Include/core_cm0plus.h **** 
 496:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 497:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 498:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 499:Drivers/CMSIS/Include/core_cm0plus.h **** 
 500:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 501:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 502:Drivers/CMSIS/Include/core_cm0plus.h **** 
 503:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 504:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 505:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 506:Drivers/CMSIS/Include/core_cm0plus.h **** 
 507:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 508:Drivers/CMSIS/Include/core_cm0plus.h **** 
 509:Drivers/CMSIS/Include/core_cm0plus.h **** 
 510:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 511:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 512:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 513:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 514:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 515:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 516:Drivers/CMSIS/Include/core_cm0plus.h **** 
 517:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 518:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 519:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 520:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 521:Drivers/CMSIS/Include/core_cm0plus.h **** {
 522:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 523:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 524:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 525:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 526:Drivers/CMSIS/Include/core_cm0plus.h **** } SysTick_Type;
 527:Drivers/CMSIS/Include/core_cm0plus.h **** 
 528:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 529:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0plus.h **** 
 532:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 21


 534:Drivers/CMSIS/Include/core_cm0plus.h **** 
 535:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 536:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 537:Drivers/CMSIS/Include/core_cm0plus.h **** 
 538:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 539:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 540:Drivers/CMSIS/Include/core_cm0plus.h **** 
 541:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 542:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 543:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 544:Drivers/CMSIS/Include/core_cm0plus.h **** 
 545:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 546:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 547:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 548:Drivers/CMSIS/Include/core_cm0plus.h **** 
 549:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 550:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 551:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 552:Drivers/CMSIS/Include/core_cm0plus.h **** 
 553:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 554:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 555:Drivers/CMSIS/Include/core_cm0plus.h **** 
 556:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 557:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 558:Drivers/CMSIS/Include/core_cm0plus.h **** 
 559:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 560:Drivers/CMSIS/Include/core_cm0plus.h **** 
 561:Drivers/CMSIS/Include/core_cm0plus.h **** #if (__MPU_PRESENT == 1U)
 562:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 563:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 564:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 565:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 566:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 568:Drivers/CMSIS/Include/core_cm0plus.h **** 
 569:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 570:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 571:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 572:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 573:Drivers/CMSIS/Include/core_cm0plus.h **** {
 574:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 575:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 576:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 577:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 578:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 579:Drivers/CMSIS/Include/core_cm0plus.h **** } MPU_Type;
 580:Drivers/CMSIS/Include/core_cm0plus.h **** 
 581:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 582:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 583:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 584:Drivers/CMSIS/Include/core_cm0plus.h **** 
 585:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 586:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 587:Drivers/CMSIS/Include/core_cm0plus.h **** 
 588:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 589:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 590:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 22


 591:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
 592:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 593:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 594:Drivers/CMSIS/Include/core_cm0plus.h **** 
 595:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 596:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 597:Drivers/CMSIS/Include/core_cm0plus.h **** 
 598:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 599:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 600:Drivers/CMSIS/Include/core_cm0plus.h **** 
 601:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 602:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 603:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 604:Drivers/CMSIS/Include/core_cm0plus.h **** 
 605:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 606:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 607:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 608:Drivers/CMSIS/Include/core_cm0plus.h **** 
 609:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 610:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 611:Drivers/CMSIS/Include/core_cm0plus.h **** 
 612:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 613:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 614:Drivers/CMSIS/Include/core_cm0plus.h **** 
 615:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 616:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 617:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 618:Drivers/CMSIS/Include/core_cm0plus.h **** 
 619:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 620:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 621:Drivers/CMSIS/Include/core_cm0plus.h **** 
 622:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 623:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 624:Drivers/CMSIS/Include/core_cm0plus.h **** 
 625:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 626:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 627:Drivers/CMSIS/Include/core_cm0plus.h **** 
 628:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 629:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 630:Drivers/CMSIS/Include/core_cm0plus.h **** 
 631:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 632:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 633:Drivers/CMSIS/Include/core_cm0plus.h **** 
 634:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 635:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 636:Drivers/CMSIS/Include/core_cm0plus.h **** 
 637:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 638:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 639:Drivers/CMSIS/Include/core_cm0plus.h **** 
 640:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 641:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 642:Drivers/CMSIS/Include/core_cm0plus.h **** 
 643:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 644:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 645:Drivers/CMSIS/Include/core_cm0plus.h **** 
 646:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 647:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 23


 648:Drivers/CMSIS/Include/core_cm0plus.h **** 
 649:Drivers/CMSIS/Include/core_cm0plus.h **** 
 650:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 651:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 652:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 653:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 654:Drivers/CMSIS/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 655:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 656:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 657:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 658:Drivers/CMSIS/Include/core_cm0plus.h **** 
 659:Drivers/CMSIS/Include/core_cm0plus.h **** 
 660:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 661:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 662:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 663:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 664:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 665:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 666:Drivers/CMSIS/Include/core_cm0plus.h **** 
 667:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 668:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 669:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 670:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field.
 671:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 672:Drivers/CMSIS/Include/core_cm0plus.h **** */
 673:Drivers/CMSIS/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 674:Drivers/CMSIS/Include/core_cm0plus.h **** 
 675:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 676:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 677:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 678:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of register.
 679:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 680:Drivers/CMSIS/Include/core_cm0plus.h **** */
 681:Drivers/CMSIS/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 682:Drivers/CMSIS/Include/core_cm0plus.h **** 
 683:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 684:Drivers/CMSIS/Include/core_cm0plus.h **** 
 685:Drivers/CMSIS/Include/core_cm0plus.h **** 
 686:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 687:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 688:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 689:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 690:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 691:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 692:Drivers/CMSIS/Include/core_cm0plus.h **** 
 693:Drivers/CMSIS/Include/core_cm0plus.h **** /* Memory mapping of Cortex-M0+ Hardware */
 694:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 695:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 696:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 697:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 698:Drivers/CMSIS/Include/core_cm0plus.h **** 
 699:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 700:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 701:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 702:Drivers/CMSIS/Include/core_cm0plus.h **** 
 703:Drivers/CMSIS/Include/core_cm0plus.h **** #if (__MPU_PRESENT == 1U)
 704:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 24


 705:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 706:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 707:Drivers/CMSIS/Include/core_cm0plus.h **** 
 708:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} */
 709:Drivers/CMSIS/Include/core_cm0plus.h **** 
 710:Drivers/CMSIS/Include/core_cm0plus.h **** 
 711:Drivers/CMSIS/Include/core_cm0plus.h **** 
 712:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 713:Drivers/CMSIS/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 714:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Function Interface contains:
 715:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Functions
 716:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Functions
 717:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register Access Functions
 718:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 719:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 720:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 721:Drivers/CMSIS/Include/core_cm0plus.h **** */
 722:Drivers/CMSIS/Include/core_cm0plus.h **** 
 723:Drivers/CMSIS/Include/core_cm0plus.h **** 
 724:Drivers/CMSIS/Include/core_cm0plus.h **** 
 725:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 726:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 727:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 728:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 729:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 730:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 731:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 732:Drivers/CMSIS/Include/core_cm0plus.h **** 
 733:Drivers/CMSIS/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 734:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 735:Drivers/CMSIS/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 736:Drivers/CMSIS/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 737:Drivers/CMSIS/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 738:Drivers/CMSIS/Include/core_cm0plus.h **** 
 739:Drivers/CMSIS/Include/core_cm0plus.h **** 
 740:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 741:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Enable External Interrupt
 742:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 744:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 745:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 746:Drivers/CMSIS/Include/core_cm0plus.h **** {
 747:Drivers/CMSIS/Include/core_cm0plus.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 748:Drivers/CMSIS/Include/core_cm0plus.h **** }
 749:Drivers/CMSIS/Include/core_cm0plus.h **** 
 750:Drivers/CMSIS/Include/core_cm0plus.h **** 
 751:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 752:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Disable External Interrupt
 753:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 754:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 755:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 756:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 757:Drivers/CMSIS/Include/core_cm0plus.h **** {
 758:Drivers/CMSIS/Include/core_cm0plus.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 759:Drivers/CMSIS/Include/core_cm0plus.h **** }
 760:Drivers/CMSIS/Include/core_cm0plus.h **** 
 761:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 25


 762:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 763:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Pending Interrupt
 764:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 765:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 766:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 767:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 768:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 769:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 770:Drivers/CMSIS/Include/core_cm0plus.h **** {
 771:Drivers/CMSIS/Include/core_cm0plus.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 772:Drivers/CMSIS/Include/core_cm0plus.h **** }
 773:Drivers/CMSIS/Include/core_cm0plus.h **** 
 774:Drivers/CMSIS/Include/core_cm0plus.h **** 
 775:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 776:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Pending Interrupt
 777:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the pending bit of an external interrupt.
 778:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 779:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 780:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 781:Drivers/CMSIS/Include/core_cm0plus.h **** {
 782:Drivers/CMSIS/Include/core_cm0plus.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 783:Drivers/CMSIS/Include/core_cm0plus.h **** }
 784:Drivers/CMSIS/Include/core_cm0plus.h **** 
 785:Drivers/CMSIS/Include/core_cm0plus.h **** 
 786:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 787:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 788:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Clears the pending bit of an external interrupt.
 789:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 790:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 791:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 792:Drivers/CMSIS/Include/core_cm0plus.h **** {
 793:Drivers/CMSIS/Include/core_cm0plus.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 794:Drivers/CMSIS/Include/core_cm0plus.h **** }
 795:Drivers/CMSIS/Include/core_cm0plus.h **** 
 796:Drivers/CMSIS/Include/core_cm0plus.h **** 
 797:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 798:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Priority
 799:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the priority of an interrupt.
 800:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    The priority cannot be set for every core interrupt.
 801:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 803:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 804:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 805:Drivers/CMSIS/Include/core_cm0plus.h **** {
 806:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) < 0)
 807:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 808:Drivers/CMSIS/Include/core_cm0plus.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 809:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 810:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 811:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 812:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 813:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 391              		.loc 2 813 0
 392 0068 0948     		ldr	r0, .L24+12
 393 006a C121     		movs	r1, #193
 394 006c 8900     		lsls	r1, r1, #2
 395 006e 4358     		ldr	r3, [r0, r1]
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 26


 396 0070 084A     		ldr	r2, .L24+16
 397 0072 1A40     		ands	r2, r3
 398 0074 C023     		movs	r3, #192
 399 0076 1B04     		lsls	r3, r3, #16
 400 0078 1343     		orrs	r3, r2
 401 007a 4350     		str	r3, [r0, r1]
 402              	.LVL20:
 403              	.LBE11:
 404              	.LBE10:
 213:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   }
 405              		.loc 1 213 0
 406 007c 0620     		movs	r0, #6
 407 007e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 408              	.LVL21:
 409              		.loc 1 215 0
 410 0082 D2E7     		b	.L19
 411              	.L25:
 412              		.align	2
 413              	.L24:
 414 0084 00100240 		.word	1073876992
 415 0088 00000000 		.word	.LANCHOR1
 416 008c 00001110 		.word	269549568
 417 0090 00E100E0 		.word	-536813312
 418 0094 FFFF00FF 		.word	-16711681
 419              		.cfi_endproc
 420              	.LFE44:
 422              		.section	.text.BSP_PB_GetState,"ax",%progbits
 423              		.align	1
 424              		.global	BSP_PB_GetState
 425              		.syntax unified
 426              		.code	16
 427              		.thumb_func
 428              		.fpu softvfp
 430              	BSP_PB_GetState:
 431              	.LFB45:
 216:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** 
 217:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** /**
 218:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @brief  Returns the selected Button state.
 219:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @param  Button: Specifies the Button to be checked.
 220:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   *   This parameter should be: BUTTON_KEY
 221:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   * @retval The Button GPIO pin value.
 222:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   */
 223:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** uint32_t BSP_PB_GetState(Button_TypeDef Button)
 224:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** {
 432              		.loc 1 224 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 0
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 436              	.LVL22:
 437 0000 10B5     		push	{r4, lr}
 438              	.LCFI7:
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 4, -8
 441              		.cfi_offset 14, -4
 225:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c ****   return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 442              		.loc 1 225 0
 443 0002 8300     		lsls	r3, r0, #2
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 27


 444 0004 0348     		ldr	r0, .L27
 445              	.LVL23:
 446 0006 C018     		adds	r0, r0, r3
 447 0008 0069     		ldr	r0, [r0, #16]
 448 000a 0421     		movs	r1, #4
 449 000c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 450              	.LVL24:
 226:Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.c **** }
 451              		.loc 1 226 0
 452              		@ sp needed
 453 0010 10BD     		pop	{r4, pc}
 454              	.L28:
 455 0012 C046     		.align	2
 456              	.L27:
 457 0014 00000000 		.word	.LANCHOR1
 458              		.cfi_endproc
 459              	.LFE45:
 461              		.global	BUTTON_IRQn
 462              		.global	BUTTON_PIN
 463              		.global	BUTTON_PORT
 464              		.global	LED_PIN
 465              		.global	LED_PORT
 466              		.section	.rodata
 467              		.align	2
 468              		.set	.LANCHOR0,. + 0
 471              	LED_PIN:
 472 0000 2000     		.short	32
 473 0002 2000     		.short	32
 474 0004 4000     		.short	64
 475 0006 8000     		.short	128
 478              	BUTTON_IRQn:
 479 0008 06       		.byte	6
 480 0009 000000   		.space	3
 483              	BUTTON_PIN:
 484 000c 0400     		.short	4
 485              		.data
 486              		.align	2
 487              		.set	.LANCHOR1,. + 0
 490              	LED_PORT:
 491 0000 00040050 		.word	1342178304
 492 0004 00000050 		.word	1342177280
 493 0008 00040050 		.word	1342178304
 494 000c 00040050 		.word	1342178304
 497              	BUTTON_PORT:
 498 0010 00040050 		.word	1342178304
 499              		.text
 500              	.Letext0:
 501              		.file 3 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l072xx.h"
 502              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 503              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 504              		.file 6 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 505              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 506              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 507              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 508              		.file 10 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 509              		.file 11 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h"
 510              		.file 12 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdlib.h"
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 28


 511              		.file 13 "Drivers/BSP/B-L072Z-LRWAN1/b-l072z-lrwan1.h"
 512              		.file 14 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_cortex.h"
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 b-l072z-lrwan1.c
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:16     .text.BSP_GetVersion:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:23     .text.BSP_GetVersion:0000000000000000 BSP_GetVersion
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:41     .text.BSP_LED_Init:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:48     .text.BSP_LED_Init:0000000000000000 BSP_LED_Init
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:158    .text.BSP_LED_Init:0000000000000088 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:165    .text.BSP_LED_On:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:172    .text.BSP_LED_On:0000000000000000 BSP_LED_On
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:201    .text.BSP_LED_On:0000000000000018 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:207    .text.BSP_LED_Off:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:214    .text.BSP_LED_Off:0000000000000000 BSP_LED_Off
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:243    .text.BSP_LED_Off:0000000000000018 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:249    .text.BSP_LED_Toggle:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:256    .text.BSP_LED_Toggle:0000000000000000 BSP_LED_Toggle
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:284    .text.BSP_LED_Toggle:0000000000000014 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:290    .text.BSP_PB_Init:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:297    .text.BSP_PB_Init:0000000000000000 BSP_PB_Init
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:414    .text.BSP_PB_Init:0000000000000084 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:423    .text.BSP_PB_GetState:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:430    .text.BSP_PB_GetState:0000000000000000 BSP_PB_GetState
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:457    .text.BSP_PB_GetState:0000000000000014 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:478    .rodata:0000000000000008 BUTTON_IRQn
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:483    .rodata:000000000000000c BUTTON_PIN
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:497    .data:0000000000000010 BUTTON_PORT
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:471    .rodata:0000000000000000 LED_PIN
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:490    .data:0000000000000000 LED_PORT
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:467    .rodata:0000000000000000 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//cc6PL2gH.s:486    .data:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_GPIO_WritePin
HAL_GPIO_TogglePin
HAL_NVIC_EnableIRQ
HAL_GPIO_ReadPin
