ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"vcom.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.vcom_Init,"ax",%progbits
  16              		.align	1
  17              		.global	vcom_Init
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	vcom_Init:
  24              	.LFB40:
  25              		.file 1 "Src/vcom.c"
   1:Src/vcom.c    ****  /******************************************************************************
   2:Src/vcom.c    ****   * @file    vcom.c
   3:Src/vcom.c    ****   * @author  MCD Application Team
   4:Src/vcom.c    ****   * @version V1.1.5
   5:Src/vcom.c    ****   * @date    30-March-2018
   6:Src/vcom.c    ****   * @brief   manages virtual com port
   7:Src/vcom.c    ****   ******************************************************************************
   8:Src/vcom.c    ****   * @attention
   9:Src/vcom.c    ****   *
  10:Src/vcom.c    ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics International N.V. 
  11:Src/vcom.c    ****   * All rights reserved.</center></h2>
  12:Src/vcom.c    ****   *
  13:Src/vcom.c    ****   * Redistribution and use in source and binary forms, with or without 
  14:Src/vcom.c    ****   * modification, are permitted, provided that the following conditions are met:
  15:Src/vcom.c    ****   *
  16:Src/vcom.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  17:Src/vcom.c    ****   *    this list of conditions and the following disclaimer.
  18:Src/vcom.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/vcom.c    ****   *    this list of conditions and the following disclaimer in the documentation
  20:Src/vcom.c    ****   *    and/or other materials provided with the distribution.
  21:Src/vcom.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  22:Src/vcom.c    ****   *    contributors to this software may be used to endorse or promote products 
  23:Src/vcom.c    ****   *    derived from this software without specific written permission.
  24:Src/vcom.c    ****   * 4. This software, including modifications and/or derivative works of this 
  25:Src/vcom.c    ****   *    software, must execute solely and exclusively on microcontroller or
  26:Src/vcom.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  27:Src/vcom.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  28:Src/vcom.c    ****   *    this license is void and will automatically terminate your rights under 
  29:Src/vcom.c    ****   *    this license. 
  30:Src/vcom.c    ****   *
  31:Src/vcom.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  32:Src/vcom.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  33:Src/vcom.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 2


  34:Src/vcom.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  35:Src/vcom.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  36:Src/vcom.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  37:Src/vcom.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  38:Src/vcom.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  39:Src/vcom.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  40:Src/vcom.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  41:Src/vcom.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  42:Src/vcom.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  43:Src/vcom.c    ****   *
  44:Src/vcom.c    ****   ******************************************************************************
  45:Src/vcom.c    ****   */
  46:Src/vcom.c    ****   
  47:Src/vcom.c    **** #include "hw.h"
  48:Src/vcom.c    **** #include "vcom.h"
  49:Src/vcom.c    **** #include <stdarg.h>
  50:Src/vcom.c    **** 
  51:Src/vcom.c    **** 
  52:Src/vcom.c    **** /* Private typedef -----------------------------------------------------------*/
  53:Src/vcom.c    **** /* Private define ------------------------------------------------------------*/
  54:Src/vcom.c    **** #define BUFSIZE 256
  55:Src/vcom.c    **** #define USARTX_IRQn USART2_IRQn
  56:Src/vcom.c    **** /* Private macro -------------------------------------------------------------*/
  57:Src/vcom.c    **** /* Private variables ---------------------------------------------------------*/
  58:Src/vcom.c    **** 
  59:Src/vcom.c    **** /* buffer */
  60:Src/vcom.c    **** static char buff[BUFSIZE];
  61:Src/vcom.c    **** /* buffer write index*/
  62:Src/vcom.c    **** __IO uint16_t iw=0;
  63:Src/vcom.c    **** /* buffer read index*/
  64:Src/vcom.c    **** static uint16_t ir=0;
  65:Src/vcom.c    **** /* Uart Handle */
  66:Src/vcom.c    **** static UART_HandleTypeDef UartHandle;
  67:Src/vcom.c    **** 
  68:Src/vcom.c    **** /* Private function prototypes -----------------------------------------------*/
  69:Src/vcom.c    **** /* Functions Definition ------------------------------------------------------*/
  70:Src/vcom.c    **** 
  71:Src/vcom.c    **** void vcom_Init(void)
  72:Src/vcom.c    **** {
  26              		.loc 1 72 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  73:Src/vcom.c    ****   /*## Configure the UART peripheral ######################################*/
  74:Src/vcom.c    ****   /* Put the USART peripheral in the Asynchronous mode (UART Mode) */
  75:Src/vcom.c    ****   /* UART1 configured as follow:
  76:Src/vcom.c    ****       - Word Length = 8 Bits
  77:Src/vcom.c    ****       - Stop Bit = One Stop bit
  78:Src/vcom.c    ****       - Parity = ODD parity
  79:Src/vcom.c    ****       - BaudRate = 921600 baud
  80:Src/vcom.c    ****       - Hardware flow control disabled (RTS and CTS signals) */
  81:Src/vcom.c    ****   UartHandle.Instance        = USARTX;
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 3


  35              		.loc 1 81 0
  36 0002 0E48     		ldr	r0, .L4
  37 0004 0E4B     		ldr	r3, .L4+4
  38 0006 0360     		str	r3, [r0]
  82:Src/vcom.c    ****   
  83:Src/vcom.c    ****   UartHandle.Init.BaudRate   = 115200;
  39              		.loc 1 83 0
  40 0008 E123     		movs	r3, #225
  41 000a 5B02     		lsls	r3, r3, #9
  42 000c 4360     		str	r3, [r0, #4]
  84:Src/vcom.c    ****   UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
  43              		.loc 1 84 0
  44 000e 0023     		movs	r3, #0
  45 0010 8360     		str	r3, [r0, #8]
  85:Src/vcom.c    ****   UartHandle.Init.StopBits   = UART_STOPBITS_1;
  46              		.loc 1 85 0
  47 0012 C360     		str	r3, [r0, #12]
  86:Src/vcom.c    ****   UartHandle.Init.Parity     = UART_PARITY_NONE;
  48              		.loc 1 86 0
  49 0014 0361     		str	r3, [r0, #16]
  87:Src/vcom.c    ****   UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
  50              		.loc 1 87 0
  51 0016 8361     		str	r3, [r0, #24]
  88:Src/vcom.c    ****   UartHandle.Init.Mode       = UART_MODE_TX_RX;
  52              		.loc 1 88 0
  53 0018 0C33     		adds	r3, r3, #12
  54 001a 4361     		str	r3, [r0, #20]
  89:Src/vcom.c    ****   
  90:Src/vcom.c    ****   if(HAL_UART_Init(&UartHandle) != HAL_OK)
  55              		.loc 1 90 0
  56 001c FFF7FEFF 		bl	HAL_UART_Init
  57              	.LVL0:
  58 0020 0028     		cmp	r0, #0
  59 0022 08D1     		bne	.L3
  60              	.L2:
  91:Src/vcom.c    ****   {
  92:Src/vcom.c    ****     /* Initialization Error */
  93:Src/vcom.c    ****     Error_Handler(); 
  94:Src/vcom.c    ****   }
  95:Src/vcom.c    ****   
  96:Src/vcom.c    ****   HAL_NVIC_SetPriority(USARTX_IRQn, 0x1, 0);
  61              		.loc 1 96 0
  62 0024 0022     		movs	r2, #0
  63 0026 0121     		movs	r1, #1
  64 0028 1C20     		movs	r0, #28
  65 002a FFF7FEFF 		bl	HAL_NVIC_SetPriority
  66              	.LVL1:
  97:Src/vcom.c    ****   HAL_NVIC_EnableIRQ(USARTX_IRQn);
  67              		.loc 1 97 0
  68 002e 1C20     		movs	r0, #28
  69 0030 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  70              	.LVL2:
  98:Src/vcom.c    **** }
  71              		.loc 1 98 0
  72              		@ sp needed
  73 0034 10BD     		pop	{r4, pc}
  74              	.L3:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 4


  93:Src/vcom.c    ****   }
  75              		.loc 1 93 0
  76 0036 FFF7FEFF 		bl	Error_Handler
  77              	.LVL3:
  78 003a F3E7     		b	.L2
  79              	.L5:
  80              		.align	2
  81              	.L4:
  82 003c 00000000 		.word	.LANCHOR0
  83 0040 00440040 		.word	1073759232
  84              		.cfi_endproc
  85              	.LFE40:
  87              		.section	.text.vcom_DeInit,"ax",%progbits
  88              		.align	1
  89              		.global	vcom_DeInit
  90              		.syntax unified
  91              		.code	16
  92              		.thumb_func
  93              		.fpu softvfp
  95              	vcom_DeInit:
  96              	.LFB41:
  99:Src/vcom.c    **** 
 100:Src/vcom.c    **** 
 101:Src/vcom.c    **** void vcom_DeInit(void)
 102:Src/vcom.c    **** {
  97              		.loc 1 102 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101 0000 10B5     		push	{r4, lr}
 102              	.LCFI1:
 103              		.cfi_def_cfa_offset 8
 104              		.cfi_offset 4, -8
 105              		.cfi_offset 14, -4
 103:Src/vcom.c    **** #if 1
 104:Src/vcom.c    ****   HAL_UART_DeInit(&UartHandle);
 106              		.loc 1 104 0
 107 0002 0248     		ldr	r0, .L7
 108 0004 FFF7FEFF 		bl	HAL_UART_DeInit
 109              	.LVL4:
 105:Src/vcom.c    **** #endif
 106:Src/vcom.c    **** }
 110              		.loc 1 106 0
 111              		@ sp needed
 112 0008 10BD     		pop	{r4, pc}
 113              	.L8:
 114 000a C046     		.align	2
 115              	.L7:
 116 000c 00000000 		.word	.LANCHOR0
 117              		.cfi_endproc
 118              	.LFE41:
 120              		.section	.text.vcom_Send,"ax",%progbits
 121              		.align	1
 122              		.global	vcom_Send
 123              		.syntax unified
 124              		.code	16
 125              		.thumb_func
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 5


 126              		.fpu softvfp
 128              	vcom_Send:
 129              	.LFB42:
 107:Src/vcom.c    **** 
 108:Src/vcom.c    **** void vcom_Send( char *format, ... )
 109:Src/vcom.c    **** {
 130              		.loc 1 109 0
 131              		.cfi_startproc
 132              		@ args = 4, pretend = 16, frame = 136
 133              		@ frame_needed = 0, uses_anonymous_args = 1
 134              	.LVL5:
 135 0000 0FB4     		push	{r0, r1, r2, r3}
 136              	.LCFI2:
 137              		.cfi_def_cfa_offset 16
 138 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 139              	.LCFI3:
 140              		.cfi_def_cfa_offset 36
 141              		.cfi_offset 4, -36
 142              		.cfi_offset 5, -32
 143              		.cfi_offset 6, -28
 144              		.cfi_offset 7, -24
 145              		.cfi_offset 14, -20
 146 0004 D646     		mov	lr, r10
 147 0006 4F46     		mov	r7, r9
 148 0008 4646     		mov	r6, r8
 149 000a C0B5     		push	{r6, r7, lr}
 150              	.LCFI4:
 151              		.cfi_def_cfa_offset 48
 152              		.cfi_offset 8, -48
 153              		.cfi_offset 9, -44
 154              		.cfi_offset 10, -40
 155 000c A2B0     		sub	sp, sp, #136
 156              	.LCFI5:
 157              		.cfi_def_cfa_offset 184
 158 000e 2AAB     		add	r3, sp, #168
 159 0010 02CB     		ldmia	r3!, {r1}
 110:Src/vcom.c    ****   va_list args;
 111:Src/vcom.c    ****   va_start(args, format);
 160              		.loc 1 111 0
 161 0012 2193     		str	r3, [sp, #132]
 162              	.LBB21:
 163              	.LBB22:
 164              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 6


  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 7


  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 8


 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 9


 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 165              		.loc 2 203 0
 166              		.syntax divided
 167              	@ 203 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 168 0014 EFF31085 		MRS r5, primask
 169              	@ 0 "" 2
 170              		.thumb
 171              		.syntax unified
 172              	.LBE22:
 173              	.LBE21:
 174              	.LBB23:
 175              	.LBB24:
  71:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 176              		.loc 2 71 0
 177              		.syntax divided
 178              	@ 71 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 179 0018 72B6     		cpsid i
 180              	@ 0 "" 2
 181              		.thumb
 182              		.syntax unified
 183              	.LBE24:
 184              	.LBE23:
 112:Src/vcom.c    ****   uint8_t len;
 113:Src/vcom.c    ****   uint8_t lenTop;
 114:Src/vcom.c    ****   char tempBuff[128];
 115:Src/vcom.c    ****   
 116:Src/vcom.c    ****   BACKUP_PRIMASK();
 117:Src/vcom.c    ****   DISABLE_IRQ();
 118:Src/vcom.c    ****   
 119:Src/vcom.c    ****   /*convert into string at buff[0] of length iw*/
 120:Src/vcom.c    ****   len = vsprintf(&tempBuff[0], format, args);
 185              		.loc 1 120 0
 186 001a 219A     		ldr	r2, [sp, #132]
 187 001c 01A8     		add	r0, sp, #4
 188 001e FFF7FEFF 		bl	vsprintf
 189              	.LVL6:
 190 0022 C6B2     		uxtb	r6, r0
 191              	.LVL7:
 121:Src/vcom.c    ****   
 122:Src/vcom.c    ****   if (iw+len<BUFSIZE)
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 10


 192              		.loc 1 122 0
 193 0024 204A     		ldr	r2, .L13
 194 0026 7023     		movs	r3, #112
 195 0028 D35A     		ldrh	r3, [r2, r3]
 196 002a FF22     		movs	r2, #255
 197 002c 0240     		ands	r2, r0
 198 002e 9B18     		adds	r3, r3, r2
 199 0030 FF2B     		cmp	r3, #255
 200 0032 29DD     		ble	.L12
 123:Src/vcom.c    ****   {
 124:Src/vcom.c    ****     memcpy( &buff[iw], &tempBuff[0], len);
 125:Src/vcom.c    ****     iw+=len;
 126:Src/vcom.c    ****   }
 127:Src/vcom.c    ****   else
 128:Src/vcom.c    ****   {
 129:Src/vcom.c    ****     lenTop=BUFSIZE-iw;
 201              		.loc 1 129 0
 202 0034 1C4B     		ldr	r3, .L13
 203 0036 9846     		mov	r8, r3
 204 0038 7027     		movs	r7, #112
 205 003a DC5B     		ldrh	r4, [r3, r7]
 206 003c E4B2     		uxtb	r4, r4
 207 003e 6142     		rsbs	r1, r4, #0
 208 0040 CBB2     		uxtb	r3, r1
 209 0042 9A46     		mov	r10, r3
 210              	.LVL8:
 130:Src/vcom.c    ****     memcpy( &buff[iw], &tempBuff[0], lenTop);
 211              		.loc 1 130 0
 212 0044 4346     		mov	r3, r8
 213 0046 D85B     		ldrh	r0, [r3, r7]
 214 0048 184B     		ldr	r3, .L13+4
 215 004a 9946     		mov	r9, r3
 216 004c 4844     		add	r0, r0, r9
 217 004e 5246     		mov	r2, r10
 218 0050 01A9     		add	r1, sp, #4
 219 0052 FFF7FEFF 		bl	memcpy
 220              	.LVL9:
 131:Src/vcom.c    ****     len-=lenTop;
 221              		.loc 1 131 0
 222 0056 A419     		adds	r4, r4, r6
 223 0058 E4B2     		uxtb	r4, r4
 224              	.LVL10:
 132:Src/vcom.c    ****     memcpy( &buff[0], &tempBuff[lenTop], len);
 225              		.loc 1 132 0
 226 005a 01A9     		add	r1, sp, #4
 227 005c 5144     		add	r1, r1, r10
 228 005e 2200     		movs	r2, r4
 229 0060 4846     		mov	r0, r9
 230 0062 FFF7FEFF 		bl	memcpy
 231              	.LVL11:
 133:Src/vcom.c    ****     iw = len;
 232              		.loc 1 133 0
 233 0066 A4B2     		uxth	r4, r4
 234              	.LVL12:
 235 0068 4346     		mov	r3, r8
 236 006a DC53     		strh	r4, [r3, r7]
 237              	.LVL13:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 11


 238              	.L11:
 239              	.LBB25:
 240              	.LBB26:
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 241              		.loc 2 215 0
 242              		.syntax divided
 243              	@ 215 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 244 006c 85F31088 		MSR primask, r5
 245              	@ 0 "" 2
 246              	.LVL14:
 247              		.thumb
 248              		.syntax unified
 249              	.LBE26:
 250              	.LBE25:
 134:Src/vcom.c    ****   }
 135:Src/vcom.c    ****   RESTORE_PRIMASK();
 136:Src/vcom.c    ****   
 137:Src/vcom.c    ****   HAL_NVIC_SetPendingIRQ(USARTX_IRQn);
 251              		.loc 1 137 0
 252 0070 1C20     		movs	r0, #28
 253 0072 FFF7FEFF 		bl	HAL_NVIC_SetPendingIRQ
 254              	.LVL15:
 138:Src/vcom.c    ****     
 139:Src/vcom.c    ****   va_end(args);
 140:Src/vcom.c    **** }
 255              		.loc 1 140 0
 256 0076 22B0     		add	sp, sp, #136
 257              		@ sp needed
 258 0078 1CBC     		pop	{r2, r3, r4}
 259 007a 9046     		mov	r8, r2
 260 007c 9946     		mov	r9, r3
 261 007e A246     		mov	r10, r4
 262 0080 F0BC     		pop	{r4, r5, r6, r7}
 263 0082 08BC     		pop	{r3}
 264 0084 04B0     		add	sp, sp, #16
 265 0086 1847     		bx	r3
 266              	.LVL16:
 267              	.L12:
 124:Src/vcom.c    ****     iw+=len;
 268              		.loc 1 124 0
 269 0088 074B     		ldr	r3, .L13
 270 008a 9846     		mov	r8, r3
 271 008c 7027     		movs	r7, #112
 272 008e DB5B     		ldrh	r3, [r3, r7]
 273 0090 0648     		ldr	r0, .L13+4
 274 0092 C018     		adds	r0, r0, r3
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 12


 275 0094 01A9     		add	r1, sp, #4
 276 0096 FFF7FEFF 		bl	memcpy
 277              	.LVL17:
 125:Src/vcom.c    ****   }
 278              		.loc 1 125 0
 279 009a 4346     		mov	r3, r8
 280 009c DC5B     		ldrh	r4, [r3, r7]
 281 009e A419     		adds	r4, r4, r6
 282 00a0 A4B2     		uxth	r4, r4
 283 00a2 DC53     		strh	r4, [r3, r7]
 284 00a4 E2E7     		b	.L11
 285              	.L14:
 286 00a6 C046     		.align	2
 287              	.L13:
 288 00a8 00000000 		.word	.LANCHOR0
 289 00ac 74000000 		.word	buff
 290              		.cfi_endproc
 291              	.LFE42:
 293              		.section	.text.vcom_Print,"ax",%progbits
 294              		.align	1
 295              		.global	vcom_Print
 296              		.syntax unified
 297              		.code	16
 298              		.thumb_func
 299              		.fpu softvfp
 301              	vcom_Print:
 302              	.LFB43:
 141:Src/vcom.c    **** 
 142:Src/vcom.c    **** /* modifes only ir*/
 143:Src/vcom.c    **** void vcom_Print( void)
 144:Src/vcom.c    **** {
 303              		.loc 1 144 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307 0000 70B5     		push	{r4, r5, r6, lr}
 308              	.LCFI6:
 309              		.cfi_def_cfa_offset 16
 310              		.cfi_offset 4, -16
 311              		.cfi_offset 5, -12
 312              		.cfi_offset 6, -8
 313              		.cfi_offset 14, -4
 145:Src/vcom.c    ****   char* CurChar;
 146:Src/vcom.c    ****   while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 314              		.loc 1 146 0
 315 0002 12E0     		b	.L16
 316              	.L17:
 317              	.LBB27:
 318              	.LBB28:
 319              	.LBB29:
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320              		.loc 2 203 0
 321              		.syntax divided
 322              	@ 203 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 323 0004 EFF31082 		MRS r2, primask
 324              	@ 0 "" 2
 325              		.thumb
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 13


 326              		.syntax unified
 327              	.LBE29:
 328              	.LBE28:
 329              	.LBB30:
 330              	.LBB31:
  71:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 331              		.loc 2 71 0
 332              		.syntax divided
 333              	@ 71 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 334 0008 72B6     		cpsid i
 335              	@ 0 "" 2
 336              		.thumb
 337              		.syntax unified
 338              	.LBE31:
 339              	.LBE30:
 147:Src/vcom.c    ****   {
 148:Src/vcom.c    ****     BACKUP_PRIMASK();
 149:Src/vcom.c    ****     DISABLE_IRQ();
 150:Src/vcom.c    ****     
 151:Src/vcom.c    ****     CurChar = &buff[ir];
 340              		.loc 1 151 0
 341 000a 1248     		ldr	r0, .L18
 342 000c 7225     		movs	r5, #114
 343 000e 435B     		ldrh	r3, [r0, r5]
 344 0010 1149     		ldr	r1, .L18+4
 345 0012 5918     		adds	r1, r3, r1
 346              	.LVL18:
 152:Src/vcom.c    ****     ir= (ir+1) %BUFSIZE;
 347              		.loc 1 152 0
 348 0014 0133     		adds	r3, r3, #1
 349 0016 FF24     		movs	r4, #255
 350 0018 2340     		ands	r3, r4
 351 001a 4353     		strh	r3, [r0, r5]
 352              	.LBB32:
 353              	.LBB33:
 354              		.loc 2 215 0
 355              		.syntax divided
 356              	@ 215 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 357 001c 82F31088 		MSR primask, r2
 358              	@ 0 "" 2
 359              		.thumb
 360              		.syntax unified
 361              	.LBE33:
 362              	.LBE32:
 153:Src/vcom.c    ****     
 154:Src/vcom.c    ****     RESTORE_PRIMASK();
 155:Src/vcom.c    ****     
 156:Src/vcom.c    ****     HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
 363              		.loc 1 156 0
 364 0020 9623     		movs	r3, #150
 365 0022 5B00     		lsls	r3, r3, #1
 366 0024 0122     		movs	r2, #1
 367 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 368              	.LVL19:
 369              	.L16:
 370              	.LBE27:
 146:Src/vcom.c    ****   {
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 14


 371              		.loc 1 146 0
 372 002a 0A4A     		ldr	r2, .L18
 373 002c 7023     		movs	r3, #112
 374 002e D35A     		ldrh	r3, [r2, r3]
 375 0030 0133     		adds	r3, r3, #1
 376 0032 FF33     		adds	r3, r3, #255
 377 0034 7221     		movs	r1, #114
 378 0036 525A     		ldrh	r2, [r2, r1]
 379 0038 9B1A     		subs	r3, r3, r2
 380 003a D917     		asrs	r1, r3, #31
 381 003c 090E     		lsrs	r1, r1, #24
 382 003e 5B18     		adds	r3, r3, r1
 383 0040 FF22     		movs	r2, #255
 384 0042 1340     		ands	r3, r2
 385 0044 5B1A     		subs	r3, r3, r1
 386 0046 002B     		cmp	r3, #0
 387 0048 DCDC     		bgt	.L17
 157:Src/vcom.c    ****   }
 158:Src/vcom.c    ****   HAL_NVIC_ClearPendingIRQ(USARTX_IRQn);
 388              		.loc 1 158 0
 389 004a 1C20     		movs	r0, #28
 390 004c FFF7FEFF 		bl	HAL_NVIC_ClearPendingIRQ
 391              	.LVL20:
 159:Src/vcom.c    **** }
 392              		.loc 1 159 0
 393              		@ sp needed
 394 0050 70BD     		pop	{r4, r5, r6, pc}
 395              	.L19:
 396 0052 C046     		.align	2
 397              	.L18:
 398 0054 00000000 		.word	.LANCHOR0
 399 0058 74000000 		.word	buff
 400              		.cfi_endproc
 401              	.LFE43:
 403              		.section	.text.vcom_Send_Lp,"ax",%progbits
 404              		.align	1
 405              		.global	vcom_Send_Lp
 406              		.syntax unified
 407              		.code	16
 408              		.thumb_func
 409              		.fpu softvfp
 411              	vcom_Send_Lp:
 412              	.LFB44:
 160:Src/vcom.c    **** 
 161:Src/vcom.c    **** void vcom_Send_Lp( char *format, ... )
 162:Src/vcom.c    **** {
 413              		.loc 1 162 0
 414              		.cfi_startproc
 415              		@ args = 4, pretend = 16, frame = 136
 416              		@ frame_needed = 0, uses_anonymous_args = 1
 417              	.LVL21:
 418 0000 0FB4     		push	{r0, r1, r2, r3}
 419              	.LCFI7:
 420              		.cfi_def_cfa_offset 16
 421 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 422              	.LCFI8:
 423              		.cfi_def_cfa_offset 36
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 15


 424              		.cfi_offset 4, -36
 425              		.cfi_offset 5, -32
 426              		.cfi_offset 6, -28
 427              		.cfi_offset 7, -24
 428              		.cfi_offset 14, -20
 429 0004 D646     		mov	lr, r10
 430 0006 4F46     		mov	r7, r9
 431 0008 4646     		mov	r6, r8
 432 000a C0B5     		push	{r6, r7, lr}
 433              	.LCFI9:
 434              		.cfi_def_cfa_offset 48
 435              		.cfi_offset 8, -48
 436              		.cfi_offset 9, -44
 437              		.cfi_offset 10, -40
 438 000c A2B0     		sub	sp, sp, #136
 439              	.LCFI10:
 440              		.cfi_def_cfa_offset 184
 441 000e 2AAB     		add	r3, sp, #168
 442 0010 02CB     		ldmia	r3!, {r1}
 163:Src/vcom.c    ****   va_list args;
 164:Src/vcom.c    ****   va_start(args, format);
 443              		.loc 1 164 0
 444 0012 2193     		str	r3, [sp, #132]
 445              	.LBB34:
 446              	.LBB35:
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 447              		.loc 2 203 0
 448              		.syntax divided
 449              	@ 203 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 450 0014 EFF31085 		MRS r5, primask
 451              	@ 0 "" 2
 452              		.thumb
 453              		.syntax unified
 454              	.LBE35:
 455              	.LBE34:
 456              	.LBB36:
 457              	.LBB37:
  71:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 458              		.loc 2 71 0
 459              		.syntax divided
 460              	@ 71 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 461 0018 72B6     		cpsid i
 462              	@ 0 "" 2
 463              		.thumb
 464              		.syntax unified
 465              	.LBE37:
 466              	.LBE36:
 165:Src/vcom.c    ****   uint8_t len;
 166:Src/vcom.c    ****   uint8_t lenTop;
 167:Src/vcom.c    ****   char tempBuff[128];
 168:Src/vcom.c    ****   
 169:Src/vcom.c    ****   BACKUP_PRIMASK();
 170:Src/vcom.c    ****   DISABLE_IRQ();
 171:Src/vcom.c    ****   
 172:Src/vcom.c    ****   /*convert into string at buff[0] of length iw*/
 173:Src/vcom.c    ****   len = vsprintf(&tempBuff[0], format, args);
 467              		.loc 1 173 0
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 16


 468 001a 219A     		ldr	r2, [sp, #132]
 469 001c 01A8     		add	r0, sp, #4
 470 001e FFF7FEFF 		bl	vsprintf
 471              	.LVL22:
 472 0022 C6B2     		uxtb	r6, r0
 473              	.LVL23:
 174:Src/vcom.c    ****   
 175:Src/vcom.c    ****   if (iw+len<BUFSIZE)
 474              		.loc 1 175 0
 475 0024 1E4A     		ldr	r2, .L24
 476 0026 7023     		movs	r3, #112
 477 0028 D35A     		ldrh	r3, [r2, r3]
 478 002a FF22     		movs	r2, #255
 479 002c 0240     		ands	r2, r0
 480 002e 9B18     		adds	r3, r3, r2
 481 0030 FF2B     		cmp	r3, #255
 482 0032 26DD     		ble	.L23
 176:Src/vcom.c    ****   {
 177:Src/vcom.c    ****     memcpy( &buff[iw], &tempBuff[0], len);
 178:Src/vcom.c    ****     iw+=len;
 179:Src/vcom.c    ****   }
 180:Src/vcom.c    ****   else
 181:Src/vcom.c    ****   {
 182:Src/vcom.c    ****     lenTop=BUFSIZE-iw;
 483              		.loc 1 182 0
 484 0034 1A4B     		ldr	r3, .L24
 485 0036 9846     		mov	r8, r3
 486 0038 7027     		movs	r7, #112
 487 003a DC5B     		ldrh	r4, [r3, r7]
 488 003c E4B2     		uxtb	r4, r4
 489 003e 6142     		rsbs	r1, r4, #0
 490 0040 CBB2     		uxtb	r3, r1
 491 0042 9A46     		mov	r10, r3
 492              	.LVL24:
 183:Src/vcom.c    ****     memcpy( &buff[iw], &tempBuff[0], lenTop);
 493              		.loc 1 183 0
 494 0044 4346     		mov	r3, r8
 495 0046 D85B     		ldrh	r0, [r3, r7]
 496 0048 164B     		ldr	r3, .L24+4
 497 004a 9946     		mov	r9, r3
 498 004c 4844     		add	r0, r0, r9
 499 004e 5246     		mov	r2, r10
 500 0050 01A9     		add	r1, sp, #4
 501 0052 FFF7FEFF 		bl	memcpy
 502              	.LVL25:
 184:Src/vcom.c    ****     len-=lenTop;
 503              		.loc 1 184 0
 504 0056 A419     		adds	r4, r4, r6
 505 0058 E4B2     		uxtb	r4, r4
 506              	.LVL26:
 185:Src/vcom.c    ****     memcpy( &buff[0], &tempBuff[lenTop], len);
 507              		.loc 1 185 0
 508 005a 01A9     		add	r1, sp, #4
 509 005c 5144     		add	r1, r1, r10
 510 005e 2200     		movs	r2, r4
 511 0060 4846     		mov	r0, r9
 512 0062 FFF7FEFF 		bl	memcpy
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 17


 513              	.LVL27:
 186:Src/vcom.c    ****     iw = len;
 514              		.loc 1 186 0
 515 0066 A4B2     		uxth	r4, r4
 516              	.LVL28:
 517 0068 4346     		mov	r3, r8
 518 006a DC53     		strh	r4, [r3, r7]
 519              	.LVL29:
 520              	.L22:
 521              	.LBB38:
 522              	.LBB39:
 523              		.loc 2 215 0
 524              		.syntax divided
 525              	@ 215 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 526 006c 85F31088 		MSR primask, r5
 527              	@ 0 "" 2
 528              	.LVL30:
 529              		.thumb
 530              		.syntax unified
 531              	.LBE39:
 532              	.LBE38:
 187:Src/vcom.c    ****   }
 188:Src/vcom.c    ****   RESTORE_PRIMASK();  
 189:Src/vcom.c    ****   
 190:Src/vcom.c    ****   va_end(args);
 191:Src/vcom.c    **** }
 533              		.loc 1 191 0
 534 0070 22B0     		add	sp, sp, #136
 535              		@ sp needed
 536 0072 1CBC     		pop	{r2, r3, r4}
 537 0074 9046     		mov	r8, r2
 538 0076 9946     		mov	r9, r3
 539 0078 A246     		mov	r10, r4
 540 007a F0BC     		pop	{r4, r5, r6, r7}
 541 007c 08BC     		pop	{r3}
 542 007e 04B0     		add	sp, sp, #16
 543 0080 1847     		bx	r3
 544              	.LVL31:
 545              	.L23:
 177:Src/vcom.c    ****     iw+=len;
 546              		.loc 1 177 0
 547 0082 074B     		ldr	r3, .L24
 548 0084 9846     		mov	r8, r3
 549 0086 7027     		movs	r7, #112
 550 0088 DB5B     		ldrh	r3, [r3, r7]
 551 008a 0648     		ldr	r0, .L24+4
 552 008c C018     		adds	r0, r0, r3
 553 008e 01A9     		add	r1, sp, #4
 554 0090 FFF7FEFF 		bl	memcpy
 555              	.LVL32:
 178:Src/vcom.c    ****   }
 556              		.loc 1 178 0
 557 0094 4346     		mov	r3, r8
 558 0096 DC5B     		ldrh	r4, [r3, r7]
 559 0098 A419     		adds	r4, r4, r6
 560 009a A4B2     		uxth	r4, r4
 561 009c DC53     		strh	r4, [r3, r7]
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 18


 562 009e E5E7     		b	.L22
 563              	.L25:
 564              		.align	2
 565              	.L24:
 566 00a0 00000000 		.word	.LANCHOR0
 567 00a4 74000000 		.word	buff
 568              		.cfi_endproc
 569              	.LFE44:
 571              		.section	.text.vcom_IoInit,"ax",%progbits
 572              		.align	1
 573              		.global	vcom_IoInit
 574              		.syntax unified
 575              		.code	16
 576              		.thumb_func
 577              		.fpu softvfp
 579              	vcom_IoInit:
 580              	.LFB46:
 192:Src/vcom.c    **** /**
 193:Src/vcom.c    ****   * @brief UART MSP Initialization 
 194:Src/vcom.c    ****   *        This function configures the hardware resources used in this example: 
 195:Src/vcom.c    ****   *           - Peripheral's clock enable
 196:Src/vcom.c    ****   *           - Peripheral's GPIO Configuration  
 197:Src/vcom.c    ****   *           - NVIC configuration for UART interrupt request enable
 198:Src/vcom.c    ****   * @param huart: UART handle pointer
 199:Src/vcom.c    ****   * @retval None
 200:Src/vcom.c    ****   */
 201:Src/vcom.c    **** void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 202:Src/vcom.c    **** {
 203:Src/vcom.c    ****   
 204:Src/vcom.c    ****   /*##-1- Enable peripherals and GPIO Clocks #################################*/
 205:Src/vcom.c    **** 
 206:Src/vcom.c    ****   /* Enable USART1 clock */
 207:Src/vcom.c    ****   USARTX_CLK_ENABLE(); 
 208:Src/vcom.c    ****   
 209:Src/vcom.c    ****   /*##-2- Configure peripheral GPIO ##########################################*/  
 210:Src/vcom.c    ****   vcom_IoInit( );
 211:Src/vcom.c    **** }
 212:Src/vcom.c    **** 
 213:Src/vcom.c    **** void vcom_IoInit(void)
 214:Src/vcom.c    **** {
 581              		.loc 1 214 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 32
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585 0000 30B5     		push	{r4, r5, lr}
 586              	.LCFI11:
 587              		.cfi_def_cfa_offset 12
 588              		.cfi_offset 4, -12
 589              		.cfi_offset 5, -8
 590              		.cfi_offset 14, -4
 591 0002 89B0     		sub	sp, sp, #36
 592              	.LCFI12:
 593              		.cfi_def_cfa_offset 48
 594              	.LBB40:
 215:Src/vcom.c    ****   GPIO_InitTypeDef  GPIO_InitStruct={0};
 216:Src/vcom.c    ****     /* Enable GPIO TX/RX clock */
 217:Src/vcom.c    ****   USARTX_TX_GPIO_CLK_ENABLE();
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 19


 595              		.loc 1 217 0
 596 0004 134B     		ldr	r3, .L27
 597 0006 D96A     		ldr	r1, [r3, #44]
 598 0008 0122     		movs	r2, #1
 599 000a 1143     		orrs	r1, r2
 600 000c D962     		str	r1, [r3, #44]
 601 000e D96A     		ldr	r1, [r3, #44]
 602 0010 1140     		ands	r1, r2
 603 0012 0191     		str	r1, [sp, #4]
 604 0014 0199     		ldr	r1, [sp, #4]
 605              	.LBE40:
 606              	.LBB41:
 218:Src/vcom.c    ****   USARTX_RX_GPIO_CLK_ENABLE();
 607              		.loc 1 218 0
 608 0016 D96A     		ldr	r1, [r3, #44]
 609 0018 1143     		orrs	r1, r2
 610 001a D962     		str	r1, [r3, #44]
 611 001c DB6A     		ldr	r3, [r3, #44]
 612 001e 1340     		ands	r3, r2
 613 0020 0293     		str	r3, [sp, #8]
 614 0022 029B     		ldr	r3, [sp, #8]
 615              	.LBE41:
 219:Src/vcom.c    ****     /* UART TX GPIO pin configuration  */
 220:Src/vcom.c    ****   GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 616              		.loc 1 220 0
 617 0024 0424     		movs	r4, #4
 618 0026 0394     		str	r4, [sp, #12]
 221:Src/vcom.c    ****   GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 619              		.loc 1 221 0
 620 0028 0223     		movs	r3, #2
 621 002a 0493     		str	r3, [sp, #16]
 222:Src/vcom.c    ****   GPIO_InitStruct.Pull      = GPIO_PULLUP;
 622              		.loc 1 222 0
 623 002c 0592     		str	r2, [sp, #20]
 223:Src/vcom.c    ****   GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 624              		.loc 1 223 0
 625 002e 0133     		adds	r3, r3, #1
 626 0030 0693     		str	r3, [sp, #24]
 224:Src/vcom.c    ****   GPIO_InitStruct.Alternate = USARTX_TX_AF;
 627              		.loc 1 224 0
 628 0032 0794     		str	r4, [sp, #28]
 225:Src/vcom.c    **** 
 226:Src/vcom.c    ****   HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 629              		.loc 1 226 0
 630 0034 A025     		movs	r5, #160
 631 0036 ED05     		lsls	r5, r5, #23
 632 0038 03A9     		add	r1, sp, #12
 633 003a 2800     		movs	r0, r5
 634 003c FFF7FEFF 		bl	HAL_GPIO_Init
 635              	.LVL33:
 227:Src/vcom.c    **** 
 228:Src/vcom.c    ****   /* UART RX GPIO pin configuration  */
 229:Src/vcom.c    ****   GPIO_InitStruct.Pin = USARTX_RX_PIN;
 636              		.loc 1 229 0
 637 0040 0823     		movs	r3, #8
 638 0042 0393     		str	r3, [sp, #12]
 230:Src/vcom.c    ****   GPIO_InitStruct.Alternate = USARTX_RX_AF;
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 20


 639              		.loc 1 230 0
 640 0044 0794     		str	r4, [sp, #28]
 231:Src/vcom.c    **** 
 232:Src/vcom.c    ****   HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 641              		.loc 1 232 0
 642 0046 03A9     		add	r1, sp, #12
 643 0048 2800     		movs	r0, r5
 644 004a FFF7FEFF 		bl	HAL_GPIO_Init
 645              	.LVL34:
 233:Src/vcom.c    **** }
 646              		.loc 1 233 0
 647 004e 09B0     		add	sp, sp, #36
 648              		@ sp needed
 649 0050 30BD     		pop	{r4, r5, pc}
 650              	.L28:
 651 0052 C046     		.align	2
 652              	.L27:
 653 0054 00100240 		.word	1073876992
 654              		.cfi_endproc
 655              	.LFE46:
 657              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 658              		.align	1
 659              		.global	HAL_UART_MspInit
 660              		.syntax unified
 661              		.code	16
 662              		.thumb_func
 663              		.fpu softvfp
 665              	HAL_UART_MspInit:
 666              	.LFB45:
 202:Src/vcom.c    ****   
 667              		.loc 1 202 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 671              	.LVL35:
 672 0000 10B5     		push	{r4, lr}
 673              	.LCFI13:
 674              		.cfi_def_cfa_offset 8
 675              		.cfi_offset 4, -8
 676              		.cfi_offset 14, -4
 207:Src/vcom.c    ****   
 677              		.loc 1 207 0
 678 0002 044A     		ldr	r2, .L30
 679 0004 916B     		ldr	r1, [r2, #56]
 680 0006 8023     		movs	r3, #128
 681 0008 9B02     		lsls	r3, r3, #10
 682 000a 0B43     		orrs	r3, r1
 683 000c 9363     		str	r3, [r2, #56]
 210:Src/vcom.c    **** }
 684              		.loc 1 210 0
 685 000e FFF7FEFF 		bl	vcom_IoInit
 686              	.LVL36:
 211:Src/vcom.c    **** 
 687              		.loc 1 211 0
 688              		@ sp needed
 689 0012 10BD     		pop	{r4, pc}
 690              	.L31:
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 21


 691              		.align	2
 692              	.L30:
 693 0014 00100240 		.word	1073876992
 694              		.cfi_endproc
 695              	.LFE45:
 697              		.section	.text.vcom_IoDeInit,"ax",%progbits
 698              		.align	1
 699              		.global	vcom_IoDeInit
 700              		.syntax unified
 701              		.code	16
 702              		.thumb_func
 703              		.fpu softvfp
 705              	vcom_IoDeInit:
 706              	.LFB47:
 234:Src/vcom.c    **** 
 235:Src/vcom.c    **** void vcom_IoDeInit(void)
 236:Src/vcom.c    **** {
 707              		.loc 1 236 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 32
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711 0000 10B5     		push	{r4, lr}
 712              	.LCFI14:
 713              		.cfi_def_cfa_offset 8
 714              		.cfi_offset 4, -8
 715              		.cfi_offset 14, -4
 716 0002 88B0     		sub	sp, sp, #32
 717              	.LCFI15:
 718              		.cfi_def_cfa_offset 40
 237:Src/vcom.c    ****   GPIO_InitTypeDef GPIO_InitStructure={0};
 719              		.loc 1 237 0
 720 0004 0C22     		movs	r2, #12
 721 0006 0021     		movs	r1, #0
 722 0008 05A8     		add	r0, sp, #20
 723 000a FFF7FEFF 		bl	memset
 724              	.LVL37:
 725              	.LBB42:
 238:Src/vcom.c    ****   
 239:Src/vcom.c    ****   USARTX_TX_GPIO_CLK_ENABLE();
 726              		.loc 1 239 0
 727 000e 114A     		ldr	r2, .L33
 728 0010 D16A     		ldr	r1, [r2, #44]
 729 0012 0123     		movs	r3, #1
 730 0014 1943     		orrs	r1, r3
 731 0016 D162     		str	r1, [r2, #44]
 732 0018 D16A     		ldr	r1, [r2, #44]
 733 001a 1940     		ands	r1, r3
 734 001c 0191     		str	r1, [sp, #4]
 735 001e 0199     		ldr	r1, [sp, #4]
 736              	.LBE42:
 737              	.LBB43:
 240:Src/vcom.c    ****   USARTX_RX_GPIO_CLK_ENABLE();
 738              		.loc 1 240 0
 739 0020 D16A     		ldr	r1, [r2, #44]
 740 0022 1943     		orrs	r1, r3
 741 0024 D162     		str	r1, [r2, #44]
 742 0026 D26A     		ldr	r2, [r2, #44]
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 22


 743 0028 1340     		ands	r3, r2
 744 002a 0293     		str	r3, [sp, #8]
 745 002c 029B     		ldr	r3, [sp, #8]
 746              	.LBE43:
 241:Src/vcom.c    **** 
 242:Src/vcom.c    ****   GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 747              		.loc 1 242 0
 748 002e 0323     		movs	r3, #3
 749 0030 0493     		str	r3, [sp, #16]
 243:Src/vcom.c    ****   GPIO_InitStructure.Pull = GPIO_NOPULL;
 244:Src/vcom.c    ****   
 245:Src/vcom.c    ****   GPIO_InitStructure.Pin =  USARTX_TX_PIN ;
 750              		.loc 1 245 0
 751 0032 0133     		adds	r3, r3, #1
 752 0034 0393     		str	r3, [sp, #12]
 246:Src/vcom.c    ****   HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 753              		.loc 1 246 0
 754 0036 A024     		movs	r4, #160
 755 0038 E405     		lsls	r4, r4, #23
 756 003a 03A9     		add	r1, sp, #12
 757 003c 2000     		movs	r0, r4
 758 003e FFF7FEFF 		bl	HAL_GPIO_Init
 759              	.LVL38:
 247:Src/vcom.c    ****   
 248:Src/vcom.c    ****   GPIO_InitStructure.Pin =  USARTX_RX_PIN ;
 760              		.loc 1 248 0
 761 0042 0823     		movs	r3, #8
 762 0044 0393     		str	r3, [sp, #12]
 249:Src/vcom.c    ****   HAL_GPIO_Init(  USARTX_RX_GPIO_PORT, &GPIO_InitStructure ); 
 763              		.loc 1 249 0
 764 0046 03A9     		add	r1, sp, #12
 765 0048 2000     		movs	r0, r4
 766 004a FFF7FEFF 		bl	HAL_GPIO_Init
 767              	.LVL39:
 250:Src/vcom.c    **** }
 768              		.loc 1 250 0
 769 004e 08B0     		add	sp, sp, #32
 770              		@ sp needed
 771 0050 10BD     		pop	{r4, pc}
 772              	.L34:
 773 0052 C046     		.align	2
 774              	.L33:
 775 0054 00100240 		.word	1073876992
 776              		.cfi_endproc
 777              	.LFE47:
 779              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 780              		.align	1
 781              		.global	HAL_UART_MspDeInit
 782              		.syntax unified
 783              		.code	16
 784              		.thumb_func
 785              		.fpu softvfp
 787              	HAL_UART_MspDeInit:
 788              	.LFB48:
 251:Src/vcom.c    **** 
 252:Src/vcom.c    **** /**
 253:Src/vcom.c    ****   * @brief UART MSP DeInit
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 23


 254:Src/vcom.c    ****   * @param huart: uart handle
 255:Src/vcom.c    ****   * @retval None
 256:Src/vcom.c    ****   */
 257:Src/vcom.c    **** void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 258:Src/vcom.c    **** {
 789              		.loc 1 258 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 0
 792              		@ frame_needed = 0, uses_anonymous_args = 0
 793              	.LVL40:
 794 0000 10B5     		push	{r4, lr}
 795              	.LCFI16:
 796              		.cfi_def_cfa_offset 8
 797              		.cfi_offset 4, -8
 798              		.cfi_offset 14, -4
 259:Src/vcom.c    ****   vcom_IoDeInit( );
 799              		.loc 1 259 0
 800 0002 FFF7FEFF 		bl	vcom_IoDeInit
 801              	.LVL41:
 260:Src/vcom.c    **** }
 802              		.loc 1 260 0
 803              		@ sp needed
 804 0006 10BD     		pop	{r4, pc}
 805              		.cfi_endproc
 806              	.LFE48:
 808              		.global	iw
 809              		.bss
 810              		.align	2
 811              		.set	.LANCHOR0,. + 0
 814              	UartHandle:
 815 0000 00000000 		.space	112
 815      00000000 
 815      00000000 
 815      00000000 
 815      00000000 
 818              	iw:
 819 0070 0000     		.space	2
 822              	ir:
 823 0072 0000     		.space	2
 826              	buff:
 827 0074 00000000 		.space	256
 827      00000000 
 827      00000000 
 827      00000000 
 827      00000000 
 828              		.text
 829              	.Letext0:
 830              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 831              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 832              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 833              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 834              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 835              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h"
 836              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 837              		.file 10 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 838              		.file 11 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l072xx.h"
 839              		.file 12 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stdarg.h"
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 24


 840              		.file 13 "<built-in>"
 841              		.file 14 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdio.h"
 842              		.file 15 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 843              		.file 16 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h"
 844              		.file 17 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 845              		.file 18 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h"
 846              		.file 19 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdlib.h"
 847              		.file 20 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_cortex.h"
 848              		.file 21 "Inc/debug.h"
ARM GAS  /var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 vcom.c
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:16     .text.vcom_Init:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:23     .text.vcom_Init:0000000000000000 vcom_Init
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:82     .text.vcom_Init:000000000000003c $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:88     .text.vcom_DeInit:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:95     .text.vcom_DeInit:0000000000000000 vcom_DeInit
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:116    .text.vcom_DeInit:000000000000000c $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:121    .text.vcom_Send:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:128    .text.vcom_Send:0000000000000000 vcom_Send
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:288    .text.vcom_Send:00000000000000a8 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:826    .bss:0000000000000074 buff
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:294    .text.vcom_Print:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:301    .text.vcom_Print:0000000000000000 vcom_Print
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:398    .text.vcom_Print:0000000000000054 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:404    .text.vcom_Send_Lp:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:411    .text.vcom_Send_Lp:0000000000000000 vcom_Send_Lp
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:566    .text.vcom_Send_Lp:00000000000000a0 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:572    .text.vcom_IoInit:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:579    .text.vcom_IoInit:0000000000000000 vcom_IoInit
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:653    .text.vcom_IoInit:0000000000000054 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:658    .text.HAL_UART_MspInit:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:665    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:693    .text.HAL_UART_MspInit:0000000000000014 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:698    .text.vcom_IoDeInit:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:705    .text.vcom_IoDeInit:0000000000000000 vcom_IoDeInit
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:775    .text.vcom_IoDeInit:0000000000000054 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:780    .text.HAL_UART_MspDeInit:0000000000000000 $t
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:787    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:818    .bss:0000000000000070 iw
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:810    .bss:0000000000000000 $d
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:814    .bss:0000000000000000 UartHandle
/var/folders/2m/zqg86yyd4hbf56w83tkxjpvr0000gn/T//ccV1DJZT.s:822    .bss:0000000000000072 ir

UNDEFINED SYMBOLS
HAL_UART_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
Error_Handler
HAL_UART_DeInit
vsprintf
memcpy
HAL_NVIC_SetPendingIRQ
HAL_UART_Transmit
HAL_NVIC_ClearPendingIRQ
HAL_GPIO_Init
memset
